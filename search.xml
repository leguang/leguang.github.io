<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[电商项目接口文档]]></title>
    <url>%2F%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%2FDocs%2F%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[电商项目接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 前言主要依赖 HTTP + Websocket 完成整个电商项目的前后端通讯和协作。当然只是抛砖引玉，不一定完全正确，需要大家一起商议后决定，由于不知道后台具体的表的设计如何，因此只能猜测着用url定义资源，因此url设计的路径部分会有不合理的地方，所以最好商讨、抽象出一套合理的资源路径，可参考 Github接口 和 淘宝Api 的设计。 要求具体要求：公司接口公共规范 。 业务简介本项目是我司对电商的一次探索，希望能做成多端覆盖，功能完整的趣味时尚型商城。 业务模块总体参考了主流电商的功能后划分出7大部分，如下图所示： Http部分使用场景 App的初始化数据尽量都用http协议获取。 页面的初始化数据尽量都用http协议获取。 电商接口预览站在数据的角度，一个完整的电商需要满足以下模块的功能需求，可以将接口分成如下几类： base url：https://api.xxx.com/path/ 分类 接口 参数 短信sms https://api.xxx.com/path/v1/sms countryCode、phone等 注册register https://api.xxx.com/path/v1/register username、password，info等 登录login https://api.xxx.com/path/v1/login username、password等 搜索search https://api.xxx.com/path/v1/search/{搜索分类：如products} keyword、sort等 首页home https://api.xxx.com/path/v1/home keyword、category等 配送delivery https://api.xxx.com/path/v1/deliveries/{配送uid} keyword、sort、name、address、phone等 分类category https://api.xxx.com/path/v1/category/{种类名称或者id，包括具体的种类和子种类} keyword、sort等 订单order https://api.xxx.com/path/v1/orders/{订单uid} keyword、sort、sort、productID等 商品product https://api.xxx.com/path/v1/products/{具体商品uid} keyword、category、sort等 店铺shop https://api.xxx.com/path/v1/shop/{店铺uid} keyword、sort等 关键字keyword https://api.xxx.com/path/v1/keyword/{具体关键字} keyword、sort等 购物车cart https://api.xxx.com/path/v1/cart/{购物车id} keyword、sort等 短信SMS该接口用于向指定手机发送短信验证码，要求支持国际手机号码。由于该接口是暴露在外的，因此需要尽量做到严格限制，比如一个手机号码一天只能发送多少条，一个IP地址最多只允许多少个手机号码发送短信。 地址：https://api.xxx.com/path/v1/sms 请求头1234567POST /path/v1/smsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1234&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然发成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;F2W34T23T23T23T23T&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data Json对象 是 同上 data.uid String 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少区号、缺少手机号码等 XXX int 否 参数错误：区号错误、手机号码错误、格式错误等 XXX int 否 短信发送过于频繁，请稍后再试 XXX int 否 该手机号码暂不支持 注册注册如果是在小程序端或者用户第一次使用第三方登录时，需要绑定手机号码或者是填写相关信息，并返回 token 给调用方。 地址：https://api.xxx.com/path/v1/register 请求头1234567POST /path/v1/registerAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数12345678&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;, &quot;password&quot;: &quot;111111&quot;, &quot;sms&quot;: &quot;348543&quot;, &quot;accessToken &quot;: &quot;t23t23t23t23tt3&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 password String 否 密码 sms String 否 验证码 accessToken String 否 第三方登录时的临时token user String 是 这个user信息需不需要在这里给，可以商量 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;3811c92206b0436693c4c4d25&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.token String 是 token值 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少countryCode、缺少phone等 XXX int 否 参数错误：countryCode错误、phone错误、格式错误等 XXX int 否 注册失败：与第一次注册相关 XXX int 否 登录失败：与登录相关 XXX int 否 账号异常：可能被封禁了 登录登录的过程其实就是一个换取 token 的过程，由于电商会集成第三方登录，因此分 access_token （微信的叫法）换取 token 和 账号密码换取 token 。 地址：https://api.xxx.com/path/v1/login 请求头1234567POST /path/v1/loginAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数12345678&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;, &quot;password&quot;: &quot;111111&quot;, &quot;sms&quot;: &quot;348543&quot;, &quot;accessToken &quot;: &quot;t23t23t23t23tt3&quot;, &quot;type&quot;: &quot;sms&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 password String 否 密码，只有密码登录的时候才有这个值 sms String 否 验证码，只有验证码登录的时候才有这个值 accessToken String 否 第三方登录时的临时token，只有是第三方登录时才有这个值 type String 是 用于描述是什么登陆或者注册方式type=sms表示短信登录type=password表示密码登录type=oauth表示OAuth2.0授权登录 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;3811c92206b0436693c4c4d25&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.token String 是 token值 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少countryCode、缺少phone等 XXX int 否 参数错误：countryCode错误、phone错误、格式错误等 XXX int 否 登录失败：与登录相关 XXX int 否 账号异常：可能被封禁了 退出登录该接口是退出登录状态，让token立马失效。 地址：https://api.xxx.com/path/v1/logout 请求头1234567DELETE /path/v1/logoutAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 刷新token对token的期限进行刷新等 地址：https://api.xxx.com/path/v1/tokens 请求头1234567PUT /path/v1/tokensAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: &quot;3000&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 随便写，也可以作为服务器给前端固定提示的内容 code int 是 与响应头里的Status一样 data.token String 是 获取的token data.expires String 是 期限 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 关键字查询关键字不传参数则获取热门搜索，或者推荐搜索。 地址：https://api.xxx.com/path/v1/keyword 请求头1234567GET /path/v1/keywordAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?keyword=方便面&amp;sort=des params 类型 是否必要 描述 keyword String 否 查询的关键字 sort String 否 同上 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应12345678910111213141516171819202122232425262728&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;query&quot;: &quot;方便面&quot;, &quot;keyword&quot;: &quot;方便面的危害&quot;, &quot;extra&quot;: &quot;10&quot; &#125;, &#123; &quot;query&quot;: &quot;方便面&quot;, &quot;keyword&quot;: &quot;方便面批发市场&quot;, &quot;extra&quot;: &quot;10&quot; &#125;, &#123; &quot;query&quot;: &quot;方便面&quot;, &quot;keyword&quot;: &quot;方便面生产线&quot;, &quot;extra&quot;: &quot;10&quot; &#125;, &#123; &quot;query&quot;: &quot;方便面&quot;, &quot;keyword&quot;: &quot;方便面怎么煮好吃&quot;, &quot;extra&quot;: &quot;10&quot; &#125; ]&#125; key 类型 是否必要 描述 keyword String 否 返回匹配的关键字，显示到界面上 extra int 否 作为扩展字段，比如返回当前关键字的商品个数 搜索暂时只需要搜索商品 地址：https://api.xxx.com/path/v1/search/products 如果未来有需要，可以扩展，比如： 搜索用户：https://api.xxx.com/path/v1/search/user搜索店铺：https://api.xxx.com/path/v1/search/shop 请求头1234567GET /path/v1/search/productsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数 ?keyword=方便面&amp;sort=des params 类型 是否必要 描述 keyword String 否 查询的关键字 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应12345678910111213141516171819202122232425262728&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;category&quot;: 14124124124, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;category&quot;: 14124124124, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot; &#125; ]&#125; key 类型 是否必要 描述 image String 是 该商品缩略图url detail String 是 跳转到该商品详情页的web url title String 是 该商品的标题 description String 是 对商品的简单描述 uid String 是 该商品唯一识别id category String 是 表示当前商品的类型：智能家居smarthome、便利店/超市/商场shop price String 是 价格 currency String 是 标识币种，可以是符号，也可以是文字，看前后端的需求，也可以再立一个字段表示 配送递送是指快递信息的一个综合概念，包括地址和联系方式等。 新增一条或者多条配送 地址：https://api.xxx.com/path/deliveries 请求头1234567POST /path/v1/deliveriesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数如果是新增一条，data中则不需要传数组，只需要传一个对象就行了。12345678910111213141516171819202122[ &#123; &quot;name&quot;: &quot;BeJson&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot;, &quot;default&quot;: true &#125;, &#123; &quot;name&quot;: &quot;BeJson&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot;, &quot;default&quot;: true &#125;] params 类型 是否必要 描述 name String 是 新增的这个收货人的姓名 gender String 是 性别：只能取male或者female或者secrecy，默认是不用选择性别的，也允许保存成功，没选性别就是secrecy phone String 是 电话号码 location String 是 定位地址，只是粗略地址 address String 是 详细地址 longitude String 是 经度，用于后台搜索店铺使用 latitude String 是 纬度，用于后台搜索店铺使用 default Boolean 是 true表示默认地址，false表示不是默认地址 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415&#123; &quot;message&quot;: &quot;居然被你保存成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;, &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;, &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125; ]&#125; 删除一条或者多条配送 删除一条：https://api.xxx.com/path/v1/deliveries/{递送uid} 删除多条：https://api.xxx.com/path/v1/deliveries 请求头1234567DELETE /path/v1/deliveriesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数删除一条则不需要参数，因为url中已经包含了地址uid，删除多条则需要以下参数。1234567891011[ &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;, &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;, &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;] params 类型 是否必要 描述 uid String 是 表示某条递送信息的主键 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;, &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125;, &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125; ]&#125; params 类型 是否必要 描述 uid String 否 表示已删除递送信息的主键 修改一条或者多条配送 修改一条：https://api.xxx.com/path/v1/deliveries/{递送uid} 修改多条：https://api.xxx.com/path/v1/deliveries 请求头1234567PUT /path/v1/deliveriesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数如果是修改某一条可以不传uid，因为url中已经包含uid，如果是修改多条则传一个json数组，数组中的每一个对象都得包含uid。123456789101112131415161718192021222324[ &#123; &quot;uid&quot;: &quot;655656133131313&quot;, &quot;name&quot;: &quot;BeJson&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot;, &quot;default&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;655656133131313&quot;, &quot;name&quot;: &quot;BeJson&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot;, &quot;default&quot;: true &#125;] params 类型 描述 name String 是 新增的这个收货人的姓名 gender String 是 性别：只能取male或者female或者secrecy，默认是不用选择性别的，也允许保存成功，没选性别就是secrecy phone String 是 电话号码 location String 是 定位地址，只是粗略地址 uid String 是 地址主键 address String 是 详细地址 longitude String 是 经度，用于后台搜索店铺使用 latitude String 是 纬度，用于后台搜索店铺使用 default Boolean 是 true表示默认地址，false表示不是默认地址 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789&#123; &quot;message&quot;: &quot;居然被你修改成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125; ]&#125; params 类型 是否必要 描述 uid String 否 表示已修改递送信息的主键 查询一条或者多条配送 查询一条：https://api.xxx.com/path/v1/deliveries/{递送uid} 查询多条：https://api.xxx.com/path/v1/deliveries 请求头1234567GET /path/v1/deliveriesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数12?keyword=方便面&amp;sort=des如果是查询某一条递送时，由于uid已经在url上，所以返回一条指定递送数据。 params 类型 描述 sort String 否 同上 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415161718192021222324252627282930&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;655656133131313&quot;, &quot;name&quot;: &quot;BeJson&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot;, &quot;default&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;655656133131313&quot;, &quot;name&quot;: &quot;BeJson&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot;, &quot;default&quot;: true &#125; ]&#125; params 类型 描述 name String 是 收货人的姓名 gender String 是 性别：只能取male或者female或者secrecy，默认是不用选择性别的，也允许保存成功，没选性别就是secrecy phoneNumber String 是 电话号码 location String 是 定位地址，只是粗略地址 uid String 是 地址主键 address String 是 详细地址 longitude String 是 经度，用于后台搜索店铺使用 latitude String 是 纬度，用于后台搜索店铺使用 default Boolean 是 true表示默认地址，false表示不是默认地址 订单部分订单部分接口有“增删改查”中的增、删、查。 新增一条或者多条订单 地址：https://api.xxx.com/path/v1/orders 请求头1234567POST /path/v1/ordersAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数12345678910111213141516171819202122232425262728293031323334[ &#123; &quot;uid&quot;: &quot;6666565656&quot;, &quot;note&quot;: &quot;带一个勺子&quot;, &quot;products&quot;: [ &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;sku&quot;: &quot;525235&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;sku&quot;: &quot;525235&quot; &#125; ] &#125;, &#123; &quot;uid&quot;: &quot;6666565656&quot;, &quot;note&quot;: &quot;带一个勺子&quot;, &quot;products&quot;: [ &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;sku&quot;: &quot;525235&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;sku&quot;: &quot;525235&quot; &#125; ] &#125;] params 类型 是否必要 描述 uid String 是 递送信息的主键，由这个ID可以查询递送信息，包括人的信息和地址信息 note String 是 留言 products.uid String 是 商品uid products.amount String 是 商品个数 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应此处返回支付的统一订单信息。这里有待商榷，看你们是想在这一步就生成统一订单去支付，还是先上传成功后，返回订单id，然后再用这个订单id去请求支付接口。 1234567&#123; &quot;message&quot;: &quot;居然被你保存成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; 返回支付信息还是订单信息有待商榷 &#125;&#125; 以下为我暂时考虑的123456789101112&#123; &quot;message&quot;: &quot;居然被你保存成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;33331313&quot; &#125;, &#123; &quot;uid&quot;: &quot;33331313&quot; &#125; ]&#125; params 类型 描述 uid String 否 返回刚保存的订单主键，根据这个主键可以查询该订单的详细信息 删除一条或者多条订单 删除一条订单：https://api.xxx.com/path/v1/orders/{订单uid} 删除多条订单：https://api.xxx.com/path/v1/orders 请求头1234567DELETE /path/v1/ordersAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数如果是删除某一个，则不需要参数，只需要接口改成https://api.xxx.com/path/v1/orders/{订单uid}即可。12345678[ &#123; &quot;uid&quot;: &quot;13212133313&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot; &#125;] params 类型 描述 uid String 否 订单主键 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;33331313&quot; &#125;, &#123; &quot;uid&quot;: &quot;33331313&quot; &#125; ]&#125; params 类型 是否必要 描述 uid String 否 已经删除的订单主键 修改一条或者多条订单订单是不能修改内容，只能修改状态，即由一种状态修改成另一种状态，比如从“待付款”状态修改成“已取消”状态，因此只传这个action字段即可 修改一条订单：https://api.xxx.com/path/v1/orders/{订单uid} 修改多条订单：https://api.xxx.com/path/v1/orders 请求头1234567PUT /path/v1/ordersAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数如果是修改某一个，只需要接口改成https://api.xxx.com/path/v1/orders/{订单uid}即可，其中uid参数就不需要再传了。 12345678910[ &#123; &quot;action&quot;: &quot;cancel&quot;, &quot;uid&quot;: &quot;13212133313&quot; &#125;, &#123; &quot;action&quot;: &quot;cancel&quot;, &quot;uid&quot;: &quot;13212133313&quot; &#125;] params 类型 是否必须 描述 uid String 是 订单主键 action String 是 要修改的状态针对订单的操作总共5种，其action值如下：1.去付款–pay；2.取消订单（cancel）；3.确认收货（receipt）；4.查看物流（logistics）；5.删除订单（delete） 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567891011121314&#123; &quot;message&quot;: &quot;居然被你修改成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;action&quot;: &quot;cancel&quot;, &quot;uid&quot;: &quot;13212133313&quot; &#125;, &#123; &quot;action&quot;: &quot;cancel&quot;, &quot;uid&quot;: &quot;13212133313&quot; &#125; ]&#125; params 类型 是否必须 描述 uid String 是 已经修改的订单主键 action String 否 修改成功后的状态值针对订单的操作总共5种，其action值如下：1.去付款–pay；2.取消订单（cancel）；3.确认收货（receipt）；4.查看物流（logistics）；5.删除订单（delete） 查询多条订单（订单列表）订单是按店铺来分的，这里需要注意，因为一条订单就意味着一条快递单子。 查询多条：https://api.xxx.com/path/v1/orders 请求头1234567GET /path/v1/ordersAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?action=23552355 params 类型 描述 action String 否 默认不传表示获取全部订单，待付款、已取消、待收货、已完成、退款/售后等类型的uid，通过分类接口获取 sort String 否 同上 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;43433331313&quot;, &quot;delivery&quot;: &quot;快递服务&quot;, &quot;amount&quot;: &quot;4&quot;, &quot;action&quot;: &quot;待付款&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;10&quot;, &quot;discount&quot;: &quot;10%&quot;, &quot;price&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;¥&quot; &#125;, &quot;actions&quot;: [ &#123; &quot;name&quot;: &quot;取消订单&quot;, &quot;action&quot;: &quot;cancel&quot; &#125;, &#123; &quot;name&quot;: &quot;去付款&quot;, &quot;action&quot;: &quot;pay&quot; &#125;, &#123; &quot;name&quot;: &quot;删除订单&quot;, &quot;action&quot;: &quot;delete&quot; &#125; ], &quot;shop&quot;: &#123; &quot;name&quot;: &quot;克拉家园店&quot;, &quot;uid&quot;: &quot;54545454545&quot; &#125;, &quot;products&quot;: [ &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;优乐美奶茶&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;优乐美奶茶&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot; &#125; ] &#125; ]&#125; params 类型 描述 message String 是 同上 code String 是 同上 page integer 是 同上 pageSize integer 是 同上 data JSON对象 是 同上 data.uid String 是 该订单主键 data.delivery String 是 配送描述 data.amount String 是 该订单中包含的商品个数 data.action String 是 该订单状态描述 data.pay JSON对象 是 该订单的支付信息 data.pay.cost String 是 该订单最终需要付款数 data.pay.discount String 是 该订单中的折扣 data.pay.price String 是 该订单总价格 data.pay.currency String 是 暂时都是写死的¥ data.products JSON数组 是 该订单中的商品信息 data.products.image String 是 该商品缩略图url data.products.detail String 是 跳转到该商品详情页的web url data.products.description String 是 对商品的简单描述 data.products.title String 是 商品的标题 data.products.uid String 是 该商品唯一标识 data.shop.uid String 是 该店铺唯一标识 data.shop.name String 是 该店铺名称 data.actions action数组 是 用户描述对该订单的操作，对应界面上的每条订单上的“删除订单、去付款、取消订单”等按钮 data.actions.action 对象 是 针对订单的操作总共5种，其action值如下：1.去付款–pay；2.取消订单（cancel）；3.确认收货（receipt）；4.查看物流（logistics）；5.删除订单（delete） data.actions.name String 是 订单状态名称 查询一条订单（订单详情） 查询一条：https://api.xxx.com/path/v1/orders/{订单uid} 请求头1234567GET /path/v1/orders/34634634Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;43433331313&quot;, &quot;amount&quot;: &quot;4&quot;, &quot;action&quot;: &quot;待付款&quot;, &quot;orderNumber&quot;: &quot;64614646464&quot;, &quot;time&quot;: &quot;2018-03-12 15:33:24&quot;, &quot;note&quot;: &quot;带一包烟上来&quot;, &quot;delivery&quot;: &#123; &quot;uid&quot;: &quot;655656133131313&quot;, &quot;name&quot;: &quot;黄沙&quot;, &quot;gender&quot;: &quot;male&quot;, &quot;phone&quot;: &quot;13888888888&quot;, &quot;location&quot;: &quot;凯宾斯基&quot;, &quot;address&quot;: &quot;C栋801&quot;, &quot;longitude&quot;: &quot;85.66&quot;, &quot;latitude&quot;: &quot;36.33&quot; &#125;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;10&quot;, &quot;discount&quot;: &quot;10&quot;, &quot;price&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;¥&quot; &#125;, &quot;actions&quot;: [ &#123; &quot;name&quot;: &quot;取消订单&quot;, &quot;action&quot;: &quot;cancel&quot; &#125;, &#123; &quot;name&quot;: &quot;去付款&quot;, &quot;action&quot;: &quot;pay&quot; &#125;, &#123; &quot;name&quot;: &quot;删除订单&quot;, &quot;action&quot;: &quot;delete&quot; &#125; ], &quot;shop&quot;: &#123; &quot;name&quot;: &quot;克拉家园店&quot;, &quot;uid&quot;: &quot;54545454545&quot; &#125;, &quot;products&quot;: [ &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;优乐美奶茶&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;2&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot;, &quot;currency&quot;: &quot;¥&quot; &#125; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;优乐美奶茶&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;2&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot;, &quot;currency&quot;: &quot;¥&quot; &#125; &#125; ], &quot;express&quot;: &#123; &quot;name&quot;: &quot;小明同志&quot;, &quot;phone&quot;: &quot;13811112222&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;identity&quot;: &quot;派送员&quot; &#125; &#125;&#125; key 类型 是否必要 描述 code String 是 同上 message String 是 同上 data JSON对象 是 同上 data.uid String 是 该订单主键 data.amount String 是 该订单中包含的商品个数 data.action String 是 该订订单状态 data.orderNumber String 是 该订单的订单号 data.time String 是 该订单下单时间 data.note String 是 下单时的备注 data.delivery JSON对象 是 描述配送信息的对象 data.delivery.uid String 是 配送信息主键 data.delivery.name String 是 收货人的姓名 data.delivery.gender String 是 性别：只能取male或者female或者secrecy，默认是不用选择性别的，也允许保存成功，没选性别就是secrecy data.delivery.phone String 是 电话号码 data.delivery.location String 是 定位地址，只是粗略地址 data.delivery.address String 是 详细地址 data.delivery.longitude String 是 经度，用于后台搜索店铺使用 data.delivery.latitude String 是 纬度，用于后台搜索店铺使用 data.pay JSON对象 是 描述支付信息的对象 data.pay.cost String 是 该订单最终需要付款数 data.pay.discount String 是 该订单中的折扣 data.pay.price String 是 该订单总价格 data.pay.currency String 是 暂时都是写死的¥ data.actions action数组 是 用户描述对该订单的操作，对应界面上的每条订单上的“删除订单、去付款、取消订单”等按钮 data.actions.action 对象 是 针对订单的操作总共5种，其action值如下：1.去付款–pay；2.取消订单（cancel）；3.确认收货（receipt）；4.查看物流（logistics）；5.删除订单（delete） data.actions.name String 是 订单状态名称 data.shop JSON对象 是 描述所属店铺信息 data.shop.uid String 是 该店铺唯一标识 data.shop.name String 是 该店铺名称 data.products JSON数组 是 该订单中的商品信息 data.products.image String 是 该商品缩略图url data.products.detail String 是 跳转到该商品详情页的web url data.products.description String 是 对商品的简单描述 data.products.title String 是 商品的标题 data.products.uid String 是 该商品唯一标识 data.products.pay JSON对象 是 描述该商品支付信息的对象 data.products.pay.cost String 是 该商品最终需要付款数 data.products.pay.discount String 是 该商品中的折扣 data.products.pay.price String 是 该商品总价格 data.products.pay.currency String 是 暂时都是写死的¥ data.express JSON对象 是 描述快递信息 data.express.name String 是 快递员名称 data.express.phone String 是 快递员电话 data.express.image String 是 快递员图标或者头像 data.express.identity String 是 暂时都返回：快递员 分类部分由于这个分类接口是一个抽象的获取字符串的接口，因此我把商品的分类和订单的状态分类都归于这个接口。分类部分接口只需要“增删改查”中的“查”，所以只有GET，其他的我就不设计了。 查询分类 地址：https://api.xxx.com/path/v1/categories/{分类uid} 请求头1234567GET /path/v1/categoriesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?uid=1313113&amp;keyword=方便面&amp;sort=des params 类型 是否必要 描述 uid String 否 某分类主键，不传则表示一级分类 keyword String 否 查询的关键字 sort String 否 同上 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;parent&quot;: &quot;25235235235235&quot;, &quot;name&quot;: &quot;智能主机&quot;, &quot;uid&quot;: &quot;516165654656&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;children&quot;: [ &#123; &quot;name&quot;: &quot;智能门锁&quot;, &quot;uid&quot;: &quot;516165654656&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;name&quot;: &quot;智能门锁&quot;, &quot;uid&quot;: &quot;516165654656&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125; ] &#125;, &#123; &quot;parent&quot;: &quot;25235235235235&quot;, &quot;name&quot;: &quot;智能主机&quot;, &quot;uid&quot;: &quot;516165654656&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;children&quot;: [ &#123; &quot;name&quot;: &quot;智能门锁&quot;, &quot;uid&quot;: &quot;516165654656&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;name&quot;: &quot;智能门锁&quot;, &quot;uid&quot;: &quot;516165654656&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125; ] &#125; ]&#125; key 类型 是否必要 描述 code Integer 是 同上 message String 是 同上 page Integer 是 同上 pageSize Integer 是 同上 data JSON对象 是 同上 data.parent String 是 如果没有父分类则可以为空 data.name String 是 分类名称 data.uid String 是 分类主键，外层json中的uid表示其父分类的uid，如果是一级分类，则其父分类uid可以为空字符串 data.image String 是 该分类的图片地址，应对某些分类需要显示图片的需求 data.children JSON数组 是 如果没有子分类则返回为空 商品（产品）部分商品列表 例如：https://api.xxx.com/path/v1/products 请求头1234567GET /path/v1/productsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数不传参数则默认返回的是根据系统推荐的产品，对应的业务是“为您推荐”。1?category=1313113&amp;shopUid=23535325 params 类型 是否必要 描述 category String 否 某分类主键 shopUid String 否 店铺主键 sort String 否 同上 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567891011121314151617181920212223242526&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;link&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;link&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot; &#125; ]&#125; key 类型 描述 code Integer 是 同上 message String 是 同上 page Integer 是 同上 pageSize Integer 是 同上 data JSON数组 是 同上 data.image String 是 该商品缩略图url data.link String 是 跳转到该商品详情页的web url data.description String 是 对商品的简单描述 data.uid String 是 该商品唯一识别id data.price String 是 价格 data.currency String 是 标识币种，可以是符号，也可以是文字，看前后端的需求，也可以再立一个字段表示 商品详情 例如：https://api.xxx.com/path/v1/products/65464131 请求头1234567GET /path/v1/productsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;title&quot;: &quot;巧克力豆&quot;, &quot;uid&quot;: &quot;45645646545454&quot;, &quot;description&quot;: &quot;500g/包&quot;, &quot;share&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;stockQuantity&quot;: 600, &quot;images&quot;: [ &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;text&quot;: &quot;500g/包&quot; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;text&quot;: &quot;500g/包&quot; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;text&quot;: &quot;500g/包&quot; &#125; ], &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot;, &quot;currency&quot;: &quot;¥&quot; &#125;, &quot;shop&quot;: &#123; &quot;name&quot;: &quot;克拉家园店&quot;, &quot;uid&quot;: &quot;54545454545&quot; &#125;, &quot;detail&quot;: &#123; &quot;url&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;images&quot;: [ &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; ] &#125; &#125;&#125; key 类型 是否必要 描述 code Integer 是 同上 message String 是 同上 page Integer 是 同上 pageSize Integer 是 同上 data JSON对象 是 同上 data.images String数组 是 该商品顶部缩略图url，有可能是轮播图，所以是个数组 data.share String 是 跳转到该商品详情页的web url data.title String 是 该商品的名称 data.description String 是 对商品的简单描述 data.uid String 是 最外层为该商品主键，shop内的uid为店铺uid，categories中uid为分类主键 data.pay 对象 是 描述在该商品的价格展示，cost是最终价格，price是打折前的价格，discount是折扣，currency是币种 data.pay.cost String 是 最终价格 data.pay.price String 是 打折前的价格 data.pay.discount String 是 折扣 data.pay.currency String 是 标识币种，可以是符号，也可以是文字，看前后端的需求，也可以再立一个字段表示 data.shop 对象 是 该商品所属的商店信息，不过多解释 data.detail 对象 是 其中的images是详情图片列表 stockQuantity String 是 该商品的总库存 店铺部分查询店铺列表 地址：https://api.xxx.com/path/v1/shops 请求头1234567GET /path/v1/shopsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?keyword=哎呀呀 params 类型 描述 sort String 否 同上 keyword String 否 同上 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415161718192021222324&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;56565665656&quot;, &quot;name&quot;: &quot;灵感印象布艺生活&quot;, &quot;time&quot;: &quot;09:00-24:00&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;place&quot;: &quot;上海&quot;, &quot;business&quot;: &quot;桌布 窗帘 地垫 抱枕 门帘&quot; &#125;, &#123; &quot;uid&quot;: &quot;56565665656&quot;, &quot;name&quot;: &quot;灵感印象布艺生活&quot;, &quot;time&quot;: &quot;09:00-24:00&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;place&quot;: &quot;上海&quot;, &quot;business&quot;: &quot;桌布 窗帘 地垫 抱枕 门帘&quot; &#125; ]&#125; key 类型 描述 code Integer 是 同上 message String 是 同上 page Integer 是 同上 pageSize Integer 是 同上 data JSON对象 是 同上 data.uid String 是 该店铺的主键 data.name String 是 店铺的名称 data.place String 是 店铺所在地 datatime String 是 注册时间 data.logo String 是 店铺logo data.business String 是 经营范围 购物车购物车接口原本是不需要的，可以通过缓存来实现，但是考虑到一个端上买了东西放到购物车，其他端也可以看得到，并继续完成购物流程，所以还是得有这部分接口，有“增删改查”四部分，注意：这里说的“增删改查”是指针对购物车里的商品的增删改查，不是针对购物车的增删改查。针对一般电商而已，从App的角度来看，每个用户只有一个购物车，所以不需要知道购物车的uid，根据token就可以查询该用户名下购物车存放的商品信息。 新增一个或者多个商品到购物车 地址：https://api.xxx.com/path/v1/cart/products 请求头1234567POST /path/v1/cart/productsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数123456789101112[ &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;sku&quot;: &quot;35325325235&quot;, &quot;amount&quot;: &quot;5&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;sku&quot;: &quot;456464654654&quot;, &quot;amount&quot;: &quot;5&quot; &#125;] params 类型 是否必要 描述 uid String 是 商品主键 sku String 是 最后选中的某个sku的uid amount String 是 商品个数 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112&#123; &quot;message&quot;: &quot;居然被你保存成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;13212133313&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot; &#125; ]&#125; key 类型 描述 uid String 否 保存到购物车的商品主键 删除一个购物车中的商品 删除一个购物车中的商品：https://api.xxx.com/path/v1/cart/products/{productUID} 删除多个购物车中的商品：https://api.xxx.com/path/v1/cart/products 请求头1234567DELETE /path/v1/cart/products/13434123Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数清空该购物车商品则不需要参数，删除购物车中的多个商品则需要以下参数。如果是只删除一个，则不需要参数，因为uid已经在url上了。12345678910[ &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;sku&quot;: &quot;25235235235&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;sku&quot;: &quot;235235235235&quot; &#125;] params 类型 是否必要 描述 uid String 是 表示某条商品信息的主键 sku String 是 表示该商品的某个sku主键 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;13212133313&quot; &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot; &#125; ]&#125; params 类型 描述 uid String 否 表示已删除的商品主键 修改购物车中一个或者多个商品 修改购物车中一个商品：https://api.xxx.com/path/v1/cart/products/{productUID} 修改购物车中多个商品：https://api.xxx.com/path/v1/cart/products 请求头1234567PUT /path/v1/cart/products/25234524Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数如果是修改一个，则不需要穿数组，因为uid已经在url上，此时已经限定了只操作这个uid的商品。123456789101112131415161718[ &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;skus&quot;: [ &quot;35325325235&quot;, &quot;35325325235&quot; ] &#125;, &#123; &quot;uid&quot;: &quot;13212133313&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;skus&quot;: [ &quot;35325325235&quot;, &quot;35325325235&quot; ] &#125;] params 类型 是否必要 描述 uid String 是 商品主键 skus String数组 是 第0个表示旧的sku的uid，第1个表示新的sku的uid amount String 是 商品个数 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789&#123; &quot;message&quot;: &quot;居然被你修改成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;1333644113313131&quot; &#125; ]&#125; key 类型 描述 uid String 否 表示已修改商品的主键 查询购物车商品列表 地址：https://api.xxx.com/path/v1/cart/products 请求头1234567GET /path/v1/cart/productsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: [ &#123; &quot;products&quot;: [ &#123; &quot;amount&quot;: 2, &quot;description&quot;: &quot;500g/包&quot;, &quot;image&quot;: &quot;https://www.audi.cn/content/dam/nemo/cn/model/a7/rs7_sportback/2015/1680x1050/3q/rs7_sportback_performance_gallery_10.jpg.resize.maxWidth=1180.jpg&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot; &#125;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;巧克力豆&quot;, &quot;uid&quot;: &quot;45645646545454&quot;, &quot;sku&quot;: &#123; &quot;uid&quot;: &quot;343463463463f&quot;, &quot;name&quot;: &quot;男+红色+X码&quot; &#125; &#125;, &#123; &quot;amount&quot;: 5, &quot;description&quot;: &quot;500g/包&quot;, &quot;image&quot;: &quot;https://www.audi.cn/content/dam/nemo/cn/model/a7/rs7_sportback/2015/1680x1050/3q/rs7_sportback_performance_gallery_10.jpg.resize.maxWidth=1180.jpg&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot; &#125;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;大力糖&quot;, &quot;uid&quot;: &quot;45645646545454&quot;, &quot;sku&quot;: &#123; &quot;uid&quot;: &quot;343463463463f&quot;, &quot;name&quot;: &quot;男+红色+X码&quot; &#125; &#125; ], &quot;shop&quot;: &#123; &quot;name&quot;: &quot;克拉家园店&quot;, &quot;uid&quot;: &quot;54545454545&quot; &#125; &#125;, &#123; &quot;products&quot;: [ &#123; &quot;amount&quot;: 2, &quot;description&quot;: &quot;500g/包&quot;, &quot;image&quot;: &quot;https://www.audi.cn/content/dam/nemo/cn/model/a7/rs7_sportback/2015/1680x1050/3q/rs7_sportback_performance_gallery_10.jpg.resize.maxWidth=1180.jpg&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot; &#125;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;巧克力豆&quot;, &quot;uid&quot;: &quot;45645646545454&quot;, &quot;sku&quot;: &#123; &quot;uid&quot;: &quot;343463463463f&quot;, &quot;name&quot;: &quot;男+红色+X码&quot; &#125; &#125;, &#123; &quot;amount&quot;: 5, &quot;description&quot;: &quot;500g/包&quot;, &quot;icon&quot;: &quot;https://www.audi.cn/content/dam/nemo/cn/model/a7/rs7_sportback/2015/1680x1050/3q/rs7_sportback_performance_gallery_10.jpg.resize.maxWidth=1180.jpg&quot;, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot; &#125;, &quot;detail&quot;: &quot;https://item.jd.com/4264502.html&quot;, &quot;title&quot;: &quot;大力糖&quot;, &quot;uid&quot;: &quot;45645646545454&quot;, &quot;sku&quot;: &#123; &quot;uid&quot;: &quot;343463463463f&quot;, &quot;name&quot;: &quot;男+红色+X码&quot; &#125; &#125; ], &quot;shop&quot;: &#123; &quot;name&quot;: &quot;威斯丹利店&quot;, &quot;uid&quot;: &quot;123412312&quot; &#125; &#125; ]&#125; key 类型 是否必要 描述 code Integer 是 同上 message String 是 同上 page Integer 是 同上 pageSize Integer 是 同上 data JSON对象 是 同上 data.products JSON数组 是 购物车中的产品列表 data.products.amount String 是 该商品的该suk购买个数 data.products.image String 是 商品图片链接 data.products.detail String 是 跳转到该商品详情页的web url data.products.title String 是 该商品的名称 data.products.description String 是 对商品的简单描述 data.products.uid String 是 最外层为该商品主键 data.products.sku JSON对象 是 描述在该商品的sku data.products.sku.uid String 是 该商品的某个sku主键 data.products.sku.name String 是 该商品的某个sku名称 data.products.pay JSON对象 是 描述在该商品的价格 data.products.pay.cost String 是 最终价格 data.products.pay.price String 是 打折前的价格 data.products.pay.discount String 是 折扣 data.products.pay.currency String 是 标识币种，可以是符号，也可以是文字，看前后端的需求，也可以再立一个字段表示 data.products.shop JSON对象 是 该商品所属的商店信息，不过多解释 SKU库存sku为最小库存单元，这部分概念需要大家自行补习一下。反正要想唯一确定一个库存里的商品，就需要一系列属性来确定，这里的属性包括分类属性+产品属性+其他属性。在详情页中点击放入购物车或购买时，请求该接口来获取商品的详细规格来选择商品。 建议sku的uid的建立是基于一种规则的字符串，后期大家一起讨论。 查询一条或者多条SKU 地址：https://api.xxx.com/path/v1/stocks 请求头1234567GET /path/v1/stocks/566646464Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?product=2353532532&amp;sku=12441412 params 类型 是否必要 描述 product String 是 产品的uid，查询该产品的sku和库存 sku String 否 sku的uid，后台会将该sku所带包的属性值标记为选中，即selected=true，不传则表示所有属性selected=false 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: &#123; &quot;quantity&quot;: 600, &quot;pay&quot;: &#123; &quot;cost&quot;: &quot;4.125-5.55&quot;, &quot;discount&quot;: &quot;7.5&quot;, &quot;price&quot;: &quot;5.5&quot;, &quot;currency&quot;: &quot;¥&quot; &#125;, &quot;properties&quot;: [ &#123; &quot;property&quot;: &quot;性别&quot;, &quot;values&quot;: [ &#123; &quot;quantity&quot;: 600, &quot;value&quot;: &quot;男&quot;, &quot;selected&quot;: true, &quot;skus&quot;: [ &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot; ] &#125;, &#123; &quot;quantity&quot;: 600, &quot;value&quot;: &quot;女&quot;, &quot;selected&quot;: false, &quot;skus&quot;: [ &quot;10&quot;, &quot;11&quot;, &quot;13&quot;, &quot;15&quot;, &quot;17&quot;, &quot;18&quot; ] &#125; ] &#125;, &#123; &quot;property&quot;: &quot;颜色&quot;, &quot;values&quot;: [ &#123; &quot;quantity&quot;: 400, &quot;value&quot;: &quot;红色&quot;, &quot;selected&quot;: true, &quot;skus&quot;: [ &quot;2&quot;, &quot;3&quot;, &quot;10&quot;, &quot;11&quot; ] &#125;, &#123; &quot;quantity&quot;: 400, &quot;value&quot;: &quot;黄色&quot;, &quot;selected&quot;: false, &quot;skus&quot;: [ &quot;4&quot;, &quot;6&quot;, &quot;13&quot;, &quot;15&quot; ] &#125;, &#123; &quot;quantity&quot;: 400, &quot;value&quot;: &quot;蓝色&quot;, &quot;selected&quot;: false, &quot;skus&quot;: [ &quot;7&quot;, &quot;8&quot;, &quot;17&quot;, &quot;18&quot; ] &#125; ] &#125;, &#123; &quot;property&quot;: &quot;尺码&quot;, &quot;values&quot;: [ &#123; &quot;quantity&quot;: 400, &quot;value&quot;: &quot;X码&quot;, &quot;selected&quot;: true, &quot;skus&quot;: [ &quot;4&quot;, &quot;7&quot;, &quot;10&quot;, &quot;13&quot; ] &#125;, &#123; &quot;quantity&quot;: 400, &quot;value&quot;: &quot;L码&quot;, &quot;selected&quot;: false, &quot;skus&quot;: [ &quot;3&quot;, &quot;6&quot;, &quot;15&quot;, &quot;18&quot; ] &#125;, &#123; &quot;quantity&quot;: 400, &quot;value&quot;: &quot;M码&quot;, &quot;selected&quot;: false, &quot;skus&quot;: [ &quot;2&quot;, &quot;8&quot;, &quot;11&quot;, &quot;17&quot; ] &#125; ] &#125; ], &quot;skus&quot;: [ &#123; &quot;sku&quot;: &quot;男+红色+M码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;2&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;男+红色+L码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;3&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;男+黄色+X码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;4&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;男+黄色+L码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;6&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;男+蓝色+X码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;7&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;男+蓝色+M码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;8&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;女+红色+X码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;10&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;女+红色+M码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;11&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;女+黄色+X码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;13&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;女+黄色+L码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;15&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;女+蓝色+M码&quot;, &quot;stockQuantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;17&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125;, &#123; &quot;sku&quot;: &quot;女+蓝色+L码&quot;, &quot;quantity&quot;: 100, &quot;price&quot;: 50, &quot;currency&quot;: &quot;¥&quot;, &quot;note&quot;: &quot;备注：该商品XXX&quot;, &quot;uid&quot;: &quot;18&quot;, &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot; &#125; ] &#125;&#125; key 类型 是否必要 描述 properties 数组 是 该产品的属性集合 property String 是 属性类型，对应着一系列值values values 数组 是 对应的属性值的集合 selected boolean 是 是否选中，这个只有商品出现在购物车中的时候，才有会用到这个值，并且实际是true还是false要看购物车中选的是什么 quantity 整型 是 库存数量 price String 是 价格，精确到小数点后两位，单元为元 currency String 是 标识币种，可以是符号，也可以是文字，看前后端的需求，也可以再立一个字段表示 quantity String 是 库存总数量 pay 对象 是 总价格，有可能是个区间 首页部分理论上来说是不需要这个接口的，根据已有的接口是可以拼凑出现在业务需求的数据的，但这样的话需要同时访问的接口数目过多，考虑到性能问题，则合并出一个home接口来。 查询 地址：https://api.xxx.com/path/v1/home 请求头1234567GET /path/v1/homeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: &#123; &quot;ads&quot;: [ &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;web&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;web&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;web&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125; ], &quot;recommendations&quot;: [ &#123; &quot;category&quot;: &#123; &quot;category&quot;: &quot;智能主机&quot;, &quot;uid&quot;: &quot;516165654656&quot; &#125;, &quot;products&quot;: [ &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125; ] &#125;, &#123; &quot;category&quot;: &#123; &quot;category&quot;: &quot;智能门锁&quot;, &quot;uid&quot;: &quot;516165654656&quot; &#125;, &quot;products&quot;: [ &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125; ] &#125;, &#123; &quot;category&quot;: &#123; &quot;category&quot;: &quot;智能配件&quot;, &quot;uid&quot;: &quot;516165654656&quot; &#125;, &quot;products&quot;: [ &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;description&quot;: &quot;wifi/电话双网 您的智能小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;type&quot;: &quot;product&quot;, &quot;price&quot;: &quot;589.0&quot;, &quot;currency&quot;: &quot;¥&quot;, &quot;link&quot;: &quot;https://www.baidu.com/&quot; &#125; ] &#125; ] &#125;&#125; key 类型 是否必要 描述 imageUrl String 是 该商品缩略图url link String 是 跳转到web的url description String 是 对商品的简单描述 uid String 是 该商品唯一识别id price String 是 价格 currency String 是 标识币种，可以是符号，也可以是文字，看前后端的需求，也可以再立一个字段表示 type String 是 product表示跳转到原生详情页，web表示跳转到web页面 长连接部分使用场景所有需要 双向通讯（确切的说是需要后台主动推送给前端的情景） 的部分都尽量使用长连接形式 消息提示：比如底部导航栏的tab勋章提示、未读消息的提示。 广告弹框：比如后台发送一个广告信息，界面会弹出一个广告弹框。 消息中心：私信、IM等 安全待定 统计、历史记录等埋点业务待定 建议待定 12还差退款支付统一接口]]></content>
  </entry>
  <entry>
    <title><![CDATA[电商技术考察暨技术选型]]></title>
    <url>%2F%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%2FDocs%2F%E7%94%B5%E5%95%86%E6%8A%80%E6%9C%AF%E8%80%83%E5%AF%9F%E6%9A%A8%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%2F%E7%94%B5%E5%95%86%E6%8A%80%E6%9C%AF%E8%80%83%E5%AF%9F%E6%9A%A8%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[电商技术考察暨技术选型 Author：Leguang E-Mail：langmanleguang@qq.com 背景考虑到团队大多数人都没做过电商，而电商的复杂度如果较真起来，并不亚于社交或者IM等其他业务应用。因此有必要做一个科普和技术铺垫，正所谓「知己知彼，百战不殆」。 知识储备为了应对这次开发挑战，我们先要了解一下电商的具体业务，包括细节与实现。 概念有以下概念需要大家去认真学习一下： 垂直电商 B2C B2B C2C B2B2C 订单 SPU SKU 商品 商户 多级分销及奖励（我们只考虑二级分销即可） 裂变 未完待续…… 业务对于电商的业务，需要大家了解以下内容 小程序端电商的使用 App端电商的使用 WEB端电商的使用 用户下单购买 用户支付 用户退货 用户评价 商户后台管理 商户后台处理订单 商户后台处理退货 资金管理 未完待续…… 针对性研究 Tophatter这个产品，其中拍卖的玩法和实现 Wishi这个产品 90s这个产品，包括App和小程序 技术储备我们尽量不要从0开始闭门造车，应该多利用已有的资源，比如开源代码和技术博客等，参考设计，汲取经验。 外部资源 物流接口 支付宝对接 微信支付对接 未完待续…… 参考资料后端 https://github.com/macrozheng/mall https://github.com/Exrick/xmall https://github.com/linlinjava/litemall https://coding.imooc.com/class/96.html https://coding.imooc.com/class/79.html https://coding.imooc.com/class/162.html https://coding.imooc.com/class/254.html https://coding.imooc.com/class/168.html https://www.imooc.com/learn/148 https://www.imooc.com/learn/100 https://www.imooc.com/learn/1079 https://github.com/atguigu01/Shopping https://github.com/u014427391/taoshop 以上部分收费教程我已经准备好了。 Web前端 https://github.com/macrozheng/mall-admin-web https://github.com/Exrick/xmall-front https://github.com/Exrick/x-boot https://youzan.github.io/vant/#/zh-CN/sku https://github.com/youzan/vant-weapp https://github.com/EastWorld/wechat-app-mall 其他： https://www.infoq.cn/article/e-commerce-web-tech-stack]]></content>
  </entry>
  <entry>
    <title><![CDATA[镰刀通知详情功能]]></title>
    <url>%2F%E9%95%B0%E5%88%80%E9%A1%B9%E7%9B%AE%2F%E9%95%B0%E5%88%80%E9%80%9A%E7%9F%A5%E6%96%B9%E6%A1%88%2F%E9%95%B0%E5%88%80%E9%80%9A%E7%9F%A5%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[镰刀通知详情功能 Author：Leguang E-Mail：langmanleguang@qq.com 由于镰刀是一个垂直于币圈的咨询功能App，因此在众多推送消息的通知中，用户想要点击查看其中一条通知，则应该是进入App，展示这条消息，因此需要添加一个针对响应通知的事件和该事件对应的跳转页面。 需求点击通知后跳转到指定页面，页面样式大致如下： 通知中会有后台发送给手段端的一个包含该条消息的唯一ID，利用该ID就可以查到该条消息的详情信息。 文档：http://doc.un75.com:5934/镰刀项目/镰刀项目方案及其接口.html 对应的接口是： 12item详情地址：https://api.xxx.com/path/sickle/v1/items/&#123;uid&#125; 要求 App未启动时，点击通知，启动App，启动该详情页； App已启动时，点击通知，直接启动该详情页； App已启动时，该详情页也已启动时，点击通知再启动一个详情页或者直接在该详情页上请求新数据覆盖都可以； 无需做缓存处理； 设计要求有一个缓冲过程，因为访问网络加载过程可能会“漫长”；]]></content>
  </entry>
  <entry>
    <title><![CDATA[API文档]]></title>
    <url>%2F%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%2FAPI%E6%96%87%E6%A1%A3%2FAPI%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[API文档 Author：Leguang E-Mail：langmanleguang@qq.com 为避免开发调试过程中不必要的麻烦，请认真阅读以下「公共部分」。 公共部分我们规定每一个API接口都有一些共同约定的部分。 公共请求头通过Content-Type指定请求与返回的数据格式有 JSON ，其中请求数据还要指定Accept。 12Accept: application/jsonContent-Type: application/json;charset=UTF-8 公共响应头12Content-Type:application/json; charset=utf-8Status:200 OK 公共响应我们规定响应体里的内容 JSON 结构一致，如下所示： 1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; 该接口相关内容 &#125;&#125; key 类型 是否必须 描述 message String 是 返回给接口调用者的描述 code int 是 200表是成功，非200表示异常 API列表转账该接口可利用钱包私钥向指定地址发送指定数量的摩尔。 地址：https://api.dev.biotifo.com/payment-transfer/v1/transfer 请求头123POST /payment-transfer/v1/transferAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数1234567&#123; &quot;amount&quot;: &quot;交易金额&quot;, &quot;deductAddress&quot;: &quot;扣款地址&quot;, &quot;notifyUrl&quot;: &quot;异步通知url&quot;, &quot;privateKey&quot;: &quot;扣款地址私钥&quot;, &quot;receiveAddress&quot;: &quot;收款地址&quot;&#125; params 类型 是否必要 描述 amount String 是 转账数量，必须大于0，且小于钱包余额 deductAddress String 是 扣款地址，即私钥所对应的钱包的地址 notifyUrl String 是 回调url，当转账结果成功或者失败后会回调该url的接口 privateKey String 是 钱包私钥，即发送方的钱包对应的私钥，可由种子转换获得，点击获取转换工具 receiveAddress String 是 目标地址，即收币地址 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 异常 状态码 类型 是否必要 描述 821 int 否 金额无效，amount参数不能为负数，也不能大于钱包余额]]></content>
  </entry>
  <entry>
    <title><![CDATA[API支付]]></title>
    <url>%2F%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%2FAPI%E6%94%AF%E4%BB%98%2FAPI%E6%94%AF%E4%BB%98%2F</url>
    <content type="text"><![CDATA[API支付 Author：Leguang E-Mail：langmanleguang@qq.com 概述第三方应用可以通过接口方式进行转账，可以将任意钱包里的摩尔币转账给任意摩尔链上的地址。 阅读对象产品经理，开发人员，测试人员，区块链工程师，其他有关人员。 产品介绍适用于任何语言平台调用该接口完成转账业务，比如用户提现、红包、奖励等等。 转账API接口该接口可利用钱包私钥向指定地址发送指定数量的摩尔。 地址：https://api.dev.biotifo.com/payment-transfer/v1/transfer 请求头123POST /payment-transfer/v1/transferAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数1234567&#123; &quot;amount&quot;: &quot;交易金额&quot;, &quot;deductAddress&quot;: &quot;扣款地址&quot;, &quot;notifyUrl&quot;: &quot;异步通知url&quot;, &quot;privateKey&quot;: &quot;扣款地址私钥&quot;, &quot;receiveAddress&quot;: &quot;收款地址&quot;&#125; params 类型 是否必要 描述 amount String 是 转账数量，必须大于0，且小于钱包余额 deductAddress String 是 扣款地址，即私钥所对应的钱包的地址 notifyUrl String 是 回调url，当转账结果成功或者失败后会回调该url的接口 privateKey String 是 钱包私钥，即发送方的钱包对应的私钥，可由种子转换获得，点击获取转换工具 receiveAddress String 是 目标地址，即收币地址 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 异常 状态码 类型 是否必要 描述 821 int 否 金额无效，amount参数不能为负数，也不能大于钱包余额 回调接口该接口作为转账接口的参数，当支付系统确认交易成功后会通过POST方法调用该接口，第三方调用者就可以根据这个信号来同步相关操作。当接收到回调时，操作步骤如下： 比对金额； 处理自己的相关逻辑，并且返回success字符串。注意：程序执行完后必须打印输出“success”（不包含引号）。如果商户反馈的字符不是success这7个字符，服务器会不断重发通知，直到超过24小时22分钟。一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）；程序执行完成后，该页面不能执行页面跳转。如果执行页面跳转，会收不到success字符，会被服务器判定为该页面程序运行出现异常，而重发处理结果通知。 回调具体参数如下所示： key 类型 是否必要 描述 amount String 是 转账数量，必须大于0，且小于钱包余额 deductAddress String 是 扣款地址，即私钥所对应的钱包的地址 notifyUrl String 是 回调url，当转账结果成功或者失败后会回调该url的接口 privateKey String 是 钱包私钥，即发送方的钱包对应的私钥，可由种子转换获得，点击获取转换工具 receiveAddress String 是 目标地址，即收币地址]]></content>
  </entry>
  <entry>
    <title><![CDATA[打币系统]]></title>
    <url>%2F%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%2F%E6%89%93%E5%B8%81%E7%B3%BB%E7%BB%9F%2F%E6%89%93%E5%B8%81%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[打币系统 Author：Leguang E-Mail：langmanleguang@qq.com 由于blake2b和nacl等算法除了JS，其他平台暂时没有找到合适的实现，因此打币系统暂时不单一依靠java完成，而是Node和 Java 结合的异构系统。Node充当算法工具，Java完成业务。 工具Api利用之前的钱包 JS 代码，运行在Node服务里，把钱包里的部分功能通过接口形式暴露，其中包括如下功能： 种子/助记词–&gt;私钥（生成发送块时，签名需要私钥） 123var accountBytes = utilService.account.generateAccountSecretKeyBytes(this.wallet.seedBytes, index); var accountKeyPair = utilService.account.generateAccountKeyPair(accountBytes); var accountName = utilService.account.getPublicAccountID(accountKeyPair.publicKey); 生成发送块（其中发送方地址/接收方地址与公钥互转在JS内部完成） 12345678910111213141516171819202122232425262728293031323334353637383940414243// 生成发送块信息 async generateSend(walletAccount, toAccountID, rawAmount) &#123; var fromAccount = await apiService.accountInfo(walletAccount.id); if (!fromAccount) throw new Error(`Unable to get account information for $&#123;walletAccount.id&#125;`); var remaining = new BigNumber(fromAccount.balance).minus(rawAmount); var remainingDecimal = remaining.toString(10); var remainingPadded = remaining.toString(16); while (remainingPadded.length &lt; 32) remainingPadded = &apos;0&apos; + remainingPadded; // Left pad with 0&apos;s var blockData; var representative = &quot;mol_3ytentj15q44he4c778317r868wdttwufp96fsccjux4tuqc59ojgrwn6d4w&quot;; var context = blake.blake2bInit(32, null); var STATE_BLOCK_PREAMBLE = &apos;0000000000000000000000000000000000000000000000000000000000000006&apos;; blake.blake2bUpdate(context, utilService.hex.toUint8(STATE_BLOCK_PREAMBLE)); blake.blake2bUpdate(context, utilService.hex.toUint8(utilService.account.getAccountPublicKey( walletAccount.id))); blake.blake2bUpdate(context, utilService.hex.toUint8(fromAccount.frontier)); blake.blake2bUpdate(context, utilService.hex.toUint8(utilService.account.getAccountPublicKey( representative))); blake.blake2bUpdate(context, utilService.hex.toUint8(remainingPadded)); blake.blake2bUpdate(context, utilService.hex.toUint8(utilService.account.getAccountPublicKey( toAccountID))); var hashBytes = blake.blake2bFinal(context); var signed = nacl.sign.detached(hashBytes, walletAccount.keyPair.secretKey); var signature = utilService.hex.fromUint8(signed); blockData = &#123; type: &apos;state&apos;, account: walletAccount.id, previous: fromAccount.frontier, representative: representative, balance: remainingDecimal, link: utilService.account.getAccountPublicKey(toAccountID), // work: await workPoolService.getWork(fromAccount.frontier), signature: signature, &#125;; return blockData; &#125;, 其中 种子--&gt;私钥这个只需要给出一个在线的静态页面，用户填写种子后地到公钥和私钥，这样就解决了私钥的安全问题，同时也提供了工具给他们，一个静态页面的源码大家都看得到，所以就排除我们偷存私钥的嫌疑。 打币系统流程只需要对外提供一个接口即可，让第三方开发者将发送方地址、对应的私钥、接收方地址、币数量传过来，自己再调用生成发送块的Api，生成一个发送块，然后就可以丢到队列里按支付的那一套流程：请求前一个块的hash--&gt;申请工作量证明--&gt;添加到生成块中--&gt;process--&gt;申请投票--&gt;确认--&gt;回调 即可。只不过这里稍微要注意一下是打币速度过快可能会让节点拥堵，这个之前有遇到过，所以建议打币系统和支付系统分开，节点也各自不同，不要让第三方开发者联想到两者有什么联系，同时建议不要像支付系统一样，在申请工作量证明那里就process，而是延后一点，以耽误一下时间，避免过快的发送到链上，当然这里需要再讨论和论证一下。 安全问题由于这些接口都是在后台运行，因此不存在什么安全问题，只是一个单纯的、特殊的process接口，又由于发送方的地址是由调用方决定的，因此不存在金额对账等烦恼，我们顶多在请求前一个块的hash的时候顺便检测一下是否够发送这笔交易，如果不够给个合理的描述或者异常而已。 性能问题如果真的担心Node服务器的性能问题可以考虑用Nginx左一层负载均衡。 总结以上这些在理论上是行得通的，希望两至三周时间完成开放平台（前后端）和这个打币系统，至此，整个SDK部分完结。]]></content>
  </entry>
  <entry>
    <title><![CDATA[周报生成器]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2F%E5%91%A8%E6%8A%A5%E7%94%9F%E6%88%90%E5%99%A8%2F%E5%91%A8%E6%8A%A5%E7%94%9F%E6%88%90%E5%99%A8%2F</url>
    <content type="text"><![CDATA[周报生成器 Author：Leguang E-Mail：langmanleguang@qq.com 周报生成器每周发给投资人看的周报是件枯燥重复的事情，所以希望通过程序解决，生成一张模板样式的周报出来。 需求原型：https://free.modao.cc/app/sCTrVnn4suvDt6E9LKz3ye9opcGDpth 大致原型如下图所示： 要求如下： 扩展性高 不需要适配移动端 实时预览 下载 功能背景默认提供几个背景，同时也支持本地上传替换。 元素整体元素层级关系如下图所示： 头部标题区，即一张图的header部分，所有的内容都是默认就有的，也可以修改。其中第几周是程序根据当前时间推断的，时间这些字段都是程序根据当前时间来的。 腹部内容区，即一张图的content中间部分其实就是多个分类块，每一个分类块中又包含一个分类名称和多个分类项。 尾部最后是底部的footer区，是一个固定的二维码。 历史记录要求对历史编辑都缓存在本地，有一个列表选择，选择其中一个历史周报后，就覆盖当前的元素。 导出/下载通过下载，导出来的是一完整的周报图片。 上传一键上传到各大平台，如：微博、微信公众号、Twitter等。当然这部分功能有一定难度，能否实现需调研，前期可不用管。]]></content>
  </entry>
  <entry>
    <title><![CDATA[文件命名规范]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2F%E8%AE%BE%E8%AE%A1%2F%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[文件命名规范 Author：Leguang E-Mail：langmanleguang@qq.com 前言概要规范美小圆旧黄 法国木书房 https://www.ui.cn/detail/77602.html https://mp.weixin.qq.com/s?__biz=MzUxMzUzNzUzMw==&amp;mid=2247490678&amp;idx=2&amp;sn=6087c8d9faea9edb5516571c1ace8da5&amp;chksm=f952f8e4ce2571f25f610af7fcc40bc222138b03856cf35aca4f7e847e8b5f460acfd8b0989f&amp;mpshare=1&amp;scene=1&amp;srcid=#rd http://www.woshipm.com/pd/765432.html https://www.25xt.com/appdesign/8971.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[Web前端技术栈整理]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FWeb%2FWeb%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%E6%95%B4%E7%90%86%2FWeb%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Web前端技术栈整理 Author：Leguang E-Mail：langmanleguang@qq.com 前言为什么要搞这么个东西？本质还是为了提高效率。如何提高效率？减少重复劳作就能提高效率。如何减少重复劳作？代码复用就能减少重复劳作。如何复用？分两种情况：1.足够抽象，直接能用；2.复制粘贴少量修改。需要我们平时工作中大量的经验总结和代码整体，最后形成一种快速开发能力，自成一体，最后的结果是得出一套 [快速开发框架] ，这样你就可以在这个开发领域里有口饭吃的同时，还能腾出更多的时间去钻研。 概要如今的Web前端已经不是以前的jQuery时代的前端了。通过Node，前端已经可以成为全栈工程师了，现在在一些公司里，某些特殊业务，比如低频使用、简单业务、试错业务等可以由一个人前端人员去搞定了，既做后台，又做前端，因此对前端人员的运用，已经不能只局限于简单的写界面、对接口了。 现在SPA页面的性能很好，App上的某些特殊功能其实完全可以前端完成，再加上各个平台的小程序，也扩展了前端开发人员的范围。想要在前端这条路上走得公园，就需要积累一些技术沉淀，总体所需要整理的内容较多，分为可见部分的UI和不可见部分的功能整理，还有其他一些有助于提高效率的规约，如：代码风格、命名规范、模板代码、架构模式等。如下图所示： 规范小到命名规范，大到技术栈的规范，这一系列的规范或者说是“癖好”都是减少沟通、降低维护成本的好手段。相关参考如下： WEB前端规范 Web前端开发规范手册 代码风格统一风格的代码也是是为了提高效率和降低维护成本，统一到什么程度最好呢？不看代码作者，你很难区分代码是谁写的。相关参考如下： CodeGuide Vue/React统一使用一套技术栈，选择Vue/React，如果选择了某一套，就意味着要遵循这一套体系的所有技术规范了。 UI组件既然选择的是Vue或者React，那就选择相关大厂的一些UI组件实现。相关参考如下： Element Ant Design 不要求一定要使用它们的组件，只是做参考而已。 总结以上是我个人对于一个1-3年工作经验的程序员的一些要求，相信在通过这些技能养家糊口的同时又不断的吸收内化，最后进化到无招胜有招的境界。]]></content>
  </entry>
  <entry>
    <title><![CDATA[摩尔进化录]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2F%E8%BF%9B%E5%8C%96%E5%BD%95%2F%E6%91%A9%E5%B0%94%E8%BF%9B%E5%8C%96%E5%BD%95%2F</url>
    <content type="text"><![CDATA[摩尔进化录——自我进化，自我提升 Author：Leguang E-Mail：langmanleguang@qq.com 前言 以下内容均只基于未来3-5年的技术考量撰写 在畅想中规划，在规划中潜行，本着一个伟大的理想，希望通过不断提升团队能力实现「摩尔一百，别墅靠海」，所以做出一些畅想和规划。技术是日新月异的，我们不盲目追求新技术，不制造标准，只要跟随主流，优质地完成业务即可。技术只是利刃，不一定要打造出屠龙刀，因为并不一定有龙可屠。 摩尔技能摩尔作为一个公链，也作为区块链行业的一个解决方案，同时也承载着赋能开发者的能力，因此希望我们公司能提供一些基础技能： 应用层 作为一个平台，提供平台； 提供类似微信、微博和QQ那样的授权体系； 支付能力； 提现能力； 应用于各种场景的、高效的、安全易用的SDK或者Api； 完整的文档体系； 相应的管理应用，包括Web、Android或者iOS； 孵化第三方生态应用的能力； 对于去中心化和中心化有一个合理的、深刻的理解，并有相关解决方案； 运营、开发、运维多方结合的自动化能力； 对应用、业务和整个行业的监控能力； 自我进化能力（需要管理配合）； 未完待续…… 公链层 具备编程能力的智能合约； 代币发行能力； 健全的客户端； 配合应用层完成各种应用场景的SDK或者Api； 未完待续…… 技术部分公司当前的技术部门按职能分类如下图所示： 其中应用层部分人数占了大头，同时也是管理的大头，现阶段各个技术栈都没有一套系统的、自上而下的核心技术和常用“轮子”。我根据自己畅想摩尔的未来和与之匹配的相关技术需求，以及需要完成的任务来描摹摩尔的进化。 后端 Java后端是业务的核心，决定业务的有无，目前面临的问题是没有一套高可用架构和基础功能，致使重复开发问题严重，同时重复开发带来的另一部分问题是代码不易维护，临时业务促成临时解决方案。这都不是标准的开发方式，开发者心理负担也沉重，非可持续性发展状态。鉴于此，需有相关技术支撑，建议整体采用微服务形式搭建，所有功能或者服务独立运行，以Spring Cloud作为微服务技术实现，采用Spring Boot替换掉之前的SSM那一套，同时按功能分层整理出公共服务和非公共服务，按业务架构整理出不同的子系统，这样就具备了基础功能与基础业务能力，在开发中省去很多重复的开发，也为开发者省去心里负担。现总结的基础功能或子系统如下： 用户系统用户系统作为我们应用层的核心资产，也是运营的核心，同时我设想的用户系统是类似QQ那样，提供体系强大连接能力，为我们作为一个平台赋能，用户系统应当具备如下功能： 注册 重要指数：★★★★★不局限于某一种注册形式，应当包括邮箱、手机号码、用户名（实际上邮箱/手机号码也是特殊的用户名）等形式，同时兼顾国内国际的用户注册。 登录 重要指数：★★★★★提供邮箱、手机号、用户名登录，同时提供第三方登录形式，类似微信登录，支付宝登录，QQ登录等，如下图所示： 用户管理 重要指数：★★★★★包括用户的基础信息搜集、设备管理、用户信息的修改、封禁等，这些功能也可以通过安全的Api在相应的后台管理系统中进行操作等。 积分系统该系统配合平时的业务进行，由于积分与业务关系紧密，之前想做成统一于用户系统的想法不合理，应该做出一个模板来供平时有此种业务的时候参考。 支付系统考虑到区块链的一些去中心化特性，无法在某些特定业务施展，需要在应用层提供一套中心化的服务配合，这就需要一个中心化的支付系统，这部分我们已经开发完成，而且做得很好，相关SDK也开发完毕，但是还有数据安全部分未完善。 App支付从App原生调用摩尔钱包支付，这部分功能已经完成。 H5支付从浏览器调用摩尔钱包支付，这部分功能已经完成。 摩尔钱包内支付这部分功能暂无应用场景，因此未设计开发。 商户提现这部分暂时只有商户提现到自己的指定地址，然后我们人工审核，人工打款。 开放平台这部分包括注册商户、注册应用、提现、查询文档，交易记录等，由于人员问题，尚未设计开发。 打币系统对于提现功能这样的业务，我们暂时还未开放这种能力，但是不论是我们自己还是第三方开发者都有需求，这个已经在对接支付系统的时候，有不少开发者提出来了。这部分还需要继续研发。 数据安全我们公司所有数据都是单纯的放到云服务器上的数据库里，并没有做相关备份和容灾措施，对于中心化的程序，一旦发生数据丢失是很危险的，这部分也一直因为没有运维而停滞。 测试环境所有业务都应该有相应的测试环境匹配，开发、测试、运营都应该是先从测试环境开始，最后验收无误才切换到正式环境的。 强大的后台管理系统对于以上业务，不论是公共服务还是业务服务都应该有相应的管理后台进行管理，这样就不需要开发人员参与，只要管理得当，权限控制合理，运营人员直接就可以完成处理。 大数据我司大数据这块只局限在爬虫抓取，有业务需求，就抓取相关业务数据，还未深度挖掘和培养。其实可以自我进化，做出很多有意思的工具，发挥浇水语言的威力。我能想到的有以下几点： 规范相关规范的整理，包括编码、命名等规范。 自动化监控行业动向「镰刀」的口号，抄币就是抄信息，不仅是抄币，我们做出决策也是需要信息支撑的，我记得以前有位网友是做股票交易的，专门找我咨询爬虫技术，然后他通过爬虫抓取指定信息和百度的相关搜索结果，为自己的操作提供有力支撑。其实我们也可以通过爬虫来监控整个行业的动向，比如监控 BTC、ETH 大额地址变化，比如跟踪大V等，让前端配合，以可视化的方式展示出来，也可以是发布到微信和镰刀里。 量化交易这部分是欧阳和时空研究兴趣正浓。 iOSiOS现在面临的问题是没有一套完整的规范，这部分已经通过文档整理出来了，接下来就是敦促实施了。为什么要搞这么个东西？本质还是为了提高效率。如何提高效率？减少重复劳作就能提高效率。如何减少重复劳作？代码复用就能减少重复劳作。如何复用？分两种情况：1.足够抽象，直接能用；2.复制粘贴少量修改。需要我们平时工作中大量的经验总结和代码整体，最后形成一种快速开发能力，自成一体，最后的结果是得出一套 [快速开发框架] ，这样你就可以在这个开发领域里有口饭吃的同时，还能腾出更多的时间去钻研。总体所需要整理的内容较多，分为可见部分的UI和不可见部分的功能整理，还有其他一些有助于提高效率的规约，如：代码风格、命名规范、模板代码、架构模式等。如下图所示： UI部分作为能iOS开发，其实就是将功能可视化，这就是设计要各种UI组件，如果平时积累的各种优秀的可复用的轮子较多，那在开发过程中就信手拈来了，我个人认为一个功能能不能又快又好的完成，取决于你是否有做过类似的功能，也就是否累积过这些轮子。所以建议平时累积一些成套的UI组件库。推荐以下UI库： 谷歌的材料设计 腾讯QMUI YYKit 非UI部分这部分囊括的东西较多，设计到一个完整的App所需要的各种能力，比如网络、缓存处理、工具类、数据库操作、图片加载、二维码处理等等，这里也需要自己平时点滴累积，这对一个依托于某一平台吃饭的程序员来说是必不可少的。这里推荐一些好的轮子： Github iOS 主题 架构模式iOS开发其实和其他平台的开发都差不多，默认都是MVC模式，架构模式本质上没有好坏，只有熟不熟和合不合适。选择一种架构模式，比如MVVM、MVP，然后通过多方参考+总结的形式整理出一套适合自己的架构方式，并且明确各层职责和代码实现，最后为后面讲的模板代码做准备。在这里推荐MVVM模式，以下推荐一些MVVM的快速开发框架： MVVMFramework，这其中还有很多有益的文章，可以参考一下。 组件化把一个个控件或者独立的功能抽取出来，形成一个能独立被依赖使用的组件，这一部分的累积需要较长时间，但是辛苦是值得的，当然如果有第三方可用的便更好，但不是所有的第三方组件都是恰和你意。 模块化把项目中的功能独立成一个模块，可用单独运行调试，在打包时合并。这部分也是有利于复用的，在企业里，业务不可能是一沉不变，有的甚至是不断尝试中前行，也就是不断试错，这个时候某一个无法抽取成一个通用组件的那部分代码就可以做成一个模块，引用到其他项目中，或者新业务中。 规范没有规矩就不成方圆，强有力的规范为代码质量和开发效率保驾护航。对于我们软件开发而言能遇到的规范无非代码风格，命名规范等。 代码风格代码风格的统一有助于编码和模板代码的定制，也有助于自己和他人后期的维护，这个是苹果官方的IDE有现成的格式化工具，采用默认的即可。这里推荐一篇文章可以看一下：关于iOS代码风格管理的两三事。 命名风格这部分苹果官方有规定，严格按照官方的规定即可：Coding Guidelines。 模板代码模块代码是为了提高效率，当然还有就是统一风格和降低维护成本，统一到什么程度最好呢？不看代码作者，你很难区分代码是谁写的，详情见 Android模板代码规范。 总结以上是我个人对于一个1-3年工作经验的程序员的一些要求，相信在通过这些技能养家糊口的同时又不断的吸收内化，最后进化到无招胜有招的境界。 AndroidAndroid端由于年初考虑到这些问题，已经提前累积，逐步解决大半，现在只有一小部分问题： 某些接口设计没顾忌到路由机制； 无法自动集成、打包、发布等自动化操作； 需引入热更新机制； 考虑未来新的开发平台 Web前端如今的Web前端已经不是以前的jQuery时代的前端了。通过Node，前端已经可以成为全栈工程师了，现在在一些公司里，某些特殊业务，比如低频使用、简单业务、试错业务等可以由一个人前端人员去搞定了，既做后台，又做前端，因此对前端人员的运用，已经不能只局限于简单的写界面、对接口了。 现在SPA页面的性能很好，App上的某些特殊功能其实完全可以前端完成，再加上各个平台的小程序，也扩展了前端开发人员的范围。这部分由于人员到岗问题，一直没有技术沉淀，现在想通过强制一些规范的形式，来解决一部分问题。 规范小到命名规范，大到技术栈的规范，这一系列的规范或者说是“癖好”都是减少沟通、降低维护成本的好手段。 WEB前端规范 Web前端开发规范手册 代码风格 CodeGuide Vue/React统一使用一套技术栈，选择Vue/React，如果选择了某一套，就意味着要遵循这一套体系的所有技术规范了。 UI组件既然选择的是Vue或者React，那就选择相关大厂的一些UI组件实现： Element Ant Design 不要求一定要使用它们的组件，只是做参考而已。 Web版钱包未来考虑会加入代币发行等功能，而Angular这一套在中国不是十分流行，实在维护不了，大不了抽出核心JS代码用Vue或者React实现一套。 各类后台管理系统这部分工作是一直想做却没有完成的，目前只有镰刀的后台稍微完整一些，但是编辑能力仍然有限。还需完成以下几种管理后台和功能： 镰刀后台管理系统 现在镰刀后台管理系统中的添加新币种（添加tag），过程及其复杂，运营人员不是技术人员，他根本就不知道如何完成某些步骤。 摩尔钱包管理后台 这部分是对摩尔钱包的管理，包括用户黑白名单、审核、奖励打款、日常运营等 用户系统 这部分是结合具体业务应用来使用的，可以不用专门的管理后台，但是要出现在其他具体业务中的管理后天里。 开放平台 这部分是对摩尔开放平台的管理，其中有开发者入驻、App申请、SDK文档、订单记录、交易记录、提现、相关信息管理等。 各类运营小工具这部分是应对运营人员的一些日常功能的，这部分可以嵌入到具体的业务后台管理系统中，不必独立出来。 公众号排版工具 之前我们公司公众号排版是人工手动排版，样式单一且排版麻烦，希望培训运营人员使用Markdown来写文章，类似我现在写的摩尔进化录一样，最后生成html，然后使用该工具生成一定样式的html后发布到微信公众号编辑器里。 周报生成工具 类似公信宝的周报，是一张模板图片，我觉得这种就很好，直接一张图片发到微博、公众号等，如下图所示： 未完待续…… UI为了使UI设计师配合开发者提高效率，希望有点工作需要去做。 视觉设计规范对于UI这块，希望我们的UI设计师能给出一套属于我们公司的视觉设计规范，如下图所示： 为什么要搞这个呢？其实还是提高效率，因为你不管哪一个应用（不论Web还是App），都会有一个基色和辅色，然后就是文字颜色、背景色等，总结出来就是一些黑白灰的过度，这部分不管在哪个应用中都会有，且出于同一个设计师之手，也基本都是一致的。根据以往的经验，我一般都是将提现在应用搭建的时候，定义好这些颜色的引用，在使用时，基本不用思考太多，直接使用即可，这样就大大的提升了开发效率，开发者也有迹可循，同时设计人员在设计其他项目时，也都是照搬即可。 配合运营的模板由于运营是一个活跃度较高的岗位，需要根据行情、节假日等相关因素提供不同的图、文、音视频等多媒体素材，我们不需要想大公司那样尽善尽美，只需要有一些百搭的背景图，然后前端人员就可以利用这背景图，按照设计的效果出一套工具，运营人员就能根据这套工具生成应对绝大多数场景的运营图片来。 运维我们暂时还没有运维人员，不过暂时也不需要，可以内部消化掉的岗位就尽量节省一下开支，但是需要提高运维的能力和效率，体现在开发--&gt;测试--&gt;部署--&gt;上线--&gt;运营监控这一整套流程的把控上，希望有相应的工具完成这些任务，现在流行的DevOps就是来完成这一套流程的，我们也可以探索一下。 运营运营的任务其实具有很强的规律性，有规律的事都可以通过程序自动化，或者半自动化。关键是需要有相关工具，我们得提供工具。同时希望运营具有培养生态的和适当的引导社区的能力。比如李永飞那个网页游戏，由于域名被微信封禁，导致用户找不到入口，其实这种直接发链接到微信里是非常错误的，他们没有经验，我们应该指导一下，正确的做法应该是发图片，图片里有一个不会被查封的链接二维码，该链接通过302返回相应的正确的游戏入口地址，同时检测到是微信打开的时候，用蒙版提示引导到浏览器里打开，这样就一切问题都解决了。再比如我们平时的产品做出来后，可以制作成相关多媒体（图片、音视频等）进行传播。同时还有相关的日常运营、节日运营、活动运营这部分前面已经提到过了，不再赘述。 自我检讨人的行为有思想来指导，对于一个陌生的领域，我们只能根据以往的经验和已有的标准摸索，难免会有谬误，例如接口设计不合理，如initialize接口，比如item的多媒体接口，希望后期找时间修改一下。 总结会利用工具，是人与动物的不同，会创造工具则是优秀与普通差别，工欲善其事必先利其器，能自动化的，决不半自动化，能半自动化的，决不人工手动、机械式的重复体力劳作，这才是效率之道。以上只是我抛砖引玉，更丰富的内容还是要靠大家来添砖加瓦。路漫漫其修远兮，吾将上下而求索，我很希望看到摩尔壮大的一天，虽然路还很长，但是只要肯坚持，终将到达终点。 建议以上这些不可能在短时间内完成，只是总结出来，希望大家明白我们还有很多不足，大家一起商讨如何解决。如果大家认同我的观点，建议大家每周抽半天时间，坐在一起讨论完成以上任务，或跟进进展。]]></content>
  </entry>
  <entry>
    <title><![CDATA[H5支付]]></title>
    <url>%2F%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%2FH5%E6%94%AF%E4%BB%98%2FH5%E6%94%AF%E4%BB%98%2F</url>
    <content type="text"><![CDATA[H5支付 Author：Leguang E-Mail：langmanleguang@qq.com 概述第三方应用可以通过接入支付sdk的方式，使用虚拟货币进行充值，提现功能。进一步活跃社区，赋能商户，丰富生态。为了提高数据的安全性，降低中途被截获篡改的风险，强烈建议由发起调用的应用对应的服务端按照要求对数据进行二次封装加密后，再调用支付中心服务。 阅读对象产品经理，开发人员，测试人员，区块链工程师，其他有关人员。 产品介绍适用于商家在移动端网页应用中集成摩尔钱包支付功能。商家在网页中调用摩尔支付提供的网页支付接口调起摩尔钱包手机客户端内的支付模块，商家网页会跳转到摩尔钱包中完成支付，支付完后跳回到商家网页内，最后展示支付结果。若无法唤起摩尔钱包客户端，则说明该设备未安装摩尔钱包App，可能因该浏览器或者系统限制，比如微信内置浏览器、小米、百度等浏览器，建议有相关页面提示切换其他浏览器进行支付。 产品演示Android演示 iOS端演示 案例演示摩尔官方体验链接：https://open.mol.one/static/test/H5.html，由于微信/QQ/支付宝等内置浏览器有拦截，请在系统浏览器中打开。 开发准备工作请添加官方微信：gaici-btc，进行开发者资格认证，申请应用AppID和商户ID。 快速接入第一步：搭建和配置开发环境 下载服务端SDK 为了帮助开发者调用开放接口，我们提供了开放平台服务端SDK，包含 Java、PHP和.NET三语言版本（暂时只有 Java SDK，其他平台可以通过接口实现 ），封装了签名&amp;验签、HTTP接口请求等基础功能。为了快速接入并避免接入过程中的签名验签问题，请您先下载对应语言版本的SDK并引入您的开发工程。 第二步：调用接口流程为提供一套安全，高性能，可伸缩的商户支付服务，需要以下经过以下主要流程。调用流程如下： 具体步骤描述如下： 用户想商户服务器发起请求，在商户侧完成下单 由商户后台向支付中心发起下单请求调用统一下单接口，注意调用签名接口进行签名 统一下单接口返回支付相关参数给商户后台，如支付跳转uri（参数名为“uri”），并重新签名后返回给客户端，客户端通过uri调起摩尔钱包中间页 如支付成功，商户后台会接收到摩尔钱包的异步通知（此处需要商户提供回调接口） 用户在摩尔钱包内完成支付或取消支付,返回商户页面（默认为返回支付发起页面） 商户在展示页面，引导用户主动发起支付结果的查询 商户后台判断是否接收到摩尔钱包的支付结果通知 展示最终的订单支付结果给用户 统一下单接口类似支付宝和微信支付中的统一下单接口，利用该接口，第三方应用可以向摩尔的去中心化支付系统下订单，其中签名是对参数的签名，同时要将支付系统返回给后台的参数再重新签名返回应用。 地址：https://api.imfmf.com/payment/v1/unifiedorder 请求头12345POST /payment/v1/unifiedorderAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数123456789101112&#123; &quot;appID&quot;: &quot;商户应用ID&quot;, &quot;body&quot;: &quot;对一笔交易的具体描述信息，用于商户携带订单的自定义数据，支付中心会原样返回&quot;, &quot;merchantID&quot;: &quot;商户ID&quot;, &quot;notifyUrl&quot;: &quot;异步通知地址&quot;, &quot;outTradeNo&quot;: &quot;商户唯一订单号&quot;, &quot;sign&quot;: &quot;签名&quot;, &quot;signType&quot;: &quot;签名类型，目前只支持RSA2&quot;, &quot;subject&quot;: &quot;商品的标题/交易标题/订单标题/订单关键字等&quot;, &quot;timeoutExpress&quot;: &quot;该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1～60。单位：分钟，不支持小数点&quot;, &quot;totalAmount&quot;: &quot;订单总金额，单位MOL，精确到小数点后六位&quot;&#125; param 类型 是否必要 描述 appID String 是 应用ID，需要申请 body String 是 对一笔交易的具体描述信息，用于商户携带订单的自定义数据，支付中心会原样返回 merchantID String 是 商户ID，需要申请 notifyUrl String 是 异步通知地址，当订单产生的交易块被链上确认后，会回调这个接口告诉调用方 outTradeNo String 是 商户唯一订单号 sign String 是 签名，调用SDK，或者签名接口，生成签名 signType String 否 签名类型，默认是RSA2，目前只支持RSA2 subject String 是 商品的标题/交易标题/订单标题/订单关键字等，会显示在支付中间页面 timeoutExpress String 是 该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1～60。单位：分钟，不支持小数点 totalAmount String 是 订单总金额，单位MOL，精确到小数点后六位 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567891011&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;appID&quot;: &quot;2018120543000134&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot;, &quot;prepayID&quot;: &quot;20181209140047578000134663&quot;, &quot;sign&quot;: &quot;TnRiZXFKUm9CYmVLaCtZUlhNUWE3TENHZzFvYUM2T1pyMm1HODFjWTFTY0wvc3VrUXFrMVdSdmFzVDNZdWxTQmJGVGlaQmhaZllJZ2NHcW9TKytTRlZ2TXZPTld3ZFVGNFNJSUQ4T0VBeGw4TVJiQktTa2MwY1p6RXVqT1JPajVlcC9GMVJHN05UQ0RCQzB4SExMd0xLWUx6a1U5Nk1jWTdoTDh5a1QyVm1HaC9pbVQ1SUdKWDF0S0tNb3ZscWpncDlxOXBKb0kvRk1wZ0wxNTJKcGNqS0h3a0xmeHpqdXluekNrV1ZvQUJHYS95TFIrbGQ5dUkyMU1PUnp2UGFxb1lXQkUxTTZiUVh3ZExYZ1RLLzJORTl3Z1FvcjZZUDRrWHVqcEpnTzJqeHFPM3E1MGlnMTRpR2QwOUtNVGJBT2RSUEFaaEkxamRoZlg0SCtEcHlmRmRnPT0=&quot;, &quot;uri&quot;: &quot;mol://pay?appID=2018120543000134&amp;merchantID=2088120323000120&amp;prepayID=20181209140047578000134663&amp;sign=TnRiZXFKUm9CYmVLaCtZUlhNUWE3TENHZzFvYUM2T1pyMm1HODFjWTFTY0wvc3VrUXFrMVdSdmFzVDNZdWxTQmJGVGlaQmhaZllJZ2NHcW9TKytTRlZ2TXZPTld3ZFVGNFNJSUQ4T0VBeGw4TVJiQktTa2MwY1p6RXVqT1JPajVlcC9GMVJHN05UQ0RCQzB4SExMd0xLWUx6a1U5Nk1jWTdoTDh5a1QyVm1HaC9pbVQ1SUdKWDF0S0tNb3ZscWpncDlxOXBKb0kvRk1wZ0wxNTJKcGNqS0h3a0xmeHpqdXluekNrV1ZvQUJHYS95TFIrbGQ5dUkyMU1PUnp2UGFxb1lXQkUxTTZiUVh3ZExYZ1RLLzJORTl3Z1FvcjZZUDRrWHVqcEpnTzJqeHFPM3E1MGlnMTRpR2QwOUtNVGJBT2RSUEFaaEkxamRoZlg0SCtEcHlmRmRnPT0=&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 data.appID String 是 应用ID，与参数中的一致 data.merchantID String 是 商户ID，与参数中的一致 data.prepayID String 是 预支付ID，可以在支付中间页面中显示 data.sign String 是 签名，需要第三方开发者重新签名才能成功调起摩尔钱包进行支付 data.uri String 是 调起摩尔钱包支付的重要参数，通过该参数即可调用摩尔钱包支付 异常 状态码 类型 描述 410 int 商户不存在 411 int 商户审核中 412 int 商户应用不存在 413 int 商户应用审核中 414 int 商户订单号重复 415 int 订单金额需大于0 416 int 订单标题(subject)过长 417 int 签名类型只支持RSA2 418 int 订单自定义数据(body)过长 419 int 订单过期时间无效 420 int 签名不正确 签名如果不利用SDK中的签名，则需要依赖该接口进行签名。用于 调用统一支付接口之前 将调用统一下单接口得到的那些参数再签名后返回给应用 地址：https://api.imfmf.com/payment-console/v1/merchant/sign 请求头12345POST /payment-console/v1/unifiedorderAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数1234567&#123; &quot;appID&quot;: &quot;2018120543000134&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot;, &quot;signSource&quot;: &#123; 需要进行签名的内容 &#125;&#125; param 类型 是否必要 描述 appID String 是 应用ID，需要申请 merchantID String 是 商户ID，需要申请 signSource JSON对象 是 需要签名参数 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789101112&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;appID&quot;: &quot;2018120543000134&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot;, &quot;sign&quot;: &quot;Q1RKWnIxYUQvY0hBandhSHV3bjJmdElEN3p4QzI5bkdEWVJUenJSV01jM2ZxalgyQ3pvYjQyc3RlbW1XSWlWeWsvQnJxc3Z2L05va2tlSW1lUjU4TmxDeFlWckZIWVIySGVzMUdqNEhxbERheWFxU0JJNGNzMUJDU1J3NTBkbjdmcUhOL01DdEtPdDJwSTdRQlIzdWk3Vkwyb3F3cHdRSm03ck83MFdZNFNMVG9JYUNVV0RKVWpsRWpHY3hJMEtDenRpRnJIS0ZZYTIyZExUYlNSY0NncFJ3eEw2RTBLQ3Q3aVJOcnpxYmF1dTJGOCtlYVVlNW1EVHNjeHNkWW9sczA3Y1lEbEFicFlSZGZKSGg2dGpsZURxUnpaZzBLMUJmYUVCNCttM1BrWUtwU1Z4bDQ4cU9SanU3dmRGMHFRTFU1Njg1Z0lEaFNZRlVOc1lIRXhOTjd3PT0=&quot;, &quot;signSource&quot;: &#123; 请求是需要进行签名的内容 &#125; &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 data.appID String 是 应用ID，与参数中的一致 data.merchantID String 是 商户ID，与参数中的一致 data.sign String 是 签名结果 data.signSource JSON对象 是 请求是需要进行签名的内容 异常 状态码 类型 描述 410 int 商户不存在 411 int 商户审核中 412 int 商户应用不存在 413 int 商户应用审核中 414 int 商户订单号重复 415 int 订单金额需大于0 416 int 订单标题(subject)过长 417 int 签名类型只支持RSA2 418 int 订单自定义数据(body)过长 419 int 订单过期时间无效 异步接口 后台回调接口 该接口由第三方调用者在申请统一订单的时候设置好，当支付系统确认交易成功后会通过POST方法调用该接口，第三方调用者就可以根据这个信号来同步订单操作。当接收到回调时，操作步骤如下： 验签（当然你不验签也可以，除非你能保证该接口不会被人乱用）； 应该由商户自己实现验签，目前可以调用支付中心验签接口，校验参数完整性。 对比异步通知中商户ID、商户应用ID和商户保存的是否一致； 商户查询自己的订单是否存在； 比对金额； 以上校验都通过了，商户处理自己的订单逻辑，并且返回success字符串。注意：程序执行完后必须打印输出“success”（不包含引号）。如果商户反馈的字符不是success这7个字符，服务器会不断重发通知，直到超过24小时22分钟。一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）；程序执行完成后，该页面不能执行页面跳转。如果执行页面跳转，会收不到success字符，会被服务器判定为该页面程序运行出现异常，而重发处理结果通知。 具体参数如下所示： param 类型 是否必要 描述 notify_time String 是 异步通知时间 notify_type String 是 异步通知类型：默认trade_status_sync merchant_id String 是 商户ID，申请所得 app_id String 是 应用ID，申请所得 charset String 否 编码类型，默认UTF-8 version String 否 版本，默认1.0 sign_type String 否 签名类型，默认是RSA2，目前只支持RSA2 trade_no String 是 摩尔支付订单号 out_trade_no String 是 商户订单号 subject String 是 商户统一下单时传的标题，支付中心原样返回 body String 是 商户统一下单时传的自定义数据，支付中心原样返回 deduct_address String 是 扣款地址 hash_value String 是 交易hash，可在摩尔区块链浏览器查询交易块 gmt_create String 是 订单创建时间 gmt_close String 是 订单完成时间 trade_status String 是 订单状态，TRADE_SUCCESS：支付成功，TRADE_CLOSED：支付失败 gmt_payment String 是 订单支付时间，只有当订单状态为TRADE_SUCCESS时，才有该值 total_amount String 是 该笔交易总金额（摩尔数量） sign String 是 签名，由上面所有字段加值进行RSA2签名 验签 当第三方商户服务端接收到后台异步通知时（异步通知接口被调用），需要验签，以保证该接口不被他人恶意调用，即确认为摩尔支付系统调用。 地址：https://api.imfmf.com/payment-console/v1/merchant/verify 请求头12345POST /payment-console/v1/verifyAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数12345678910111213141516171819202122232425&#123; &quot;appID&quot;: &quot;2018121078000359&quot;, &quot;merchantID&quot;: &quot;2088121024000228&quot;, &quot;signData&quot;: &#123; &quot;app_id&quot;: &quot;2018121078000359&quot;, &quot;body&quot;: &quot;this is a body&quot;, &quot;charset&quot;: &quot;UTF-8&quot;, &quot;deduct_address&quot;: &quot;mol_39z9yx6h6hoixztrsam9ikjkr5zxo1h66zx6g89giqtwc1yeyptqqx8jwy4o&quot;, &quot;gmt_close&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;gmt_create&quot;: &quot;2018-12-12 15:08:33&quot;, &quot;gmt_payment&quot;: &quot;2018-12-12 15:08:45&quot;, &quot;hash_value&quot;: &quot;8F4F97EA543CB7A4D299700D3B17355125499742AC88F544ADD672F77ED7DB21&quot;, &quot;merchant_id&quot;: &quot;2088121024000228&quot;, &quot;notify_time&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;notify_type&quot;: &quot;trade_status_sync&quot;, &quot;out_trade_no&quot;: &quot;348F241F4645C9D7E69E7FBC300C253F&quot;, &quot;sign&quot;: &quot;TGlRY2N3eFNhT2ZtUWpPUmJMNGhFam9lb3Rla2l3NU43RGRITDBKbVMxT0E4OXpjaTk1Q0xBSEMxL0xscnpKMkFBQyt5NzFyU00xak8rOERMMTlJK1Y3Nkl3NlBqUXNIYWtZdFFBeWhaQ1FNaWhUTndHS1c2c3ZwdXY3MVdYbGJTRDZ5TWpRM2dsVEJvcVpNenhvTDBJMld0TlJKcTlUY05YL0t3NHkzRHVMcHB2dk9oajdXeE5GMmx0N2V5aTI2ZDN1WjhRc2RiVG1KNGp2TmZLME9vUG15V29xdjhxWFdWSng3VmFQWkdycHQwYnBwVjJ1Q0hWcE1Zd2dtQUVnOGdLVEU3UEpiR0M3ZlhtU1RWViswT0l4cUp4OUg0Z3hlSk01SEhMMjBzellJZGR5RmpDbFRMd09nTFVjVnRQcjVVY2tjTUtkQkJOMUxBMGdRcGprTzJBPT0=&quot;, &quot;sign_type&quot;: &quot;RSA2&quot;, &quot;subject&quot;: &quot;this is a dubject&quot;, &quot;total_amount&quot;: &quot;2&quot;, &quot;trade_no&quot;: &quot;20181212150833854000110978&quot;, &quot;trade_status&quot;: &quot;TRADE_SUCCESS&quot;, &quot;version&quot;: &quot;1.0&quot; &#125;&#125; param 类型 是否必要 描述 appID String 是 应用ID，需要申请 merchantID String 是 商户ID，需要申请 signData JSON对象 是 需要签名参数对象 notify_time String 是 异步通知时间 notify_type String 是 异步通知类型：默认trade_status_sync merchant_id String 是 商户ID，申请所得 app_id String 是 应用ID，申请所得 charset String 否 编码类型，默认UTF-8 version String 否 版本，默认1.0 sign_type String 否 签名类型，默认是RSA2，目前只支持RSA2 trade_no String 是 摩尔支付订单号 out_trade_no String 是 商户订单号 subject String 是 商户统一下单时传的标题，支付中心原样返回 body String 是 商户统一下单时传的自定义数据，支付中心原样返回 deduct_address String 是 扣款地址 hash_value String 是 交易hash，可在摩尔区块链浏览器查询交易块 gmt_create String 是 订单创建时间 gmt_close String 是 订单完成时间 trade_status String 是 订单状态，TRADE_SUCCESS：支付成功，TRADE_CLOSED：支付失败 gmt_payment String 是 订单支付时间，只有当订单状态为TRADE_SUCCESS时，才有该值 total_amount String 是 该笔交易总金额（摩尔数量） 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789101112131415161718192021222324252627282930&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;appID&quot;: &quot;2018121078000359&quot;, &quot;merchantID&quot;: &quot;2088121024000228&quot;, &quot;signData&quot;: &#123; &quot;app_id&quot;: &quot;2018121078000359&quot;, &quot;body&quot;: &quot;this is a body&quot;, &quot;charset&quot;: &quot;UTF-8&quot;, &quot;deduct_address&quot;: &quot;mol_39z9yx6h6hoixztrsam9ikjkr5zxo1h66zx6g89giqtwc1yeyptqqx8jwy4o&quot;, &quot;gmt_close&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;gmt_create&quot;: &quot;2018-12-12 15:08:33&quot;, &quot;gmt_payment&quot;: &quot;2018-12-12 15:08:45&quot;, &quot;hash_value&quot;: &quot;8F4F97EA543CB7A4D299700D3B17355125499742AC88F544ADD672F77ED7DB21&quot;, &quot;merchant_id&quot;: &quot;2088121024000228&quot;, &quot;notify_time&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;notify_type&quot;: &quot;trade_status_sync&quot;, &quot;out_trade_no&quot;: &quot;348F241F4645C9D7E69E7FBC300C253F&quot;, &quot;sign&quot;: &quot;TGlRY2N3eFNhT2ZtUWpPUmJMNGhFam9lb3Rla2l3NU43RGRITDBKbVMxT0E4OXpjaTk1Q0xBSEMxL0xscnpKMkFBQyt5NzFyU00xak8rOERMMTlJK1Y3Nkl3NlBqUXNIYWtZdFFBeWhaQ1FNaWhUTndHS1c2c3ZwdXY3MVdYbGJTRDZ5TWpRM2dsVEJvcVpNenhvTDBJMld0TlJKcTlUY05YL0t3NHkzRHVMcHB2dk9oajdXeE5GMmx0N2V5aTI2ZDN1WjhRc2RiVG1KNGp2TmZLME9vUG15V29xdjhxWFdWSng3VmFQWkdycHQwYnBwVjJ1Q0hWcE1Zd2dtQUVnOGdLVEU3UEpiR0M3ZlhtU1RWViswT0l4cUp4OUg0Z3hlSk01SEhMMjBzellJZGR5RmpDbFRMd09nTFVjVnRQcjVVY2tjTUtkQkJOMUxBMGdRcGprTzJBPT0=&quot;, &quot;sign_type&quot;: &quot;RSA2&quot;, &quot;subject&quot;: &quot;this is a dubject&quot;, &quot;total_amount&quot;: &quot;2&quot;, &quot;trade_no&quot;: &quot;20181212150833854000110978&quot;, &quot;trade_status&quot;: &quot;TRADE_SUCCESS&quot;, &quot;version&quot;: &quot;1.0&quot; &#125;, &quot;verifyResult&quot;: true &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 …… …… …… …… data.verifyResult boolean 是 true为验签通过，false为验签失败 浏览器回调url 该url为商户申请时填写，在支付完成后，摩尔钱包会调起浏览器并打开该url，如果不填则没有该动作。 商户管理商户暂时只需要通过接口控制自己支付系统中的币，我们提供如下接口： 商户余额 商户提现 商户余额通过该接口可以查询商户在支付系统中的MOL数量。 地址：https://api.imfmf.com/payment-console/v1/merchant/balance 请求头12345GET /payment-console/v1/merchant/balanceAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数1?merchantID=2088120323000120 param 类型 是否必要 描述 merchantID String 是 商户ID，需要申请 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;accountAddress&quot;: &quot;mol_xxx&quot;, &quot;accumulation&quot;: &quot;14.281283&quot;, &quot;balance&quot;: &quot;14.281283&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 data.accountAddress String 是 商户提供的提现地址 data.accumulation String 是 商户在支付系统中累积的币 data.balance String 是 商户在支付系统中的余额 data.merchantID String 是 商户ID 商户提现通过该接口可以查询商户在支付系统中的MOL数量。 地址：https://api.imfmf.com/payment-console/v1/merchant/withdraw 请求头12345POST /payment-console/v1/merchant/withdrawAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数1234&#123; &quot;amount&quot;: &quot;提取金额&quot;, &quot;merchantID&quot;: &quot;商户ID&quot;&#125; param 类型 是否必要 描述 amount String 是 提现MOL数量 merchantID String 是 商户ID 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 常见问题接口状态码接口常见状态码如下所示： 状态码 类型 描述 200 int 表示成功调用 400 int 请求错误，请重试 500 int 请求异常，请重试 410 int 商户不存在 411 int 商户审核中 412 int 商户应用不存在 413 int 商户应用审核中 414 int 商户订单号重复 415 int 订单金额需大于0 416 int 订单标题(subject)过长 417 int 签名类型只支持RSA2 418 int 订单自定义数据(body)过长 419 int 订单过期时间无效 420 int 签名不正确 421 int 订单不存在 422 int 请勿重复支付 423 int 商户ID和订单号不匹配 424 int 商户应用ID和订单号不匹配 425 int 支付金额错误 调用顺序 调用统一下单接口之前，要对参数进行签名，这一步本该是由SDK完成，如果没有相应平台的SDK，则通过接口下单之前要对参数签名。 下单成功后会返回4个参数，此时得到的uri是无法调起摩尔钱包进行支付的，需要对返回的参数进行重新签名后替换掉uri中的sign参数的值。 异步通知关于异步通知，是需要第三方开发者提供一个http接口，摩尔去中心化支付系统在公链成功确认该区块，即完成该笔交易，会调用该接口，并且得到该接口返回 “success” 字符即表示成功回调，否则会重复回调。 JS模板当前端拿到后台申请到的统一订单参数后，可调用如下代码唤起摩尔钱包App进行支付： 12var uri = &quot;mol://pay?prepayID=20181208100352191000123970&amp;appID=2018120543000134&amp;merchantID=2088120323000120&amp;sign=RWp2eVhsR2NOTUFTcU9FZUgvWGZwUUVpNmUvNHQ4YTYzVVhLUEpIYjk4ZkNxUGNlVjJiNGYxdjl1WG5YSGFWS1JjUnRlS1BwS29TN2FJcW8xeUhuYzhsVmJoU2xUQTNkNEVFb1pjaEdJbytYUlRpSWwzb0tTb2tXalpDTXZPTkNpZ1F5KzA5bDlCNzQvZGNRQTZWV05YMUlJZE8vUWNMMG4xMGdLbUs2cDZ2L3dpTml5VGQra0xBc1IwZzVmajRtYWNOSk9LcEhwcDlBM3U4Y2JBckFKdlpVamV3dXNQVzBtU09TMlNVbXNnbFFwaXE5aDZpVmc0MDZLLzRmaitRbUwvRkRhUXpYRG1scWJHVVZYWmRuUUFRMzJiWVVRbVFkQ012SERDc2crK2FaZG1vR0c0ZE9CRFVBb2ZBTUo0UzA5K3NCWk4wN2tHZTRNbVBKNFNzWUVnPT0=&quot;;top.location.href = uri;]]></content>
  </entry>
  <entry>
    <title><![CDATA[App支付]]></title>
    <url>%2F%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%2FApp%E6%94%AF%E4%BB%98%2FApp%E6%94%AF%E4%BB%98%2F</url>
    <content type="text"><![CDATA[App支付 Author：Leguang E-Mail：langmanleguang@qq.com 概述第三方应用可以通过接入支付sdk的方式，使用虚拟货币进行充值，提现功能。进一步活跃社区，赋能商户，丰富生态。为了提高数据的安全性，降低中途被截获篡改的风险，强烈建议由发起调用的应用对应的服务端按照要求对数据进行二次封装加密后，再调用支付中心服务。 阅读对象产品经理，开发人员，测试人员，区块链工程师，其他有关人员。 产品介绍适用于商家在App应用中集成摩尔支付功能。商家App调用摩尔钱包提供的SDK，SDK再调用摩尔钱包App内的支付模块。如果用户已安装摩尔钱包App，商家App会跳转到摩尔钱包中完成支付，支付完后跳回到商家App内，最后展示支付结果。如果用户没有安装摩尔钱包App，商家App内会调起摩尔官网，以提示用户下载。目前支持手机系统有：iOS（苹果）、Android（安卓）。 产品演示以Android端为例，iOS端类似 开发准备工作请添加官方微信：gaici-btc，进行开发者资格认证，申请应用AppID和商户ID。 快速接入第一步：搭建和配置开发环境 下载服务端SDK，点击下载 为了帮助开发者调用开放接口，我们提供了开放平台服务端SDK，包含 Java、PHP和.NET三语言版本（暂时只有 Java SDK，其他平台可以通过接口实现 ），封装了签名&amp;验签、HTTP接口请求等基础功能。为了快速接入并避免接入过程中的签名验签问题，请您先下载对应语言版本的SDK并引入您的开发工程。 第二步：调用接口流程为提供一套安全，高性能，可伸缩的商户支付服务，需要以下经过以下主要流程。调用流程如下： 具体步骤描述如下： 用户想商户服务器发起请求，在商户侧完成下单 由商户后台向支付中心发起下单请求调用统一下单接口，注意调用签名接口进行签名 统一下单接口返回支付相关参数给商户后台，如支付跳转uri（参数名为“uri”），并重新签名后返回给客户端，客户端通过uri调起摩尔钱包中间页 如支付成功，商户后台会接收到摩尔钱包的异步通知（此处需要商户提供回调接口） 用户在摩尔钱包内完成支付或取消支付,返回商户页面（默认为返回支付发起页面） 商户在展示页面，引导用户主动发起支付结果的查询 商户后台判断是否接收到摩尔钱包的支付结果通知 展示最终的订单支付结果给用户 使用服务端SDK调用SDK已经将以上步骤封装好了，参考代码及注释如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243// 统一下单请求参数 UnifiedOrderDTO unifiedOrderDTO = new UnifiedOrderDTO(); unifiedOrderDTO.setAppID(&quot;商户应用ID&quot;); unifiedOrderDTO.setMerchantID(&quot;商户ID&quot;); unifiedOrderDTO.setOutTradeNo(&quot;商户自己生成的订单号&quot;); unifiedOrderDTO.setTotalAmount(&quot;订单金额&quot;); unifiedOrderDTO.setSubject(&quot;订单标题&quot;); unifiedOrderDTO.setBody(&quot;商户自定义数据&quot;); unifiedOrderDTO.setTimeoutExpress(&quot;订单过期时间&quot;); unifiedOrderDTO.setNotifyUrl(&quot;异步通知地址&quot;); unifiedOrderDTO.setSignType(&quot;RSA2&quot;); // 转成json JSONObject jsonOrder = (JSONObject) JSON.toJSON(unifiedOrderDTO); jsonOrder.remove(&quot;sign&quot;); // 加签 String sign = MolpayUtils.sign(MolpayUtils.buildSignString(jsonOrder), &quot;商户应用私钥&quot;); // 统一下单 jsonOrder.put(&quot;sign&quot;, sign); String unifiedOrderResult = MolpayUtils.unifiedorder(&quot;https://api.imfmf.com/payment/v1/unifiedorder&quot;, jsonOrder.toString()); // 校验摩尔支付中心返回结果 JSONObject jsonResult = JSON.parseObject(unifiedOrderResult); Integer code = jsonResult.getInteger(&quot;code&quot;); if (200 == code) &#123; JSONObject data = jsonResult.getJSONObject(&quot;data&quot;); String merchantID = data.getString(&quot;merchantID&quot;); String appID = data.getString(&quot;appID&quot;); String prepayID = data.getString(&quot;prepayID&quot;); // 重新封装待签名参数 JSONObject signData = new JSONObject(); signData.put(&quot;merchantID&quot;, merchantID); signData.put(&quot;appID&quot;, appID); signData.put(&quot;prepayID&quot;, prepayID); String molpaySign = data.getString(&quot;sign&quot;); // 摩尔支付中心返回签名验签 boolean verifyResult = MolpayUtils.verify(MolpayUtils.buildSignString(signData), &quot;摩尔支付公钥&quot;, molpaySign); if (verifyResult) &#123; // 对参数进行重签名 String newSign = MolpayUtils.sign(MolpayUtils.buildSignString(signData), &quot;商户应用私钥&quot;); // 返回数据 signData.put(&quot;sign&quot;, newSign); signData.put(&quot;uri&quot;, &quot;mol://pay?&quot; + MolpayUtils.buildSignString(signData)); &#125; &#125; 使用HTTPS协议接口调用如果我们没有提供相应的平台的SDK（暂时只提供了Java），可以利用以下接口完成这部分工作。 统一下单接口类似支付宝和微信支付中的统一下单接口，利用该接口，第三方应用可以向摩尔的去中心化支付系统下订单，其中签名是对参数的签名，同时要将支付系统返回给后台的参数再重新签名返回应用。 地址：https://api.imfmf.com/payment/v1/unifiedorder 请求头12345POST /payment/v1/unifiedorderAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数123456789101112&#123; &quot;appID&quot;: &quot;商户应用ID&quot;, &quot;body&quot;: &quot;对一笔交易的具体描述信息，用于商户携带订单的自定义数据，支付中心会原样返回&quot;, &quot;merchantID&quot;: &quot;商户ID&quot;, &quot;notifyUrl&quot;: &quot;异步通知地址&quot;, &quot;outTradeNo&quot;: &quot;商户唯一订单号&quot;, &quot;sign&quot;: &quot;签名&quot;, &quot;signType&quot;: &quot;签名类型，目前只支持RSA2&quot;, &quot;subject&quot;: &quot;商品的标题/交易标题/订单标题/订单关键字等&quot;, &quot;timeoutExpress&quot;: &quot;该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1～60。单位：分钟，不支持小数点&quot;, &quot;totalAmount&quot;: &quot;订单总金额，单位MOL，精确到小数点后六位&quot;&#125; param 类型 是否必要 描述 appID String 是 应用ID，需要申请 body String 是 对一笔交易的具体描述信息，用于商户携带订单的自定义数据，支付中心会原样返回 merchantID String 是 商户ID，需要申请 notifyUrl String 是 异步通知地址，当订单产生的交易块被链上确认后，会回调这个接口告诉调用方 outTradeNo String 是 商户唯一订单号 sign String 是 签名，调用SDK，或者签名接口，生成签名 signType String 否 签名类型，默认是RSA2，目前只支持RSA2 subject String 是 商品的标题/交易标题/订单标题/订单关键字等，会显示在支付中间页面 timeoutExpress String 是 该笔订单允许的最晚付款时间，逾期将关闭交易。取值范围：1～60。单位：分钟，不支持小数点 totalAmount String 是 订单总金额，单位MOL，精确到小数点后六位 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567891011&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;appID&quot;: &quot;2018120543000134&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot;, &quot;prepayID&quot;: &quot;20181209140047578000134663&quot;, &quot;sign&quot;: &quot;TnRiZXFKUm9CYmVLaCtZUlhNUWE3TENHZzFvYUM2T1pyMm1HODFjWTFTY0wvc3VrUXFrMVdSdmFzVDNZdWxTQmJGVGlaQmhaZllJZ2NHcW9TKytTRlZ2TXZPTld3ZFVGNFNJSUQ4T0VBeGw4TVJiQktTa2MwY1p6RXVqT1JPajVlcC9GMVJHN05UQ0RCQzB4SExMd0xLWUx6a1U5Nk1jWTdoTDh5a1QyVm1HaC9pbVQ1SUdKWDF0S0tNb3ZscWpncDlxOXBKb0kvRk1wZ0wxNTJKcGNqS0h3a0xmeHpqdXluekNrV1ZvQUJHYS95TFIrbGQ5dUkyMU1PUnp2UGFxb1lXQkUxTTZiUVh3ZExYZ1RLLzJORTl3Z1FvcjZZUDRrWHVqcEpnTzJqeHFPM3E1MGlnMTRpR2QwOUtNVGJBT2RSUEFaaEkxamRoZlg0SCtEcHlmRmRnPT0=&quot;, &quot;uri&quot;: &quot;mol://pay?appID=2018120543000134&amp;merchantID=2088120323000120&amp;prepayID=20181209140047578000134663&amp;sign=TnRiZXFKUm9CYmVLaCtZUlhNUWE3TENHZzFvYUM2T1pyMm1HODFjWTFTY0wvc3VrUXFrMVdSdmFzVDNZdWxTQmJGVGlaQmhaZllJZ2NHcW9TKytTRlZ2TXZPTld3ZFVGNFNJSUQ4T0VBeGw4TVJiQktTa2MwY1p6RXVqT1JPajVlcC9GMVJHN05UQ0RCQzB4SExMd0xLWUx6a1U5Nk1jWTdoTDh5a1QyVm1HaC9pbVQ1SUdKWDF0S0tNb3ZscWpncDlxOXBKb0kvRk1wZ0wxNTJKcGNqS0h3a0xmeHpqdXluekNrV1ZvQUJHYS95TFIrbGQ5dUkyMU1PUnp2UGFxb1lXQkUxTTZiUVh3ZExYZ1RLLzJORTl3Z1FvcjZZUDRrWHVqcEpnTzJqeHFPM3E1MGlnMTRpR2QwOUtNVGJBT2RSUEFaaEkxamRoZlg0SCtEcHlmRmRnPT0=&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 data.appID String 是 应用ID，与参数中的一致 data.merchantID String 是 商户ID，与参数中的一致 data.prepayID String 是 预支付ID，可以在支付中间页面中显示 data.sign String 是 签名，需要第三方开发者重新签名才能成功调起摩尔钱包进行支付 data.uri String 是 调起摩尔钱包支付的重要参数，通过该参数即可调用摩尔钱包支付 异常 状态码 类型 描述 410 int 商户不存在 411 int 商户审核中 412 int 商户应用不存在 413 int 商户应用审核中 414 int 商户订单号重复 415 int 订单金额需大于0 416 int 订单标题(subject)过长 417 int 签名类型只支持RSA2 418 int 订单自定义数据(body)过长 419 int 订单过期时间无效 420 int 签名不正确 签名如果不利用SDK中的签名，则需要依赖该接口进行签名。用于 调用统一支付接口之前 将调用统一下单接口得到的那些参数再签名后返回给应用 地址：https://api.imfmf.com/payment-console/v1/merchant/sign 请求头12345POST /payment-console/v1/merchant/signAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数1234567&#123; &quot;appID&quot;: &quot;2018120543000134&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot;, &quot;signSource&quot;: &#123; 需要进行签名的内容 &#125;&#125; param 类型 是否必要 描述 appID String 是 应用ID，需要申请 merchantID String 是 商户ID，需要申请 signSource JSON对象 是 需要签名参数 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789101112&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;appID&quot;: &quot;2018120543000134&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot;, &quot;sign&quot;: &quot;Q1RKWnIxYUQvY0hBandhSHV3bjJmdElEN3p4QzI5bkdEWVJUenJSV01jM2ZxalgyQ3pvYjQyc3RlbW1XSWlWeWsvQnJxc3Z2L05va2tlSW1lUjU4TmxDeFlWckZIWVIySGVzMUdqNEhxbERheWFxU0JJNGNzMUJDU1J3NTBkbjdmcUhOL01DdEtPdDJwSTdRQlIzdWk3Vkwyb3F3cHdRSm03ck83MFdZNFNMVG9JYUNVV0RKVWpsRWpHY3hJMEtDenRpRnJIS0ZZYTIyZExUYlNSY0NncFJ3eEw2RTBLQ3Q3aVJOcnpxYmF1dTJGOCtlYVVlNW1EVHNjeHNkWW9sczA3Y1lEbEFicFlSZGZKSGg2dGpsZURxUnpaZzBLMUJmYUVCNCttM1BrWUtwU1Z4bDQ4cU9SanU3dmRGMHFRTFU1Njg1Z0lEaFNZRlVOc1lIRXhOTjd3PT0=&quot;, &quot;signSource&quot;: &#123; 请求是需要进行签名的内容 &#125; &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 data.appID String 是 应用ID，与参数中的一致 data.merchantID String 是 商户ID，与参数中的一致 data.sign String 是 签名结果 data.signSource JSON对象 是 请求是需要进行签名的内容 异常 状态码 类型 描述 410 int 商户不存在 411 int 商户审核中 412 int 商户应用不存在 413 int 商户应用审核中 414 int 商户订单号重复 415 int 订单金额需大于0 416 int 订单标题(subject)过长 417 int 签名类型只支持RSA2 418 int 订单自定义数据(body)过长 419 int 订单过期时间无效 第三步：调试上线考虑安全因素，建议商户ID和私钥等不要外泄，同时钱包生成提现地址的私钥等都要安全妥善保管，在调试完成后即可上线使用。 Android端集成以下内容请参考官方提供的demo，点击下载。 第一步：集成SDK提供添加 jar 包方式和Gradle 配置依赖等方式集成，以下两种方式选其一即可。 添加 jar 包方式集成 点击下载jar包。 放入相应module或者app的libs目录，如下图所示 Gradle 配置依赖方式集成在相关module或者app的build.gradle文件中的dependencies中添加如下配置信息： 1//摩尔支付SDK 第二步：申请运行时权限请在 AndroidManifest.xml 文件中添加如下权限： 1&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt; 第三步：调用相关Api 构建参数对象PayParamsV0； 构建MolPay对象； 准备接口回调； 调用start()方法。 具体支付功能参考demo中相关代码，以下列举核心代码 123456789101112131415161718192021222324252627282930313233343536//配置参数，参数由后台返回PayParamsV0 params = PayParamsV0.builder() .uri(&quot;mol://pay?prepayID=95648eed96414387a9c51cdda36142a1&amp;appID=6dd50bbfdc3711e898a000163e002b60&amp;merchantID=5ae0d007dc3711e898a000163e002b60&amp;sign=Ry9CM044YWgvcmNodml1c3k0OWl5ckVGRG0yNWNZT29Xd0ZNOWlvTVJaYlVOM2lNdzhxcWZ0enJzVW5MT2R2d25yVy9yQ2Y3dlFrYWxUMEwxN0RnYlliWWpaYVhVcFFOWTJvSjFwaHhJa2pUR3JvMk5uUkEvS29kQXdocjRkU3VJc0NqbDhvaTQ2VjhSbG1zYzJ6bW9rQVpJeEhvejJ2dDFwdzNDVjRJSG02djFRdjN0WG1yUWRWVU13amI2WDl1VmZBOGRXcDNOL0kyVHhKaEVsUStjWGlybEdWd3pyejlpRkVQdE1UdDBGRzlncUtrYmJZTE1MZEhMK1FORG1FZmZYWVREWERBYWFmU1VwSEhSMjZXUkt4TlNTdUMva21sOEFTKzlKWHNOdVpwL2ZucVVXTTlqWHg5RlhrTnBQOTJvTW5IZ09yUG5Ka1Rwd2NGNXJmWTFnPT0=&quot;) .build();Log.e(TAG, &quot;params: &quot; + params.toString());//通过builder模式构建支付对象MolPayMolPay.builder() .setParams(params) .setContext(this) .setOnPayListener(new DefaultPayListener() &#123; @Override public void onStart() &#123; //支付开始时回调 Log.i(TAG, &quot;onStart: &quot;); &#125; @Override public void onSuccess() &#123; //支付成功后会回调 Log.i(TAG, &quot;onSuccess: &quot;); &#125; @Override public void onError(int code) &#123; //支付过程过遇到错误会回调 Log.i(TAG, &quot;onError: &quot;); &#125; @Override public void onComplete() &#123; //完成支付回调 Log.i(TAG, &quot;onComplete: &quot;); &#125; &#125;) .start();//当MolPay调用start即开始支付流程 iOS端集成以下内容请参考官方提供的demo，点击下载。 第一步：集成SDK 点击下载framework。 启动IDE（如Xcode），把MOLCore.framework文件拷贝到项目文件夹下，并导入到项目工程中。 在需要调用MOLCoreSDK的文件中，增加头文件引用。 1#import &lt;MOLCore/MOLCore.h&gt; 第二步：项目配置 配置 URL Scheme 点击项目名称，点击“Info”选项卡，在“URL Types”选项中，点击“+”，在“URL Schemes”中输入“molPayDemo”。“molPayDemo”来自于文件“PayViewController.m”237行的NSString *appScheme = @”molPayDemo”; 注意：这里的URL Schemes中输入的molPayDemo，为测试demo，实际商户的app中要填写独立的scheme，建议跟商户的app有一定的标示度，要做到和其他的商户app不重复，否则可能会导致钱包返回的结果无法正确跳回商户app。 白名单设置 点击项目名称，点击“Info”选项卡，在info.plist文件中新增LSApplicationQueriesSchemes，类型为Arrar，添加“mol”的白名单。 注意：这里的白名单不添加会导致SDK识别不到手机里面的摩尔钱包，导致不能跳转 第三步：调用相关Api 初始化 1[MOLCore defaultService]; 调用+ (MOLCore *)defaultService;类下面的支付接口函数，唤起摩尔钱包支付页面 12345678910/** * 支付接口 ** @param orderUriStr 订单uri * @param schemeStr 调用支付的app注册在info.plist中的scheme * @param completionBlock 支付结果回调Block */ - (void)payOrder:(NSString *)orderUrlStr fromScheme:(NSString *)schemeStr callback:(CompletionBlock)completionBlock; 步骤6：当这笔交易被买家支付成功后摩尔钱包收银台上显示该笔交易成功，并提示用户“完成”。此时在APAppDelegate.m的【iOS9.0以上（包括iOS9.0）需要在 - (BOOL)application:(UIApplication )app openURL:(NSURL )url options:(NSDictionary&lt;NSString, id&gt; *)options 中执行 】： 123456- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options&#123; //此处把支付结果交给SDK处理在支付接口回调中返回 [[MOLCore defaultService] processOrderWithPaymentResult:url]; return YES;&#125; 异步接口后台回调接口该接口由第三方调用者在申请统一订单的时候设置好，当支付系统确认交易成功后会通过POST方法调用该接口，第三方调用者就可以根据这个信号来同步订单操作。当接收到回调时，操作步骤如下： 验签（当然你不验签也可以，除非你能保证该接口不会被人乱用）； 应该由商户自己实现验签，目前可以调用支付中心验签接口，校验参数完整性。 对比异步通知中商户ID、商户应用ID和商户保存的是否一致； 商户查询自己的订单是否存在； 比对金额； 以上校验都通过了，商户处理自己的订单逻辑，并且返回success字符串。注意：程序执行完后必须打印输出“success”（不包含引号）。如果商户反馈的字符不是success这7个字符，服务器会不断重发通知，直到超过24小时22分钟。一般情况下，25小时以内完成8次通知（通知的间隔频率一般是：4m,10m,10m,1h,2h,6h,15h）；程序执行完成后，该页面不能执行页面跳转。如果执行页面跳转，会收不到success字符，会被服务器判定为该页面程序运行出现异常，而重发处理结果通知。 参数具体参数如下所示： param 类型 是否必要 描述 notify_time String 是 异步通知时间 notify_type String 是 异步通知类型：默认trade_status_sync merchant_id String 是 商户ID，申请所得 app_id String 是 应用ID，申请所得 charset String 否 编码类型，默认UTF-8 version String 否 版本，默认1.0 sign_type String 否 签名类型，默认是RSA2，目前只支持RSA2 trade_no String 是 摩尔支付订单号 out_trade_no String 是 商户订单号 subject String 是 商户统一下单时传的标题，支付中心原样返回 body String 是 商户统一下单时传的自定义数据，支付中心原样返回 deduct_address String 是 扣款地址 hash_value String 是 交易hash，可在摩尔区块链浏览器查询交易块 gmt_create String 是 订单创建时间 gmt_close String 是 订单完成时间 trade_status String 是 订单状态，TRADE_SUCCESS：支付成功，TRADE_CLOSED：支付失败 gmt_payment String 是 订单支付时间，只有当订单状态为TRADE_SUCCESS时，才有该值 total_amount String 是 该笔交易总金额（摩尔数量） sign String 是 签名，由上面所有字段加值进行RSA2签名 验签当第三方商户服务端接收到后台异步通知时（异步通知接口被调用），需要验签，以保证该接口不被他人恶意调用，即确认为摩尔支付系统调用。 地址：https://api.imfmf.com/payment-console/v1/merchant/verify 请求头12345POST /payment-console/v1/verifyAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数12345678910111213141516171819202122232425&#123; &quot;appID&quot;: &quot;2018121078000359&quot;, &quot;merchantID&quot;: &quot;2088121024000228&quot;, &quot;signData&quot;: &#123; &quot;app_id&quot;: &quot;2018121078000359&quot;, &quot;body&quot;: &quot;this is a body&quot;, &quot;charset&quot;: &quot;UTF-8&quot;, &quot;deduct_address&quot;: &quot;mol_39z9yx6h6hoixztrsam9ikjkr5zxo1h66zx6g89giqtwc1yeyptqqx8jwy4o&quot;, &quot;gmt_close&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;gmt_create&quot;: &quot;2018-12-12 15:08:33&quot;, &quot;gmt_payment&quot;: &quot;2018-12-12 15:08:45&quot;, &quot;hash_value&quot;: &quot;8F4F97EA543CB7A4D299700D3B17355125499742AC88F544ADD672F77ED7DB21&quot;, &quot;merchant_id&quot;: &quot;2088121024000228&quot;, &quot;notify_time&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;notify_type&quot;: &quot;trade_status_sync&quot;, &quot;out_trade_no&quot;: &quot;348F241F4645C9D7E69E7FBC300C253F&quot;, &quot;sign&quot;: &quot;TGlRY2N3eFNhT2ZtUWpPUmJMNGhFam9lb3Rla2l3NU43RGRITDBKbVMxT0E4OXpjaTk1Q0xBSEMxL0xscnpKMkFBQyt5NzFyU00xak8rOERMMTlJK1Y3Nkl3NlBqUXNIYWtZdFFBeWhaQ1FNaWhUTndHS1c2c3ZwdXY3MVdYbGJTRDZ5TWpRM2dsVEJvcVpNenhvTDBJMld0TlJKcTlUY05YL0t3NHkzRHVMcHB2dk9oajdXeE5GMmx0N2V5aTI2ZDN1WjhRc2RiVG1KNGp2TmZLME9vUG15V29xdjhxWFdWSng3VmFQWkdycHQwYnBwVjJ1Q0hWcE1Zd2dtQUVnOGdLVEU3UEpiR0M3ZlhtU1RWViswT0l4cUp4OUg0Z3hlSk01SEhMMjBzellJZGR5RmpDbFRMd09nTFVjVnRQcjVVY2tjTUtkQkJOMUxBMGdRcGprTzJBPT0=&quot;, &quot;sign_type&quot;: &quot;RSA2&quot;, &quot;subject&quot;: &quot;this is a dubject&quot;, &quot;total_amount&quot;: &quot;2&quot;, &quot;trade_no&quot;: &quot;20181212150833854000110978&quot;, &quot;trade_status&quot;: &quot;TRADE_SUCCESS&quot;, &quot;version&quot;: &quot;1.0&quot; &#125;&#125; param 类型 是否必要 描述 appID String 是 应用ID，需要申请 merchantID String 是 商户ID，需要申请 signData JSON对象 是 需要签名参数对象 notify_time String 是 异步通知时间 notify_type String 是 异步通知类型：默认trade_status_sync merchant_id String 是 商户ID，申请所得 app_id String 是 应用ID，申请所得 charset String 否 编码类型，默认UTF-8 version String 否 版本，默认1.0 sign_type String 否 签名类型，默认是RSA2，目前只支持RSA2 trade_no String 是 摩尔支付订单号 out_trade_no String 是 商户订单号 subject String 是 商户统一下单时传的标题，支付中心原样返回 body String 是 商户统一下单时传的自定义数据，支付中心原样返回 deduct_address String 是 扣款地址 hash_value String 是 交易hash，可在摩尔区块链浏览器查询交易块 gmt_create String 是 订单创建时间 gmt_close String 是 订单完成时间 trade_status String 是 订单状态，TRADE_SUCCESS：支付成功，TRADE_CLOSED：支付失败 gmt_payment String 是 订单支付时间，只有当订单状态为TRADE_SUCCESS时，才有该值 total_amount String 是 该笔交易总金额（摩尔数量） 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789101112131415161718192021222324252627282930&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;appID&quot;: &quot;2018121078000359&quot;, &quot;merchantID&quot;: &quot;2088121024000228&quot;, &quot;signData&quot;: &#123; &quot;app_id&quot;: &quot;2018121078000359&quot;, &quot;body&quot;: &quot;this is a body&quot;, &quot;charset&quot;: &quot;UTF-8&quot;, &quot;deduct_address&quot;: &quot;mol_39z9yx6h6hoixztrsam9ikjkr5zxo1h66zx6g89giqtwc1yeyptqqx8jwy4o&quot;, &quot;gmt_close&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;gmt_create&quot;: &quot;2018-12-12 15:08:33&quot;, &quot;gmt_payment&quot;: &quot;2018-12-12 15:08:45&quot;, &quot;hash_value&quot;: &quot;8F4F97EA543CB7A4D299700D3B17355125499742AC88F544ADD672F77ED7DB21&quot;, &quot;merchant_id&quot;: &quot;2088121024000228&quot;, &quot;notify_time&quot;: &quot;2018-12-12 15:08:46&quot;, &quot;notify_type&quot;: &quot;trade_status_sync&quot;, &quot;out_trade_no&quot;: &quot;348F241F4645C9D7E69E7FBC300C253F&quot;, &quot;sign&quot;: &quot;TGlRY2N3eFNhT2ZtUWpPUmJMNGhFam9lb3Rla2l3NU43RGRITDBKbVMxT0E4OXpjaTk1Q0xBSEMxL0xscnpKMkFBQyt5NzFyU00xak8rOERMMTlJK1Y3Nkl3NlBqUXNIYWtZdFFBeWhaQ1FNaWhUTndHS1c2c3ZwdXY3MVdYbGJTRDZ5TWpRM2dsVEJvcVpNenhvTDBJMld0TlJKcTlUY05YL0t3NHkzRHVMcHB2dk9oajdXeE5GMmx0N2V5aTI2ZDN1WjhRc2RiVG1KNGp2TmZLME9vUG15V29xdjhxWFdWSng3VmFQWkdycHQwYnBwVjJ1Q0hWcE1Zd2dtQUVnOGdLVEU3UEpiR0M3ZlhtU1RWViswT0l4cUp4OUg0Z3hlSk01SEhMMjBzellJZGR5RmpDbFRMd09nTFVjVnRQcjVVY2tjTUtkQkJOMUxBMGdRcGprTzJBPT0=&quot;, &quot;sign_type&quot;: &quot;RSA2&quot;, &quot;subject&quot;: &quot;this is a dubject&quot;, &quot;total_amount&quot;: &quot;2&quot;, &quot;trade_no&quot;: &quot;20181212150833854000110978&quot;, &quot;trade_status&quot;: &quot;TRADE_SUCCESS&quot;, &quot;version&quot;: &quot;1.0&quot; &#125;, &quot;verifyResult&quot;: true &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 …… …… …… …… data.verifyResult boolean 是 true为验签通过，false为验签失败 浏览器回调url该url为商户申请时填写，在支付完成后，摩尔钱包会调起浏览器并打开该url，如果不填则没有该动作。 商户管理商户暂时只需要通过接口控制自己支付系统中的币，我们提供如下接口： 商户余额 商户提现 商户余额通过该接口可以查询商户在支付系统中的MOL数量。 地址：https://api.imfmf.com/payment-console/v1/merchant/balance 请求头12345GET /payment-console/v1/merchant/balanceAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数1?merchantID=2088120323000120 param 类型 是否必要 描述 merchantID String 是 商户ID，需要申请 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;, &quot;data&quot;: &#123; &quot;accountAddress&quot;: &quot;mol_xxx&quot;, &quot;accumulation&quot;: &quot;14.281283&quot;, &quot;balance&quot;: &quot;14.281283&quot;, &quot;merchantID&quot;: &quot;2088120323000120&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 data JSON对象 是 返回接口正文数据 data.accountAddress String 是 商户提供的提现地址 data.accumulation String 是 商户在支付系统中累积的币 data.balance String 是 商户在支付系统中的余额 data.merchantID String 是 商户ID 商户提现通过该接口可以查询商户在支付系统中的MOL数量。 地址：https://api.imfmf.com/payment-console/v1/merchant/withdraw 请求头12345POST /payment-console/v1/merchant/withdrawAccept: application/jsonContent-Type: application/json;charset=UTF-8Platform: AndroidLocale: zh 参数1234&#123; &quot;amount&quot;: &quot;提取金额&quot;, &quot;merchantID&quot;: &quot;商户ID&quot;&#125; param 类型 是否必要 描述 amount String 是 提现MOL数量 merchantID String 是 商户ID 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;success&quot;&#125; key 类型 是否必要 描述 message String 是 接口响应描述，由摩尔去中心化支付系统根据当前请求实际情况而定，方便开发者调试 code int 是 状态码，200为正确解决，其他均为异常结果 常见问题接口状态码接口常见状态码如下所示： 状态码 类型 描述 200 int 表示成功调用 400 int 请求错误，请重试 500 int 请求异常，请重试 410 int 商户不存在 411 int 商户审核中 412 int 商户应用不存在 413 int 商户应用审核中 414 int 商户订单号重复 415 int 订单金额需大于0 416 int 订单标题(subject)过长 417 int 签名类型只支持RSA2 418 int 订单自定义数据(body)过长 419 int 订单过期时间无效 420 int 签名不正确 421 int 订单不存在 422 int 请勿重复支付 423 int 商户ID和订单号不匹配 424 int 商户应用ID和订单号不匹配 425 int 支付金额错误 App端SDK结果码 结果码 类型 描述 1 int 支付成功 0 int 支付取消 -1 int 支付失败 -102 int 解析错误 -103 int 参数错误 -104 int 验证错误 -109 int 摩尔钱包App未安装 -110 int 摩尔钱包未创建 -111 int 网络错误 -112 int 未知错误 -113 int SDK版本错误 -114 int 启动摩尔钱包错误 调用顺序 调用统一下单接口之前，要对参数进行签名，这一步本该是由SDK完成，如果没有相应平台的SDK，则通过接口下单之前要对参数签名。 下单成功后会返回4个参数，此时得到的uri是无法调起摩尔钱包进行支付的，需要对返回的参数进行重新签名后替换掉uri中的sign参数的值。 异步通知关于异步通知，是需要第三方开发者提供一个http接口，摩尔去中心化支付系统在公链成功确认该区块，即完成该笔交易，会调用该接口，并且得到该接口返回 “success” 字符即表示成功回调，否则会重复回调。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java Web开发模板——效率为王]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FJava%2FJavaWeb%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[Java Web开发模板——效率为王 Author：Leguang E-Mail：langmanleguang@qq.com 前言 没有对错，只有习惯 Java Web 的 MVC 模式开发已经具备一定的模板性，但是由于人与人的习惯问题，对代码的细节会有一定的差异性，为了减少这种差异性，我们规定一套模板出来，同一个小组、部分甚至公司都可以按照这么一套最佳实践出来的模板抄，这样未来其他人员接手时会很容易明白你的套路，找到亲切感以减少不必要的心理负担。 公共规范环境 IDE 统一使用IntelliJ IDEA作为开发IDE，Eclipse 虽然也可以，但是如果要做到统一的话，还是尽量使用更现代化、更先进的 IDE ，IntelliJ IDEA 在 Java 开发体系中已经超过 Eclipse 成为最主流的 IDE 了。同时要对 IDEA 做一些配置：idea安装完成后要做的几件事 。 JDK 统一使用 JDK8+ 以上 JDK 版本，可以使用一些新特性。 构建统一使用 Maven 构建系统，与之对比的是 Gradle 构建，谷歌在 Android 上固定使用 Gradle 作为构建系统，Gradle 也具有更强大更灵活的功能，同时脚本即配置，相较于 Maven 的 XML 文件来说是更简洁清晰的，但是标准有标准的好处，自由也有自由的代价，Gradle 的上手成本远高于 Maven ，如果未来 Gradle 成为 Java 构建的主流，我们再切换也不迟。 Spring Boot + Spring Cloud统一使用 Spring Boot 作为 Java Web 开发的首选。现阶段做 Java Web 开发的，Struct 已经不需要考虑了，Spring MVC 也有 Spring Boot 做为更好的选择，如果有 Spring MVC 的经验的话，上手 Spring Boot 是很简单的事儿。同时 Spring Boot 是作为 Spring Cloud 的基础，所以使用这一套是趋势。 项目初始化要求每一个项目（可执行服务）的结构是模块化的结构，即最外层 Maven 作为项目顶层父 Project 依赖配置都写在该层的 pom.xml 文件中，然后根据 MVC 分三层，每一层都以 Module 形式构建依次向下依赖，同时加一个 Common 公共层 Module 作为最底层依赖。搭建如下图所示： 名称 用途 依赖关系 common 公共层，作为最底层的依赖 依赖父 Project dao 数据持久层 依赖 common service 服务层，即业务逻辑层，调用 依赖 dao api 接口层，处理参数和调用 service 完成业务响应 依赖 service SwaggerSwagger 是项目的默认需求，同时要求 Swagger 能在开发环境中打开，在生产环境是关闭的。 i18n国际化能力也是每一个项目默认需求，Spring Boot 对这一部分有了很好的支持。这个要提前考虑，如果一开始不考虑，项目突然有需要的时候就很麻烦和被动了。 空格和冗余不要随意空行，也不要出现多余的东西。写代码时勤快按 Ctrl+Alt+L 和 Ctrl+Alt+O ，这样会格式化代码同时删除不必要的引用，让代码美观。同时不要随意空格，现在Android Studio是用的谷歌的 Java 模板 Style ，都有相关规定。XML 文件中也是如此，写完代码后勤快格式化，删除多余空行。 命名规范具体参考：https://github.com/leguang/Article/blob/master/阿里巴巴Java开发手册(终极版).pdf 注释 类注释写在文件头注释中，每一个类文件都必须要有文件头注释。如下所示： 类的成员变量如果需要注释，则用单行注释写在末尾，如果较长一行写不下，考虑到美观问题则写在成员变量的上面。对于成员变量的注释尽量不要用多行注释。如下所示： 成员方法尽量写注释，如果实在不需要的，可不写。如下所示： 方法出现的位置和顺序在方法从上至下的调用顺序就决定了方法从上至下书写的位置。如下所示： 包管理MVC中的模板ControllerController 层作为视图或 API 的入口，除了面向接口编程等基本要求外，只做以下三件事： 参数、请求方法等校验； 调用业务层代码； 拼装响应对象； 如下图所示： ServiceService 层业务逻辑层，除了面向接口编程等基本要求外，只做以下三件事： 参数校验； 调用 DAO 层代码，完成业务逻辑处理； 相关处理并返回相关数据； 如下图所示： DAODAO 我们统一使用 MyBatis 套件，因此可以利用 MyBatis 提供的生成器去生成大部分代码，具体的可以利用 generator 这个目录下的工具完成，如下图所示： 其他/建议 规定 XxxUtils 类是指不依赖第三方，只需要 JDK 就能运行的类，也就是说随便复制到哪个 Java 项目都能直接用，改都不用改一下。 规定 XxxHelper 类是依赖的第三方的 Utils 类，只需要添加了依赖就可以直接用。 建议配合 lombok 使用，以减少代码。 建议使用 Optional 和 Stream 等 JDK8+ 中的新特性。 总结之所以定义这样的模板代码，主要是为了规范编码范式，使每个模块都“长得一样”，一套好的模板代码可以让开发者受益，也可以让后来接手的人很快找到套路并理解融入进去。]]></content>
  </entry>
  <entry>
    <title><![CDATA[重整计划]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2F%E9%87%8D%E6%95%B4%E8%AE%A1%E5%88%92%2F%E9%87%8D%E6%95%B4%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[重整计划 Author：Leguang E-Mail：langmanleguang@qq.com 重整计划本次重整计划预计持续两周，一周半用于实施，半周用于验收，主要用于各项收尾工作+总结+整理出有益文档。此次修整是为了后面更好的开发，希望大家态度端正，不希望大家把时间浪费在重复的体力劳作上。 后台 支付后台、支付节点 部分接口重构 配合服务器精简工作 禅道上的Bug 各项收尾工作 大数据端 爬虫部分的优化 丰富内容 抽取出合理组件、整合有益框架、资源 禅道上的Bug 配合服务器精简工作 各项收尾工作 Web端后台中的用户系统、优化，比如上传图片、指定部分用户手机登录 优化上传tag过程。考虑到上传tag的图标过于麻烦的问题，希望能在上传tag时直接上传图片（后台转存至OSS并得到url）替代当前填写url的形式。这部分需要后台接口配合，可寻求配合。 为了安全，需要后台账号体系。 考虑到当前对于文章的内容还无法修改编辑，研究后台编辑item的content的可行性，看可否通过一个富文本编辑器的形式展现、修改文章详情内容。 禅道上的Bug 各项收尾工作 UI端 UI设计的部分切图补上 部分不合理图片替换 整体设计提出建设性意见 各项收尾工作 移动端 移动端的支付对接、支付后台、支付节点 部分项目重构+Bug+注释+文档+公共组件的抽取+模块合理的独立出来 禅道上的Bug 对接重构+新增的接口 各项收尾工作 Android: Android端的钱包重构 编译时长优化 iOS: iOS端多加一个闪屏的功能 模块合理安排 尝试更优秀的代码架构模式 优化之前不优雅的实现 进化录我们是一家科技公司，相信大家都希望运用自己的技术做出有益、有意、有趣的事物。大家可以畅想一下我们公司的进化录应该是什么样的，公司的发展进化录、产品进化录、镰刀进化录、摩尔钱包进化录、摩尔链进化录等。]]></content>
  </entry>
  <entry>
    <title><![CDATA[iOS技术栈整理]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FiOS%2FiOS%E6%8A%80%E6%9C%AF%E6%A0%88%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[iOS技术栈整理 Author：Leguang E-Mail：langmanleguang@qq.com 前言为什么要搞这么个东西？本质还是为了提高效率。如何提高效率？减少重复劳作就能提高效率。如何减少重复劳作？代码复用就能减少重复劳作。如何复用？分两种情况：1.足够抽象，直接能用；2.复制粘贴少量修改。需要我们平时工作中大量的经验总结和代码整体，最后形成一种快速开发能力，自成一体，最后的结果是得出一套 [快速开发框架] ，这样你就可以在这个开发领域里有口饭吃的同时，还能腾出更多的时间去钻研。 概要总体所需要整理的内容较多，分为可见部分的UI和不可见部分的功能整理，还有其他一些有助于提高效率的规约，如：代码风格、命名规范、模板代码、架构模式等。如下图所示： UI部分作为能iOS开发，其实就是将功能可视化，这就是设计要各种UI组件，如果平时积累的各种优秀的可复用的轮子较多，那在开发过程中就信手拈来了，我个人认为一个功能能不能又快又好的完成，取决于你是否有做过类似的功能，也就是否累积过这些轮子。所以建议平时累积一些成套的UI组件库。推荐以下UI库： 谷歌的材料设计 腾讯QMUI YYKit 非UI部分这部分囊括的东西较多，设计到一个完整的App所需要的各种能力，比如网络、缓存处理、工具类、数据库操作、图片加载、二维码处理等等，这里也需要自己平时点滴累积，这对一个依托于某一平台吃饭的程序员来说是必不可少的。这里推荐一些好的轮子： Github iOS 主题 架构模式iOS开发其实和其他平台的开发都差不多，默认都是MVC模式，架构模式本质上没有好坏，只有熟不熟和合不合适。选择一种架构模式，比如MVVM、MVP，然后通过多方参考+总结的形式整理出一套适合自己的架构方式，并且明确各层职责和代码实现，最后为后面讲的模板代码做准备。在这里推荐MVVM模式，以下推荐一些MVVM的快速开发框架： MVVMFramework，这其中还有很多有益的文章，可以参考一下。 组件化把一个个控件或者独立的功能抽取出来，形成一个能独立被依赖使用的组件，这一部分的累积需要较长时间，但是辛苦是值得的，当然如果有第三方可用的便更好，但不是所有的第三方组件都是恰和你意。 模块化把项目中的功能独立成一个模块，可用单独运行调试，在打包时合并。这部分也是有利于复用的，在企业里，业务不可能是一沉不变，有的甚至是不断尝试中前行，也就是不断试错，这个时候某一个无法抽取成一个通用组件的那部分代码就可以做成一个模块，引用到其他项目中，或者新业务中。 规范没有规矩就不成方圆，强有力的规范为代码质量和开发效率保驾护航。对于我们软件开发而言能遇到的规范无非代码风格，命名规范等。 代码风格代码风格的统一有助于编码和模板代码的定制，也有助于自己和他人后期的维护，这个是苹果官方的IDE有现成的格式化工具，采用默认的即可。这里推荐一篇文章可以看一下：关于iOS代码风格管理的两三事。 命名风格这部分苹果官方有规定，严格按照官方的规定即可：Coding Guidelines。 模板代码模块代码是为了提高效率，当然还有就是统一风格和降低维护成本，统一到什么程度最好呢？不看代码作者，你很难区分代码是谁写的，详情见 Android模板代码规范。 总结以上是我个人对于一个1-3年工作经验的程序员的一些要求，相信在通过这些技能养家糊口的同时又不断的吸收内化，最后进化到无招胜有招的境界。]]></content>
  </entry>
  <entry>
    <title><![CDATA[镰刀后台管理系统设计]]></title>
    <url>%2F%E9%95%B0%E5%88%80%E9%A1%B9%E7%9B%AE%2F%E9%95%B0%E5%88%80%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%2F%E9%95%B0%E5%88%80%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[镰刀后台管理系统设计 Author：Leguang E-Mail：langmanleguang@qq.com 功能大纲暂时只罗列出这么多功能，后续有想到再加。 以下功能如无特别说明，均针对的是摩尔钱包功能。 左边导航从上至下，一级分类及其对应的子功能如下： 一级分类 子功能 0.source（爬虫来源） 1.新增source 2.修改source3.查询source 1.tag（标签） 1.新增tag 2.修改tag3.查询tag 2.item（新闻） 1.新增item2.修改item3.查询tag 2.配置 1.镰刀App文案（对应的是初始化接口）2.个人中心模块导航列表3.红包4.海报5.推荐tag 3.通知 1.通知 2.历史记录 4.推送 1.广告 2.连接管理 3.历史记录 5.版本升级 1.Android 2.iOS 功能环境切换针对后台系统的所有功能都是有测试环境和正式环境区分的，默认是正式环境，这个是针对某些需要测试的功能设计的，比如推送广告，需要看一下效果，因此需要先在测试环境配好，测试通过再直接用正式环境操作。所以考虑在页面顶部有一个开关，点击一下就切换到另一种模式。 爬虫来源sources管理管理爬虫抓取的某个关键字的来源 获取source列表 地址：https://api.xxx.com/path/xxx/v1/sources 请求头1234GET /xxx/v1/sourcesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1?tag=d5f4c561ba2d11e8bbbd54e1add1a2c4 params 类型 是否必须 描述 tag String 是 tag的uid 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2&quot;, &quot;name&quot;: &quot;weibo&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;6394162797&quot;, &quot;time&quot;: &quot;2018-10-12 15:19:46&quot;, &quot;enable&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;33&quot;, &quot;name&quot;: &quot;official&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;https://www.gxb.io/&quot;, &quot;time&quot;: &quot;2018-10-12 15:19:46&quot;, &quot;enable&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;34&quot;, &quot;name&quot;: &quot;twitter&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;SwftCoin&quot;, &quot;time&quot;: &quot;2018-10-12 15:19:46&quot;, &quot;enable&quot;: true &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该来源的唯一标识 data.name String 是 该来源的全称 data.tag String 是 该来源所绑定的tag的uid data.value String 是 该来源的所要爬去的入口值 data.time String 是 该来源修改时间 data.enable Boolean 是 该来源是否可用 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 新增source 地址：https://api.xxx.com/path/xxx/v1/sources 请求头1234POST /xxx/v1/sourcesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1234567891011121314151617181920[ &#123; &quot;name&quot;: &quot;weibo&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;6394162797&quot;, &quot;enable&quot;: true &#125;, &#123; &quot;name&quot;: &quot;weibo&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;6394162797&quot;, &quot;enable&quot;: true &#125;, &#123; &quot;name&quot;: &quot;weibo&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;6394162797&quot;, &quot;enable&quot;: true &#125;] params 类型 是否必须 描述 name String 是 该来源的全称 tag String 是 该来源所绑定的tag的uid value String 是 该来源的所要爬去的入口值 enable Boolean 是 该来源是否可用 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2&quot; &#125;, &#123; &quot;uid&quot;: &quot;33&quot; &#125;, &#123; &quot;uid&quot;: &quot;34&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该来源的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 修改source 地址：https://api.xxx.com/path/xxx/v1/sources/{uid} 请求头1234PATCH /xxx/v1/sources/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数123456&#123; &quot;name&quot;: &quot;weibo&quot;, &quot;tag&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;value&quot;: &quot;6394162797&quot;, &quot;enable&quot;: true&#125; params 类型 是否必须 描述 name String 是 该来源的全称 tag String 是 该来源所绑定的tag的uid value String 是 该来源的所要爬去的入口值 enable Boolean 是 该来源是否可用 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;2&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该来源的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 tag（标签）对于tag模块的管理无非增改查，界面大致如下图所示： 获取tags列表 地址：https://api.xxx.com/path/xxx/v1/tags 请求头1234GET /xxx/v1/tagsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1?type=hot&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 type String 否 不传表示默认，默认表示返回全部（按symbol首字母排序） 值为hot表示热门tags（可配置且过滤掉已订阅的） 值为subscribe表示订阅中的推荐tags（可配置且过滤掉已订阅的） 值为news表示快讯中的推荐tags（可配置且过滤掉已订阅的） 值为initialize表示用户注册时的推荐tags（可配置顺序） keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;coinID&quot;: 56, &quot;keyword&quot;: &quot;bitcoin#Bitcoin#比特币#BTC&quot;, &quot;heat&quot;: 3, &quot;children&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125; ] &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;coinID&quot;: 56, &quot;keyword&quot;: &quot;bitcoin#Bitcoin#比特币#BTC&quot;, &quot;heat&quot;: 3, &quot;children&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125; ] &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该tag的唯一标识 data.name String 是 该tag的全称 data.symbol String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.image String 是 该tag的图标 data.description String 是 该tag的描述 data.type String 是 该tag的类型，暂时只有coin类型 data.coinID int 否 该字段用户其他平台查询行情 data.keyword String 否 该字段用于爬虫匹配tag data.heat int 否 该字段用于标记该tag的热度 data.skus JSON数组 是 该tag的套餐描述 data.skus.uid String 是 该tag的套餐的uid data.skus.price String 是 该tag的套餐的具体价格 data.skus.currency String 是 该tag的套餐的价格单位 data.skus.unitPrice String 是 该tag的套餐的单价描述 data.skus.period String 是 该tag的套餐的周期单位 data.parents JSON数组 否 该tag所关联的父tags，但是当前版本中暂时不考虑 data.children JSON数组 否 该tag所关联的子tags 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 获取tag详情 地址：https://api.xxx.com/path/xxx/v1/tags/{uid} 请求头1234GET /xxx/v1/tags/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;coinID&quot;: 56, &quot;keyword&quot;: &quot;bitcoin#Bitcoin#比特币#BTC&quot;, &quot;heat&quot;: 3, &quot;children&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125; ] &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该tag的唯一标识 data.name String 是 该tag的全称 data.symbol String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.image String 是 该tag的图标 data.description String 是 该tag的描述 data.type String 是 该tag的类型，暂时只有coin类型 data.coinID int 否 该字段用户其他平台查询行情 data.keyword String 否 该字段用于爬虫匹配tag data.heat int 否 该字段用于标记该tag的热度 data.skus JSON数组 是 该tag的套餐描述 data.skus.uid String 是 该tag的套餐的uid data.skus.price String 是 该tag的套餐的具体价格 data.skus.currency String 是 该tag的套餐的价格单位 data.skus.unitPrice String 是 该tag的套餐的单价描述 data.skus.period String 是 该tag的套餐的周期单位 data.parents JSON数组 否 该tag所关联的父tags data.children JSON数组 否 该tag所关联的子tags 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 新增tags 地址：https://api.xxx.com/path/xxx/v1/tags 请求头1234POST /xxx/v1/tagsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1234567891011121314151617181920212223242526272829[ &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;coinID&quot;: 56, &quot;keyword&quot;: &quot;bitcoin#Bitcoin#比特币#BTC&quot;, &quot;heat&quot;: 3, &quot;children&quot;: [ &quot;2323235t2t23t23&quot;, &quot;2323235t2t23t23&quot; ] &#125;, &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;children&quot;: [ &quot;2323235t2t23t23&quot;, &quot;2323235t2t23t23&quot; ] &#125;] params 类型 是否必须 描述 data.name String 是 该tag的全称 data.symbol String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.image String 是 该tag的图标 data.description String 否 该tag的描述 data.type String 是 该tag的类型，暂时只有coin类型 data.coinID int 否 该字段用户其他平台查询行情 data.keyword String 否 该字段用于爬虫匹配tag data.heat int 否 该字段用于标记该tag的热度 data.skus JSON数组 是 该tag的套餐描述 data.skus.price String 是 该tag的套餐的具体价格 data.skus.currency String 是 该tag的套餐的价格单位 data.skus.unitPrice String 是 该tag的套餐的单价描述 data.skus.period String 是 该tag的套餐的周期单位 data.parents JSON数组 否 该tag所关联的父tag的uid data.children JSON数组 否 该tag所关联的子tag的uid 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该tag的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 修改tag 地址：https://api.xxx.com/path/xxx/v1/tags/{uid} 请求头1234PATCH /xxx/v1/tags/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数12345678910111213141516&#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;coinID&quot;: 56, &quot;keyword&quot;: &quot;bitcoin#Bitcoin#比特币#BTC&quot;, &quot;heat&quot;: 3, &quot;children&quot;: [ &quot;2323235t2t23t23&quot;, &quot;2323235t2t23t23&quot; ]&#125; params 类型 是否必须 描述 data.name String 是 该tag的全称 data.symbol String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.image String 是 该tag的图标 data.description String 否 该tag的描述 data.type String 是 该tag的类型，暂时只有coin类型 data.coinID int 否 该字段用户其他平台查询行情 data.keyword String 否 该字段用于爬虫匹配tag data.heat int 否 该字段用于标记该tag的热度 data.skus JSON数组 是 该tag的套餐描述 data.skus.price String 是 该tag的套餐的具体价格 data.skus.currency String 是 该tag的套餐的价格单位 data.skus.unitPrice String 是 该tag的套餐的单价描述 data.skus.period String 是 该tag的套餐的周期单位 data.parents JSON数组 否 该tag所关联的父tag的uid data.children JSON数组 否 该tag所关联的子tag的uid 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该tag的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 item（新闻/消息）对于item模块的管理无非增改查，界面大致如下图所示： 获取item列表 地址：https://api.xxx.com/path/xxx/v1/items 请求头1234GET /path/xxx/v1/itemsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数123?tag=t2t24t24t2t24&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20或者?type=subscribe&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 tag String 否 获取tag所属的内容，对应上文tags接口中的uid，不传或者传空字符表示默认值，默认返回所有item type String 否 获取列表类型，值为subscribe表示获取订阅列表，不传或者传空标识默认值，默认返回所有item keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: [ &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;tags&quot;: [ &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;, &#123; &quot;name&quot;: &quot;EOS&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0 &#125;, &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;tags&quot;: [ &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;, &#123; &quot;name&quot;: &quot;EOS&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 3, &quot;like&quot;: &#123; &quot;rating&quot;: 3.5, &quot;number&quot;: 200 &#125; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data JSON数组 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 data.title String 否 该条item的标题 data.text String 否 该条item的文本内容，如果是文章，则对应的是文章的摘要，如果是其他快讯，则对应快讯内容或者快讯摘要 data.type String 否 该条item的对应的类型： flash表示快讯 article表示文章 notice表示交易所公告之类 transaction大额交易 social表示社交类的，如微博和推特抓取的数据 detail表示带详情的数据 other表示预留其他类型 data.grade int 否 该条item消息分级中的等级，数值越大等级越高，大于等于2就要在界面上设置出来，暂时定义顶部颜色为红色，小于3的就不需要改变颜色 data.source JSON对象 是 该条item的来源JSON描述对象 data.source.uid String 是 该条item的来源对象的uid data.source.name String 是 该条item的来源名称，例如：微博XX大V，金色财经 data.source.type String 是 该条item的来源的类型，对应值如下： weibo表示抓取的微博内容 twitter表示推特儿 jinsecaijing表示金色财经的内容 bishijie表示比世界的内容 bixiang表示币响的内容 bikuaibao表示币快报的内容 liandede表示链得得的内容 babite表示巴比特的内容 huoxingcaijing表示火星财经的内容 notice表示公告的内容 还有其他大额交易的稍后定义 data.source.avatar String 否 该条item的来源的头像 data.author String 否 该条item的作者对象 data.author.name String 否 该条item的作者的名字（昵称） data.author.avatar String 否 该条item的作者的头像 data.time String 是 秒时间戳 data.url String 否 该条item的web连接，后期会生成一个liandao.ai的域名下的链接，暂时可不考虑 data.tags JSON数组 是 所属的tag data.multimedia JSON对象 否 该条item的多媒体对象，主要指网页、图片和视频3种 data.multimedia.type String 是 该条item的多媒体类型 值为web表示网页，此时media数组长度为1 值为image表示图片，此时media数组长度为1-9，并且取media对象中的image字段 值为video表示视频，此时media数组长度为1 data.multimedia.media JSON数组 是 该条item的多媒体对象，主要指网页、图片和视频 data.multimedia.media.image String 否 该条item的多媒体所对应的图片，其中如果type为web时，表示左边的网页图片；如果type为video时，表示视频的预览图 data.multimedia.media.text String 否 该条item的多媒体的文本，其中如果type为web时，表示网页的描述性文字 data.multimedia.media.url String 否 该条item的多媒体的链接，其中如果type为web时，表示左边的网页链接；如果type为video时，表示视频的链接 data.inline String 否 该条item的内嵌item，即可能包含以上所有字段或者对象或者数组，类似微博中的转发 data.translation JSON对象 否 该条item的翻译部分，最多只有title、text和content的翻译 data.translation.title String 否 该条item的翻译部分，针对标题的翻译 data.translation.text String 否 该条item的翻译部分，针对文本的翻译 data.like JSON对象 否 该条item对应的点赞/热度的描述对象 data.like.rating float 否 表达点赞/热度的程度等级，由后台根据某种算法生成 data.like.number int 否 点赞/热度的实际数目 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 item详情 地址：https://api.xxx.com/path/xxx/v1/items/{uid} 请求头1234GET /path/xxx/v1/items/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot;, &quot;url&quot;: &quot;https://m.weibo.cn/status/4286763108972753&quot;, &quot;uid&quot;: &quot;4286763108972753&quot; &#125;, &quot;tags&quot;: [ &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;, &#123; &quot;name&quot;: &quot;EOS&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0, &quot;content&quot;: &quot;&lt;p&gt;……&lt;p&gt;&quot;, &quot;like&quot;: &#123; &quot;rating&quot;: 3.5, &quot;number&quot;: 200 &#125; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 data.title String 否 该条item的标题 data.text String 否 该条item的文本内容，如果是文章，则对应的是文章的摘要，如果是其他快讯，则对应快讯内容或者快讯摘要 data.item.type String 否 该条item的对应的类型： flash表示快讯 article表示文章 notice表示交易所公告之类 transaction大额交易 social表示社交类的，如微博和推特抓取的数据 detail表示带详情的数据 other表示预留其他类型 data.grade int 否 该条item消息分级中的等级，数值越大等级越高，大于等于2就要在界面上设置出来，暂时定义顶部颜色为红色，小于3的就不需要改变颜色 data.grade String 否 该条item的详情内容 data.source JSON对象 是 该条item的来源JSON描述对象 data.source.uid String 是 该条item的来源对象的uid data.source.url String 是 该条item的来源链接 data.source.name String 是 该条item的来源名称，例如：微博XX大V，金色财经 data.source.type String 是 该条item的来源的类型，对应值如下： weibo表示抓取的微博内容 twitter表示推特儿 jinsecaijing表示金色财经的内容 bishijie表示比世界的内容 bixiang表示币响的内容 bikuaibao表示币快报的内容 liandede表示链得得的内容 babite表示巴比特的内容 huoxingcaijing表示火星财经的内容 notice表示公告的内容 还有其他大额交易的稍后定义 data.source.avatar String 否 该条item的来源的头像 data.author String 否 该条item的作者对象 data.author.name String 否 该条item的作者的名字（昵称） data.author.avatar String 否 该条item的作者的头像 data.time String 是 秒时间戳 data.url String 否 该条item的web连接，后期会生成一个liandao.ai的域名下的链接，暂时可不考虑 data.tags JSON数组 是 所属的tag data.multimedia JSON对象 否 该条item的多媒体对象，主要指网页、图片和视频3种 data.multimedia.type String 是 该条item的多媒体类型 值为web表示网页，此时media数组长度为1 值为image表示图片，此时media数组长度为1-9，并且取media对象中的image字段 值为video表示视频，此时media数组长度为1 data.multimedia.media JSON数组 是 该条item的多媒体对象，主要指网页、图片和视频 data.multimedia.media.image String 否 该条item的多媒体所对应的图片，其中如果type为web时，表示左边的网页图片；如果type为video时，表示视频的预览图 data.multimedia.media.text String 否 该条item的多媒体的文本，其中如果type为web时，表示网页的描述性文字 data.multimedia.media.url String 否 该条item的多媒体的链接，其中如果type为web时，表示左边的网页链接；如果type为video时，表示视频的链接 data.inline String 否 该条item的内嵌item，类似微博中的转发 data.translation JSON对象 否 该条item的翻译部分，最多只有title、text和content的翻译 data.translation.title String 否 该条item的翻译部分，针对标题的翻译 data.translation.text String 否 该条item的翻译部分，针对文本的翻译 data.content String 否 该条item的翻译部分，针对content的翻译，比如文章详情 data.like JSON对象 否 该条item对应的点赞/热度的描述对象 data.like.rating float 否 表达点赞/热度的程度等级，由后台根据某种算法生成 data.like.number int 否 点赞/热度的实际数目 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 新增items 地址：https://api.xxx.com/path/xxx/v1/items 请求头1234POST /path/xxx/v1/itemsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134[ &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot;, &quot;url&quot;: &quot;https://m.weibo.cn/status/4286763108972753&quot;, &quot;uid&quot;: &quot;4286763108972753&quot; &#125;, &quot;tags&quot;: [ &quot;32t23t23sdvsdbse324h34h&quot;, &quot;32t23t23sdvsdbse324h34h&quot; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0, &quot;content&quot;: &quot;&lt;p&gt;……&lt;p&gt;&quot; &#125;, &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot;, &quot;url&quot;: &quot;https://m.weibo.cn/status/4286763108972753&quot;, &quot;uid&quot;: &quot;4286763108972753&quot; &#125;, &quot;tags&quot;: [ &quot;32t23t23sdvsdbse324h34h&quot;, &quot;32t23t23sdvsdbse324h34h&quot; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0, &quot;content&quot;: &quot;&lt;p&gt;……&lt;p&gt;&quot;, &quot;like&quot;: &#123; &quot;rating&quot;: 3.5, &quot;number&quot;: 200 &#125; &#125;] params 类型 是否必须 描述 uid String 是 该条资讯的唯一标示，可用于获取详情 title String 否 该条item的标题 text String 否 该条item的文本内容，如果是文章，则对应的是文章的摘要，如果是其他快讯，则对应快讯内容或者快讯摘要 type String 否 该条item的对应的类型： flash表示快讯 article表示文章 notice表示交易所公告之类 transaction大额交易 social表示社交类的，如微博和推特抓取的数据 detail表示带详情的数据 other表示预留其他类型 grade int 否 该条item消息分级中的等级，数值越大等级越高，大于等于2就要在界面上设置出来，暂时定义顶部颜色为红色，小于3的就不需要改变颜色 source JSON对象 是 该条item的来源JSON描述对象 source.uid String 是 该条item的来源对象的uid source.name String 是 该条item的来源名称，例如：微博XX大V，金色财经 source.type String 是 该条item的来源的类型，对应值如下： weibo表示抓取的微博内容 twitter表示推特儿 jinsecaijing表示金色财经的内容 bishijie表示比世界的内容 bixiang表示币响的内容 bikuaibao表示币快报的内容 liandede表示链得得的内容 babite表示巴比特的内容 huoxingcaijing表示火星财经的内容 notice表示公告的内容 还有其他大额交易的稍后定义 source.avatar String 否 该条item的来源的头像 author String 否 该条item的作者对象 author.name String 否 该条item的作者的名字（昵称） author.avatar String 否 该条item的作者的头像 time String 是 秒时间戳 url String 否 该条item的web连接，后期会生成一个liandao.ai的域名下的链接，暂时可不考虑 tags JSON数组 是 所属的tag multimedia JSON对象 否 该条item的多媒体对象，主要指网页、图片和视频3种 multimedia.type String 是 该条item的多媒体类型 值为web表示网页，此时media数组长度为1 值为image表示图片，此时media数组长度为1-9，并且取media对象中的image字段 值为video表示视频，此时media数组长度为1 multimedia.media JSON数组 是 该条item的多媒体对象，主要指网页、图片和视频 multimedia.media.image String 否 该条item的多媒体所对应的图片，其中如果type为web时，表示左边的网页图片；如果type为video时，表示视频的预览图 multimedia.media.text String 否 该条item的多媒体的文本，其中如果type为web时，表示网页的描述性文字 multimedia.media.url String 否 该条item的多媒体的链接，其中如果type为web时，表示左边的网页链接；如果type为video时，表示视频的链接 inline String 否 该条item的内嵌item，即可能包含以上所有字段或者对象或者数组，类似微博中的转发 translation JSON对象 否 该条item的翻译部分，最多只有title、text和content的翻译 translation.title String 否 该条item的翻译部分，针对标题的翻译 translation.text String 否 该条item的翻译部分，针对文本的翻译 content String 否 该条item的内容部分，比如文章的具体长篇内容 like JSON对象 否 该条item对应的点赞/热度的描述对象 like.rating float 否 表达点赞/热度的程度等级，由后台根据某种算法生成 like.number int 否 点赞/热度的实际数目 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;23235235235rt32t2&quot; &#125;, &#123; &quot;uid&quot;: &quot;23235235235rt32t2&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 修改item 地址：https://api.xxx.com/path/xxx/v1/items{uid} 请求头1234PATCH /path/xxx/v1/items/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot;, &quot;url&quot;: &quot;https://m.weibo.cn/status/4286763108972753&quot;, &quot;uid&quot;: &quot;4286763108972753&quot; &#125;, &quot;tags&quot;: [ &quot;32t23t23sdvsdbse324h34h&quot;, &quot;32t23t23sdvsdbse324h34h&quot; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0, &quot;content&quot;: &quot;&lt;p&gt;……&lt;p&gt;&quot;, &quot;like&quot;: &#123; &quot;rating&quot;: 3.5, &quot;number&quot;: 200 &#125;&#125; params 类型 是否必须 描述 uid String 是 该条资讯的唯一标示，可用于获取详情 title String 否 该条item的标题 text String 否 该条item的文本内容，如果是文章，则对应的是文章的摘要，如果是其他快讯，则对应快讯内容或者快讯摘要 type String 否 该条item的对应的类型： flash表示快讯 article表示文章 notice表示交易所公告之类 transaction大额交易 social表示社交类的，如微博和推特抓取的数据 detail表示带详情的数据 other表示预留其他类型 grade int 否 该条item消息分级中的等级，数值越大等级越高，大于等于2就要在界面上设置出来，暂时定义顶部颜色为红色，小于3的就不需要改变颜色 source JSON对象 是 该条item的来源JSON描述对象 source.uid String 是 该条item的来源对象的uid source.name String 是 该条item的来源名称，例如：微博XX大V，金色财经 source.type String 是 该条item的来源的类型，对应值如下： weibo表示抓取的微博内容 twitter表示推特儿 jinsecaijing表示金色财经的内容 bishijie表示比世界的内容 bixiang表示币响的内容 bikuaibao表示币快报的内容 liandede表示链得得的内容 babite表示巴比特的内容 huoxingcaijing表示火星财经的内容 notice表示公告的内容 还有其他大额交易的稍后定义 source.avatar String 否 该条item的来源的头像 author String 否 该条item的作者对象 author.name String 否 该条item的作者的名字（昵称） author.avatar String 否 该条item的作者的头像 time String 是 秒时间戳 url String 否 该条item的web连接，后期会生成一个liandao.ai的域名下的链接，暂时可不考虑 tags JSON数组 是 所属的tag multimedia JSON对象 否 该条item的多媒体对象，主要指网页、图片和视频3种 multimedia.type String 是 该条item的多媒体类型 值为web表示网页，此时media数组长度为1 值为image表示图片，此时media数组长度为1-9，并且取media对象中的image字段 值为video表示视频，此时media数组长度为1 multimedia.media JSON数组 是 该条item的多媒体对象，主要指网页、图片和视频 multimedia.media.image String 否 该条item的多媒体所对应的图片，其中如果type为web时，表示左边的网页图片；如果type为video时，表示视频的预览图 multimedia.media.text String 否 该条item的多媒体的文本，其中如果type为web时，表示网页的描述性文字 multimedia.media.url String 否 该条item的多媒体的链接，其中如果type为web时，表示左边的网页链接；如果type为video时，表示视频的链接 inline String 否 该条item的内嵌item，即可能包含以上所有字段或者对象或者数组，类似微博中的转发 translation JSON对象 否 该条item的翻译部分，最多只有title、text和content的翻译 translation.title String 否 该条item的翻译部分，针对标题的翻译 translation.text String 否 该条item的翻译部分，针对文本的翻译 content String 否 该条item的内容部分，比如文章的具体长篇内容 like JSON对象 否 该条item对应的点赞/热度的描述对象 like.rating float 否 表达点赞/热度的程度等级，由后台根据某种算法生成 like.number int 否 点赞/热度的实际数目 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23235235235rt32t2&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 删除item 地址：https://api.xxx.com/path/xxx/v1/items{uid} 请求头1234DELETE /path/xxx/v1/items/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23235235235rt32t2&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 App更新器考虑到我们的App是未上应用商店的，只能靠自身提示更新，因此需要一个完善的可视化的后台来管理。 获取更新历史记录 地址：https://api.xxx.com/path/xxx/v1/updaters 请求头1234GET /xxx/v1/updatersAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1?type=1 params 类型 是否必须 描述 type String 否 type表示不同平台1表示获取iOS更新器信息2表示获取安卓更新器信息 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235252rt23t23t23t&quot;, &quot;time&quot;: &quot;2018-04-28 23:57:12&quot;, &quot;size&quot;: &quot;50M&quot;, &quot;fileName&quot;: &quot;xxx.apk&quot;, &quot;force&quot;: true, &quot;versionCode&quot;: 1, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;link&quot;: &quot;https://miaoyoujuan.com/both.apk&quot;, &quot;description&quot;: &quot;摩尔钱包&quot;, &quot;title&quot;: &quot;摩尔钱包&quot;, &quot;ignore&quot;: true, &quot;md&quot;: &quot;234T243T2T&quot;, &quot;enable&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;235252rt23t23t23t&quot;, &quot;time&quot;: &quot;2018-04-28 23:57:12&quot;, &quot;size&quot;: &quot;50M&quot;, &quot;fileName&quot;: &quot;xxx.apk&quot;, &quot;force&quot;: true, &quot;versionCode&quot;: 1, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;link&quot;: &quot;https://miaoyoujuan.com/both.apk&quot;, &quot;description&quot;: &quot;摩尔钱包&quot;, &quot;title&quot;: &quot;摩尔钱包&quot;, &quot;ignore&quot;: true, &quot;md&quot;: &quot;234T243T2T&quot;, &quot;enable&quot;: false &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 该条更新记录的唯一标识 data.time String 是 该条更新记录的上传时间 data.size String 是 下载包的大小 data.fileName String 是 下载的文件的名称 data.force boolean 是 是否强制升值 data.versionCode int 是 针对安卓版本的版本号，安卓是根据整个版本号比大小来比较版本的新旧 data.versionName String 是 版本的名称，比如1.0.2 data.link String 是 下载连接地址 data.description String 是 显示在界面上的更新日志 data.title String 是 显示在界面上的更新标题 data.ignore boolean 是 是否可以忽略该版本 data.md String 是 考虑到包有可能被篡改，应该针对下载的包进行检测。 data.enable boolean 否 该条记录是否生效 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 新增更新器 地址：https://api.xxx.com/path/xxx/v1/updaters 请求头1234POST /xxx/v1/updatersAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1234567891011121314&#123; &quot;size&quot;: &quot;50M&quot;, &quot;fileName&quot;: &quot;xxx.apk&quot;, &quot;force&quot;: true, &quot;versionCode&quot;: 1, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;link&quot;: &quot;https://miaoyoujuan.com/both.apk&quot;, &quot;description&quot;: &quot;摩尔钱包&quot;, &quot;title&quot;: &quot;摩尔钱包&quot;, &quot;ignore&quot;: true, &quot;md&quot;: &quot;234T243T2T&quot;, &quot;enable&quot;: true, &quot;type&quot;:&quot;1&quot;&#125; params 类型 是否必要 描述 size String 是 下载包的大小 fileName String 是 下载的文件的名称 force boolean 是 是否强制升值 versionCode int 是 针对安卓版本的版本号，安卓是根据整个版本号比大小来比较版本的新旧 versionName String 是 版本的名称，比如1.0.2 link String 是 下载连接地址 description String 是 显示在界面上的更新日志 title String 是 显示在界面上的更新标题 ignore boolean 是 是否可以忽略该版本 md String 是 考虑到包有可能被篡改，应该针对下载的包进行检测。 enable boolean 否 该条记录是否生效 type boolean 否 1表示iOS，2表示安卓 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;235252rt23t23t23t&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 该条更新记录的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 修改更新器 地址：https://api.xxx.com/path/xxx/v1/updaters/{uid} 请求头1234POST /xxx/v1/updaters/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5 参数1234567891011121314&#123; &quot;size&quot;: &quot;50M&quot;, &quot;fileName&quot;: &quot;xxx.apk&quot;, &quot;force&quot;: true, &quot;versionCode&quot;: 1, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;link&quot;: &quot;https://miaoyoujuan.com/both.apk&quot;, &quot;description&quot;: &quot;摩尔钱包&quot;, &quot;title&quot;: &quot;摩尔钱包&quot;, &quot;ignore&quot;: true, &quot;md&quot;: &quot;234T243T2T&quot;, &quot;enable&quot;: true, &quot;type&quot;:&quot;1&quot;&#125; params 类型 是否必要 描述 size String 是 下载包的大小 fileName String 是 下载的文件的名称 force boolean 是 是否强制升值 versionCode int 是 针对安卓版本的版本号，安卓是根据整个版本号比大小来比较版本的新旧 versionName String 是 版本的名称，比如1.0.2 link String 是 下载连接地址 description String 是 显示在界面上的更新日志 title String 是 显示在界面上的更新标题 ignore boolean 是 是否可以忽略该版本 md String 是 考虑到包有可能被篡改，应该针对下载的包进行检测。 enable boolean 否 该条记录是否生效 type boolean 否 1表示iOS，2表示安卓 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;235252rt23t23t23t&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 该条更新记录的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了]]></content>
  </entry>
  <entry>
    <title><![CDATA[镰刀备忘录]]></title>
    <url>%2F%E9%95%B0%E5%88%80%E9%A1%B9%E7%9B%AE%2F%E9%95%B0%E5%88%80%E5%A4%87%E5%BF%98%E5%BD%95%2F%E9%95%B0%E5%88%80%E5%A4%87%E5%BF%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[镰刀备忘录 Author：Leguang E-Mail：langmanleguang@qq.com 2018.10.09问题和建议经过十一长假的初步使用，遇到一些问题，我们罗列出来如下 编号 问题/建议 备注 1 公告这一部分是要改一下，分有详情和无详情，进行区别对待。 爬虫：爬虫抓取后解析时把带详情的当无详情解析，把带有详情的当文章解析。 前端：与之前不一样type字段可以用不管，前端不使用，前端只根据是否有url字段或者url是否为空字符串来判断是不是有详情，可点击进去。 后台：url后台这边拼接的，之所有让后台来拼接是怕域名会变，因此后台可以根据同一个item的uid查看是否有content对象来判断是否有详情来拼接url告诉前端，而不是每一个item都固定有 2 监控到的大额交易要提高优先级到grade=2 3 由于我们规定item中的type为social和notice才有来源，所以导致文章类型看不到来源，而公我们的公告是当做type为article的，因此也看不到来源，这里按上面提到的意见修改即可 4 没有个人中心用户信息展示页面，不知道登录的哪个手机号 由于我有几个手机号码，突然我想在另一个手机上登录，但是我不知道我已经登录了哪个，也查不到我已经登录了哪个，因此用户的信息的简单展示是有必要的，起码用户名要展示出来 5 没有更多定制化的、强大的功能，无法区别于其他咨询类APP 6 个人中心改侧滑菜单，多突出账号信息 7 推送安卓和苹果都有推不到的情况，需要排查一下 8 推送策略暂时是根据时间挤压的方式来推送，得想一个比较智能一点的方式筛选推送 9 镰刀的身份定位，建议包装成利用我方SDK开发而成的典型代表商，或者是我们孵化的 10 推送没有分优先级。大部分推送内容没有实际意义，是一些不痛不痒的快讯。 11 通过通知栏推送的点进去App，很难定位到该快讯的具体内容。 12 推送韩文的快讯，而且没有快讯没有对韩文做没有做国际化。 13 推送延迟，会推过过期的行情快讯 14 交易所公告没有显示来源，而且改文章连接是空内容 15 没有区分广告快讯，把金色财经的广告快讯也给爬出来展示了。 任务同时需要完成的任务还有 编号 任务 备注 1 后台，包括爬虫的管理+自己发item 3 新增一个热门tab 4 item的即时性，保证即时和准确 内容识别后标高等级 5 推送及时性排查 第三方推送+MQ 6 钱包的国际化 7 反映射 主网映射到ERC20 任务分配根据上述内容，暂时做出如下安排，后续陆续增加 爬虫系统 由于非小号的接口缺陷，导致部分官网的公告文章没有详情内容（可能是某些官网改版，他们的爬虫没跟进），这部分公告要过滤掉，同时将item的type改回notice（现在是article），将公告的title设为item的text。 过滤掉金色财经等平台的广告 由于我们现在的推送策略比较简陋，我们希望能不断优化，暂时根据消息来源来标注消息的等级来解决部分推送问题，策略如下 我们将item的重要性用一个int类型的grade字段来表示，等级越高，绝对值值越大，消息越重要。根据推送策略来看，每一个item分为不推送、有限推送、无限推送，因此并作出如下规则定义： 注：标记是指界面上的特殊处理，暂时只是标题设置为主题色。 范围值 描述 备注 grade&lt;=-20 标记，无限推送 标题设置为主题色，推送条数不受限制 -20&lt;grade&lt;=-10 标记，有限推送 标题设置为主题色，推送条数有限制 -10&lt;grade&lt;0 标记，不推送 标题设置为主题色 0&lt;=grade&lt;10 不标记，不推送 10&lt;=grade&lt;20 不标记，有限推送 推送条数有限制 grade&gt;=20 不标记，无限推送 推送条数不受限制 因此做出如下调整： grade默认值为0。 将所有币种的大额交易的item的grade字段暂设为-20（即标记无限推送）。 将所有币种的项目方的社交账号发布消息的item的grade字段暂设为10（即标记无限推送）。 金色财经、币世界等权重高的或者媒体平台已经提供标红的字段的item默认grade设置为-2（即标记不推送），标题带有某币种关键字的grade设置为-10（即标记有限推送），如果没有标红字段，但是标题带有某币种关键字的grade设置为10（即不标记有限推送）。 考虑到BTC/ETH/EOS这三大币种的公告消息蛮多，其他币种的交易所公告难得有一条，将BTC/ETH/EOS等公告设置为0（即不标记不推送），其他币种的公告grade设置为20（即不标记无限推送）。 未来运营人员发布的item统一标记为20或者-20。 后台 url后台这边拼接的，之所有让后台来拼接是怕域名会变，因此后台可以根据同一个item的uid查看是否有content对象来判断是否有详情来拼接url告诉前端，而不是每一个item都固定有一个url，这样前端也就可以根据这个字段来判断是否有详情，是否可以点进下一级页面。 考虑到liandao.ai的域名是国外的，在查看详情的时候速度有点慢，将item中的url从之前的 liandao.ai域名改成 **l.imfmf.com** 推送时，在原来的基础上，再加一个过滤，即grade&lt;=-10或者grade&gt;=10（grade的绝对值&gt;=10）的才推送，同时对照推送策略图看是否满足要求。 对于无tag标签的item，只要这个item的grade&lt;=-20或者grade&gt;=20（即无限推送），推送时是推所有用户，不用考虑用户的属性。 移动端 将之前grade&gt;2的item的标题显示为主题色改为grade&lt;0 根据是否有url字段或者url字段是否为空来判断是否在text尾部添加“查看详情”，是否可以点进下一级页面。有url字段且不为空，则表示有详情。 将现在的左上角的个人中心导航点击跳转页面设计成侧滑菜单，例如： 前端 详情页web的优化，响应速度不理想，需要将代码换到国内域名内，并放到国内服务商。另给出合理的其他优化建议。 2018.10.15经过会议讨论，我们对镰刀App进化方向进行战略调整，去掉《快讯》板块，增加人工干预的《热门》板块，这里“热门”是指通过我们的运营人员借助半自动化的后台系统，对筛选出来的一系列item稍作修改编辑后放到热门板块，同时考虑不要重复推送。 任务分配爬虫系统 新增一个专属于扩展item的数据库，用于放置对item扩展的数据，通过相同的 _id 进行关联。]]></content>
  </entry>
  <entry>
    <title><![CDATA[镰刀项目方案及其接口]]></title>
    <url>%2F%E9%95%B0%E5%88%80%E9%A1%B9%E7%9B%AE%2F%E9%95%B0%E5%88%80%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E9%95%B0%E5%88%80%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[镰刀项目方案及其接口 Author：Leguang E-Mail：langmanleguang@qq.com 资源 原型图：http://doc.un75.com:5934/prototype/index.html 设计稿：http://doc.un75.com:5934/design/index.html HTTP部分业务简介《镰刀》项目是团队对摩尔的一次应用尝试，本质上是希望做成一个集智能、快速和咨询于一体的工具，用户以订阅–发布模式获取我们精心准备和推荐的信息。之所以叫镰刀是寓意其快速锋利的收割市场。由此我们产生了一些概念，如下图所示： 名称 关系 描述 tag 用户订阅多个tag 用户可以用“订阅”这个动作与tag产生联系，用户可以按照一定的规则，通过消耗MOL积分订阅多个tag，每一个tag作为一个事物的分类，类似新闻中的分类 item 一个tag对应多个item 与tag相关的事物叫item，一个tag对应的是多个item，用户看到的就是这一系列的item表达的内容，类似一条条news 业务模块总体功能模块划分如下图所示： 项目接口预览 站在数据的角度，若想满足各大模块的功能需求，可以将接口分成如下几类： base url：https://api.xxx.com/path/ 分类 接口地址 参数 短信SMS https://api.xxx.com/path/v1/sms phone，countryCode等 登录login https://api.xxx.com/path/v1/login countryCode、phone等 注销（退出登录）logout https://api.xxx.com/path/v1/logout 刷新Token https://api.xxx.com/path/v1/tokens 积分points https://api.xxx.com/path/sickle/v1/points uid等 积分记录points/records https://api.xxx.com/path/sickle/v1/points/records uid等 标签（或关键字）tags https://api.xxx.com/path/sickle/v1/tags top，hot等 标签项items https://api.xxx.com/path/sickle/v1/items tag，top，hot等 邀请码sickle/codes https://api.xxx.com/path/sickle/v1/codes type等 海报sickle/poster https://api.xxx.com/path/sickle/v1/poster 搜索sickle/search https://api.xxx.com/path/sickle/v1/search tag，keyword等 订阅sickle/subscriptions https://api.xxx.com/path/sickle/v1/subscriptions tag，keyword等 签到sickle/signs https://api.xxx.com/path/sickle/v1/signs 订阅规则sickle/subscriptions/regulations https://api.xxx.com/path/sickle/v1/subscriptions/regulations 推送设置sickle/settings/push https://api.xxx.com/path/sickle/v1/settings/push 个人中心sickle/mine https://api.xxx.com/path/sickle/v1/mine 预注册preregister https://api.xxx.com/path/sickle/v1/preregister phone、code等 邀请统计invitation https://api.xxx.com/path/sickle/v1/invitation 公共服务初始化initialize https://api.xxx.com/path/user/v1/initialize 设备、系统、ROM等信息 镰刀项目初始化initialize https://api.xxx.com/path/sickle/v1/initialize 短信SMS该接口用于向指定手机发送短信验证码，由于该接口是暴露在外的，因此需要尽量做到严格限制，比如一个手机号码一天只能发送多少条，一个IP地址最多只允许多少个手机号码发送短信。 地址：https://api.xxx.com/path/v1/sms 请求头1234567POST /path/v1/smsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1234&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然发成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;F2W34T23T23T23T23T&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data Json对象 是 同上 data.uid String 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少区号、缺少手机号码等 XXX int 否 参数错误：区号错误、手机号码错误、格式错误等 XXX int 否 短信发送过于频繁，请稍后再试 XXX int 否 该手机号码暂不支持 注册/登录（获取token+用户信息）该接口用于注册/登陆获取token和部分用户信息，由于我们暂时定义的是通过一键登录或者短信来注册+登录，因此没有密码这些。其中注册和登录合并成这一个接口，因此需要后台返回时告诉前端，这次登录是否是第一次（即注册），这样前端就可以根据这个字段来判断是否调用后面的申请注册奖励接口，当然你每次都申请注册奖励也可以，后台会自行过滤掉重复申请。 一键登录方式 地址：https://api.xxx.com/path/v1/login 请求头1234567POST /path/v1/loginAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数12345678910&#123; "accessToken": "eyJvdCI6IkNVQ0MiLCJzZXEiOiI0MDI4ODZjMjY1YjFkZDlhMDE2NWM4N2YyMTRmMjViZiIsImZha2VNb2JpbGUiOiIxMzAqKioqNzcyOSIsInBhdHRlcm4iOjAsIm5ldCI6MSwiYWNjZXNzQ29kZSI6IntcImRlc2NcIjpcIuWPluWPt+Wksei0pVwiLFwib2JqXCI6e1wibWFwXCI6e1wiY29kZVwiOjMwMTEsXCJlcnJtc2dcIjpcIuacquafpeivouWIsOaVsOaNrlwifX0sXCJyZXN1bHRcIjoxLFwic2VxXCI6XCI0MDI4ODZjMjY1YjFkZDlhMDE2NWM4N2YyMTRmMjViZlwifSIsInZlcmlmeUNvZGUiOiIyYzkwOGE4MTYxNzQ1NGE3MDE2Mjc3ZWUyMGM1NWM0MSIsIm9zIjowLCJzZXJ2aWNlVHlwZSI6MCwiaXMiOiI0NjAwMTg5OTQwMTY3OTciLCJpYyI6Ijg5ODYwMTE2ODUxMTE4OTE1NDY5In0=", "appId": "Bn9M2Pc2", "randoms": "8ee542b4ccea45bd8f8721be6c08a6af", "sign": "pf+Qsf+8ow94lDbsSbj1IckGLII=", "telecom": "CUCC", "timestamp": "1536667103000", "type": "1keylogin", "version": "2.0.0"&#125; params 类型 是否必要 描述 type String 是 用于描述是什么登陆或者注册方式，值为1keylogin表示用的是运营商的一键登录，值为sms表示短信登录，值为password表示密码登录 其他 String 否 我也不知道是什么意思，由服务商的SDK返回 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;3811c92206b0436693c4c4d25&quot;, &quot;register&quot;: &#123; &quot;time&quot;: &quot;2018-05-26 12:25:55&quot;, &quot;app&quot;: &quot;sickle&quot; &#125;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.token String 是 token值 data.register JSON对象 否 该次登录如果是第一次，即表达注册的时候，则该对象不为空 data.register.time String 否 注册的时间 data.register.app String 否 注册的应用 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少type、缺少sign等 XXX int 否 参数错误：type错误、sign错误、格式错误等 XXX int 否 注册失败：与第一次注册相关 XXX int 否 登录失败：与登录相关 XXX int 否 账号异常：可能被封禁了 短信登录方式当一键登录方式失败的时候，就改用该方式 地址：https://api.xxx.com/path/v1/login 请求头1234567POST /path/v1/loginAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1234567&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;, &quot;password&quot;: &quot;111111&quot;, &quot;sms&quot;: &quot;348543&quot;, &quot;type&quot;: &quot;sms&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 password String 否 密码 sms String 否 验证码 type String 是 用于描述是什么登陆或者注册方式，值为1keylogin表示用的是运营商的一键登录，值为sms表示短信登录，值为password表示密码登录 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;3811c92206b0436693c4c4d25&quot;, &quot;register&quot;: &#123; &quot;time&quot;: &quot;2018-05-26 12:25:55&quot;, &quot;app&quot;: &quot;sickle&quot; &#125;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.token String 是 token值 data.register JSON对象 否 该次登录如果是第一次，即表达注册的时候，则该对象不为空 data.register.time String 否 注册的时间 data.register.app String 否 注册的应用 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少countryCode、缺少phone等 XXX int 否 参数错误：countryCode错误、phone错误、格式错误等 XXX int 否 注册失败：与第一次注册相关 XXX int 否 登录失败：与登录相关 XXX int 否 账号异常：可能被封禁了 退出登录（使token失效）该接口是退出登录状态,让token立马失效。 地址：https://api.xxx.com/path/v1/logout 请求头1234567DELETE /path/v1/logoutAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 刷新token对token的期限进行刷新等 地址：https://api.xxx.com/path/v1/tokens 请求头1234567PUT /path/v1/tokensAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数123&#123; &quot;token&quot;: &quot;token_3523235&quot;&#125; key 类型 是否必要 描述 token String 是 用户现在使用的token 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: &quot;3000&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 随便写，也可以作为服务器给前端固定提示的内容 code int 是 与响应头里的Status一样 data.token String 是 获取的token data.expires String 是 期限 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 会员等级暂时的会员等级是与邀请人数挂钩的，不同的等级享受同时订阅的tag数不同，每一个等级对应着一个邀请累积人数。 地址：https://api.xxx.com/path/sickle/v1/grade 请求头1234567GET /path/sickle/v1/gradeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314151617&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;grade&quot;: &quot;0&quot;, &quot;name&quot;: &quot;青铜镰刀&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;description&quot;: &quot;可同时订阅10关键词&quot;, &quot;next&quot;: &#123; &quot;condition&quot;: &quot;需邀请 10 好友&quot;, &quot;grade&quot;: &quot;1&quot;, &quot;name&quot;: &quot;黄金镰刀&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;description&quot;: &quot;可同时订阅12关键词&quot; &#125; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.grade String 是 对应等级 data.name String 是 对应等级的名称 data.image String 是 对应等级的图片url data.description String 是 对应的等级的描述 data.next JSON对象 是 下一等级的对应的描述 data.next.condition String 是 升级条件/要求 data.next.grade String 是 对应等级 data.next.name String 是 对应等级的名称 data.next.image String 是 对应等级的图片url data.next.description String 是 对应的等级的描述 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 积分points对积分的有效总额和历史累积进行查询、充值等。 获取积分信息对于某些展示用户积分余额的场景可以使用此接口。 地址：https://api.xxx.com/path/sickle/v1/points 请求头1234567GET /path/sickle/v1/pointsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;accumulation&quot;: &quot;11124525&quot;, &quot;balance&quot;: &quot;95885&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.accumulation String 是 该账户历史累积收益，非raw类型的值 data.balance String 是 该账户上可用于提现的收益，非raw类型的值 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 新增积分（请求奖励/充值等）在镰刀项目中，如果是第一次登陆，后台会在返回的字段中多一个表达注册的字段，前端就可以根据这个字段判断是否是新注册，如果是新注册，则请求该接口申请注册奖励，后台会提出重复请求。 地址：https://api.xxx.com/path/sickle/v1/points 请求头1234567POST /path/sickle/v1/pointsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数123&#123; &quot;type&quot;: &quot;register&quot;&#125; 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;amount&quot;: &quot;100&quot;, &quot;currency&quot;: &quot;MOL&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.uid String 是 请求积分的该条记录的uid data.amount String 是 请求积分的结果，积分变化值，正表示增加，负表示消费减少 data.currency String 是 单位写死MOL，前端只要直接用就可以 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、type等 XXX int 否 参数错误：token、type错误等 XXX int 否 账号异常：可能被封禁了 XXX int 否 已申请过奖励：每一个用户只有一次注册奖励 积分记录points/records这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口查询收益记录。 地址：https://api.xxx.com/path/sickle/v1/points/records 请求头1234567GET /path/sickle/v1/points/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?last=2018-07-07 17:52&amp;keyword=热点&amp;sort=des params 类型 是否必须 描述 last String 否 由于该接口顺义那边不好按page和pageSize的方式实现分页，因此使用last作为上一次请求的最后一行的标记，在第1页，也就是第一次请求的时候，这个last可以不传，同时在返回的字段中有一个last，在请求第2页时，将第1页返回的last字段带过去就可以了 keyword String 否 同上 sort String 否 同上 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该JSON对象承载 data.uid String 是 该记录主键 data.title String 是 该记录标题名称 data.description String 是 该记录描述 data.amount String 是 该记录金额 data.image String 是 该记录图标 data.currency String 是 该记录币种 data.time String 是 该记录生成的时间 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 分类types获取item的分类的接口，对应主页中顶部的分类列表。与token无关。 地址：https://api.xxx.com/path/sickle/v1/types 请求头123456GET path/sickle/v1/typesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1?keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567891011121314&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;key&quot;: &quot;订阅&quot;, &quot;value&quot;: &quot;subscribe&quot; &#125;, &#123; &quot;key&quot;: &quot;热门&quot;, &quot;value&quot;: &quot;hot&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 key String 是 该分类的名称 value String 是 该分类的值，用于获取该分类的items时参的type参数 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 标签tags镰刀项目中的标签是一个抽象概念，是对内容的一个抽象分类，未来运营的时候可以不断的添加关键字等标签来丰富内容，该接口是针对标签操作的接口。 获取tag列表 地址：https://api.xxx.com/path/sickle/v1/tags 请求头1234567GET /sickle/v1/tagsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?type=hot&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 type String 否 不传表示默认，默认表示返回type为coin的所有tag（按symbol首字母排序）值为hot表示热门tags（可配置且过滤掉已订阅的）值为subscribe表示订阅中的推荐tags（可配置且过滤掉已订阅的）值为news表示快讯中的推荐tags（可配置且过滤掉已订阅的）值为register表示用户注册时的推荐tags（可配置顺序） keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;skus&quot;: [ &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;5MOL/周&quot;, &quot;period&quot;: &quot;周&quot; &#125;, &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;15MOL/月&quot;, &quot;period&quot;: &quot;月&quot; &#125;, &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;150&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;150MOL/周&quot;, &quot;period&quot;: &quot;年&quot; &#125; ], &quot;market&quot;: &#123; &quot;cny&quot;: &#123; &quot;price&quot;: &quot;46319.39725273&quot;, &quot;cap&quot;: &quot;609070186671&quot;, &quot;change1h&quot;: &quot;-0.11&quot;, &quot;change24h&quot;: &quot;1.57&quot;, &quot;change7d&quot;: &quot;-12.77&quot; &#125;, &quot;usd&quot;: &#123; &quot;price&quot;: &quot;6319.39725273&quot;, &quot;cap&quot;: &quot;109070186671&quot;, &quot;change1h&quot;: &quot;-0.11&quot;, &quot;change24h&quot;: &quot;1.57&quot;, &quot;change7d&quot;: &quot;-12.77&quot; &#125;, &quot;turnover&quot;: &quot;1755221&quot;, &quot;circulation&quot;: &quot;21000000&quot;, &quot;rank&quot;: &quot;1&quot; &#125; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 该tag的唯一标识 data.name String 是 该tag的全称 data.symbol String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.image String 是 该tag的图标 data.description String 是 该tag的描述 data.type String 是 该tag的类型，暂时只有coin类型默认没有表达自定义tag类型 data.skus JSON数组 是 该tag的套餐描述 data.skus.uid String 是 该tag的套餐的uid data.skus.price String 是 该tag的套餐的具体价格 data.skus.currency String 是 该tag的套餐的价格单位 data.skus.unitPrice String 是 该tag的套餐的单价描述 data.skus.period String 是 该tag的套餐的周期单位 data.market JSON对象 是 该tag的行情对象，当type为coin时才有这个字段 data.market.circulation String 是 该tag所代表的币的总发行量 data.market.turnover String 是 该tag所代表的币的流通量 data.market.rank String 是 该tag的排名，当type为coin时才有这个字段 data.market.cny JSON对象 是 该tag所代表的币的人民币价格行情对象 data.market.cny.price JSON对象 是 该tag所代表的币的人民币价格行情对象 data.market.cny.cap JSON对象 是 该tag所代表的币的人民币价格总市值 data.market.cny.change1h JSON对象 是 该tag所代表的币的人民币价格1小时涨跌幅百分比 data.market.cny.change24h JSON对象 是 该tag所代表的币的人民币价格24小时涨跌幅百分比 data.market.cny.change7d JSON对象 是 该tag所代表的币的人民币价格7天小时涨跌幅百分比 data.market.usd JSON对象 是 该tag所代表的币的美元价格行情对象 data.market.cny.price JSON对象 是 该tag所代表的币的美元价格行情对象 data.market.cny.cap JSON对象 是 该tag所代表的币的美元价格总市值 data.market.cny.change1h JSON对象 是 该tag所代表的币的美元价格1小时涨跌幅百分比 data.market.cny.change24h JSON对象 是 该tag所代表的币的美元价格24小时涨跌幅百分比 data.market.cny.change7d JSON对象 是 该tag所代表的币的美元价格7天小时涨跌幅百分比 data.parents JSON数组 否 该tag所关联的父tags，但是当前版本中暂时不考虑 data.children JSON数组 否 该tag所关联的子tags，但是当前版本中暂时不考虑 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 获取tag详情 地址：https://api.xxx.com/path/sickle/v1/tags/{uid} 请求头1234567GET /sickle/v1/tags/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;name&quot;: &quot;Bitcoin&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;description&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;skus&quot;: [ &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;5MOL/周&quot;, &quot;period&quot;: &quot;周&quot; &#125;, &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;15MOL/月&quot;, &quot;period&quot;: &quot;月&quot; &#125;, &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;150&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;150MOL/周&quot;, &quot;period&quot;: &quot;年&quot; &#125; ], &quot;market&quot;: &#123; &quot;cny&quot;: &#123; &quot;price&quot;: &quot;46319.39725273&quot;, &quot;cap&quot;: &quot;609070186671&quot;, &quot;change1h&quot;: &quot;-0.11&quot;, &quot;change24h&quot;: &quot;1.57&quot;, &quot;change7d&quot;: &quot;-12.77&quot; &#125;, &quot;usd&quot;: &#123; &quot;price&quot;: &quot;6319.39725273&quot;, &quot;cap&quot;: &quot;109070186671&quot;, &quot;change1h&quot;: &quot;-0.11&quot;, &quot;change24h&quot;: &quot;1.57&quot;, &quot;change7d&quot;: &quot;-12.77&quot; &#125;, &quot;turnover&quot;: &quot;1755221&quot;, &quot;circulation&quot;: &quot;21000000&quot;, &quot;rank&quot;: &quot;1&quot; &#125;, &quot;subscription&quot;: &#123; &quot;uid&quot;: &quot;34t34t34t34t&quot;, &quot;optionKey&quot;: &quot;2&quot;, &quot;optionValue&quot;: &quot;订阅+推送&quot;, &quot;renew&quot;: true, &quot;deadline&quot;: &quot;2018-09-11 12:23:55&quot;, &quot;remainder&quot;: 100, &quot;expiry&quot;: &quot;到期时间：2018-09-11 12:23:55&quot;, &quot;sku&quot;: &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;5MOL/周&quot;, &quot;period&quot;: &quot;周&quot; &#125;, &quot;options&quot;: [ &#123; &quot;key&quot;: &quot;1&quot;, &quot;value&quot;: &quot;仅订阅&quot; &#125;, &#123; &quot;key&quot;: &quot;2&quot;, &quot;value&quot;: &quot;订阅+推送&quot; &#125;, &#123; &quot;key&quot;: &quot;4&quot;, &quot;value&quot;: &quot;取消订阅&quot; &#125; ] &#125; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 该tag的唯一标识 data.name String 是 该tag的全称 data.symbol String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.image String 是 该tag的图标 data.description String 否 该tag的描述 data.type String 是 该tag的类型，暂时只有coin类型默认没有表达自定义tag类型 data.skus JSON数组 是 该tag的套餐描述 data.skus.uid String 是 该tag的套餐的uid data.skus.price String 是 该tag的套餐的具体价格 data.skus.currency String 是 该tag的套餐的价格单位 data.skus.unitPrice String 是 该tag的套餐的单价描述 data.skus.period String 是 该tag的套餐的周期单位 data.market JSON对象 是 该tag的行情对象，当type为coin时才有这个字段 data.market.circulation String 是 该tag所代表的币的总发行量 data.market.turnover String 是 该tag所代表的币的流通量 data.market.rank String 是 该tag的排名，当type为coin时才有这个字段 data.market.cny JSON对象 是 该tag所代表的币的人民币价格行情对象 data.market.cny.price JSON对象 是 该tag所代表的币的人民币价格行情对象 data.market.cny.cap JSON对象 是 该tag所代表的币的人民币价格总市值 data.market.cny.change1h JSON对象 是 该tag所代表的币的人民币价格1小时涨跌幅百分比 data.market.cny.change24h JSON对象 是 该tag所代表的币的人民币价格24小时涨跌幅百分比 data.market.cny.change7d JSON对象 是 该tag所代表的币的人民币价格7天小时涨跌幅百分比 data.market.usd JSON对象 是 该tag所代表的币的美元价格行情对象 data.market.cny.price JSON对象 是 该tag所代表的币的美元价格行情对象 data.market.cny.cap JSON对象 是 该tag所代表的币的美元价格总市值 data.market.cny.change1h JSON对象 是 该tag所代表的币的美元价格1小时涨跌幅百分比 data.market.cny.change24h JSON对象 是 该tag所代表的币的美元价格24小时涨跌幅百分比 data.market.cny.change7d JSON对象 是 该tag所代表的币的美元价格7天小时涨跌幅百分比 data.parents JSON数组 否 该tag所关联的父tags，但是当前版本中暂时不考虑 data.children JSON数组 否 该tag所关联的子tags，但是当前版本中暂时不考虑 data.subscription JSON对象 否 当前用户与tag的订阅状态，如果该对象为空，则表明当前用户未订阅该tag，如果有该对象，则表明该tag已经被当前用户订阅，具体参见sickle/v1/subscriptions接口 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 标签item（所属tag的消息/新闻）我们把镰刀项目中的每一条消息抽象的当做一个item，即每一个tag所对应的内容，相当于新闻分类中的news。该接口是对item的操作接口 获取item列表 地址：https://api.xxx.com/path/sickle/v1/items 请求头1234567GET /path/sickle/v1/itemsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数123?tag=t2t24t24t2t24&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20或者?type=subscribe&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 tag String 否 获取tag所属的内容，对应上文tags接口中的uid，不传或者传空字符表示默认值，默认返回所有item type String 否 不传或者传空标识默认值，默认返回所有itemtype=subscribe：表示获取订阅列表type=hot：表示获取热门列表 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: [ &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;tags&quot;: [ &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;, &#123; &quot;name&quot;: &quot;EOS&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0, &quot;like&quot;: &#123; &quot;rating&quot;: 3.5, &quot;number&quot;: 200 &#125; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data JSON数组 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 data.title String 否 该条item的标题 data.text String 否 该条item的文本内容，如果是文章，则对应的是文章的摘要，如果是其他快讯，则对应快讯内容或者快讯摘要 data.type String 否 该条item的对应的类型：flash表示快讯article表示文章notice表示交易所公告之类transaction大额交易social表示社交类的，如微博和推特抓取的数据detail表示带详情的数据other表示预留其他类型 data.grade int 否 该条item消息分级中的等级，数值越大等级越高，大于等于2就要在界面上设置出来，暂时定义顶部颜色为红色，小于3的就不需要改变颜色 data.source JSON对象 是 该条item的来源JSON描述对象 data.source.uid String 是 该条item的来源对象的uid data.source.name String 是 该条item的来源名称，例如：微博XX大V，金色财经 data.source.type String 是 该条item的来源的类型，对应值如下：weibo表示抓取的微博内容twitter表示推特儿jinsecaijing表示金色财经的内容bishijie表示比世界的内容bixiang表示币响的内容bikuaibao表示币快报的内容liandede表示链得得的内容babite表示巴比特的内容huoxingcaijing表示火星财经的内容notice表示公告的内容还有其他大额交易的稍后定义 data.source.avatar String 否 该条item的来源的头像 data.author String 否 该条item的作者对象 data.author.name String 否 该条item的作者的名字（昵称） data.author.avatar String 否 该条item的作者的头像 data.time String 是 秒时间戳 data.url String 否 该条item的web连接，后期会生成一个liandao.ai的域名下的链接，暂时可不考虑 data.tags JSON数组 否 item分为有tag和无tag，有tag则表示该item所属的tag，无tag则针对全局 data.multimedia JSON对象 否 该条item的多媒体对象，主要指网页、图片和视频3种 data.multimedia.type String 是 该条item的多媒体类型值为web表示网页，此时media数组长度为1值为image表示图片，此时media数组长度为1-9，并且取media对象中的image字段值为video表示视频，此时media数组长度为1 data.multimedia.media JSON数组 是 该条item的多媒体对象，主要指网页、图片和视频 data.multimedia.media.image String 否 该条item的多媒体所对应的图片，其中如果type为web时，表示左边的网页图片；如果type为video时，表示视频的预览图 data.multimedia.media.text String 否 该条item的多媒体的文本，其中如果type为web时，表示网页的描述性文字 data.multimedia.media.url String 否 该条item的多媒体的链接，其中如果type为web时，表示左边的网页链接；如果type为video时，表示视频的链接 data.inline String 否 该条item的内嵌item，即可能包含以上所有字段或者对象或者数组，类似微博中的转发 data.translation JSON对象 否 该条item的翻译部分，最多只有title、text和content的翻译 data.translation.title String 否 该条item的翻译部分，针对标题的翻译 data.translation.text String 否 该条item的翻译部分，针对文本的翻译 data.like JSON对象 否 该条item对应的点赞/热度的描述对象 data.like.rating float 否 表达点赞/热度的程度等级，由后台根据某种算法生成 data.like.number int 否 点赞/热度的实际数目 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 item详情 地址：https://api.xxx.com/path/sickle/v1/items/{uid} 请求头1234567GET /path/sickle/v1/items/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;data&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;inline&quot;: &#123; &quot;author&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;币老爷&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot; &#125;, &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot; &#125;, &quot;multimedia&quot;: &#123; &quot;media&quot;: [ &#123; &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;text&quot;: &quot;六六又开始怼百度了&quot;, &quot;url&quot;: &quot;http://a3.peoplecdn.cn&quot; &#125; ], &quot;type&quot;: &quot;web&quot; &#125;, &quot;source&quot;: &#123; &quot;avatar&quot;: &quot;http://p4.pstatp.com/large/4b0000040a5b748e2f9d&quot;, &quot;name&quot;: &quot;微博&quot;, &quot;type&quot;: &quot;weibo&quot;, &quot;url&quot;: &quot;https://m.weibo.cn/status/4286763108972753&quot;, &quot;uid&quot;: &quot;4286763108972753&quot; &#125;, &quot;tags&quot;: [ &#123; &quot;name&quot;: &quot;Bitcoin&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125;, &#123; &quot;name&quot;: &quot;EOS&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;type&quot;: &quot;coin&quot;, &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot; &#125; ], &quot;text&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;time&quot;: &quot;1536830292&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;translation&quot;: &#123; &quot;text&quot;: &quot;什么？什么？什么？&quot;, &quot;title&quot;: &quot;什么？&quot; &#125;, &quot;type&quot;: &quot;article&quot;, &quot;uid&quot;: &quot;2342423233&quot;, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;grade&quot;: 0, &quot;content&quot;: &quot;&lt;p&gt;……&lt;p&gt;&quot;, &quot;like&quot;: &#123; &quot;rating&quot;: 3.5, &quot;number&quot;: 200 &#125; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 data.title String 否 该条item的标题 data.text String 否 该条item的文本内容，如果是文章，则对应的是文章的摘要，如果是其他快讯，则对应快讯内容或者快讯摘要 data.item.type String 否 该条item的对应的类型：flash表示快讯article表示文章notice表示交易所公告之类transaction大额交易social表示社交类的，如微博和推特抓取的数据detail表示带详情的数据other表示预留其他类型 data.grade int 否 该条item消息分级中的等级，数值越大等级越高，大于等于2就要在界面上设置出来，暂时定义顶部颜色为红色，小于3的就不需要改变颜色 data.grade String 否 该条item的详情内容 data.source JSON对象 是 该条item的来源JSON描述对象 data.source.uid String 是 该条item的来源对象的uid data.source.url String 是 该条item的来源链接 data.source.name String 是 该条item的来源名称，例如：微博XX大V，金色财经 data.source.type String 是 该条item的来源的类型，对应值如下：weibo表示抓取的微博内容twitter表示推特儿jinsecaijing表示金色财经的内容bishijie表示比世界的内容bixiang表示币响的内容bikuaibao表示币快报的内容liandede表示链得得的内容babite表示巴比特的内容huoxingcaijing表示火星财经的内容notice表示公告的内容还有其他大额交易的稍后定义 data.source.avatar String 否 该条item的来源的头像 data.author String 否 该条item的作者对象 data.author.name String 否 该条item的作者的名字（昵称） data.author.avatar String 否 该条item的作者的头像 data.time String 是 秒时间戳 data.url String 否 该条item的web连接，后期会生成一个liandao.ai的域名下的链接，暂时可不考虑 data.tags JSON数组 是 所属的tag data.multimedia JSON对象 否 该条item的多媒体对象，主要指网页、图片和视频3种 data.multimedia.type String 是 该条item的多媒体类型值为web表示网页，此时media数组长度为1值为image表示图片，此时media数组长度为1-9，并且取media对象中的image字段值为video表示视频，此时media数组长度为1 data.multimedia.media JSON数组 是 该条item的多媒体对象，主要指网页、图片和视频 data.multimedia.media.image String 否 该条item的多媒体所对应的图片，其中如果type为web时，表示左边的网页图片；如果type为video时，表示视频的预览图 data.multimedia.media.text String 否 该条item的多媒体的文本，其中如果type为web时，表示网页的描述性文字 data.multimedia.media.url String 否 该条item的多媒体的链接，其中如果type为web时，表示左边的网页链接；如果type为video时，表示视频的链接 data.inline String 否 该条item的内嵌item，类似微博中的转发 data.translation JSON对象 否 该条item的翻译部分，最多只有title、text和content的翻译 data.translation.title String 否 该条item的翻译部分，针对标题的翻译 data.translation.text String 否 该条item的翻译部分，针对文本的翻译 data.content String 否 该条item的翻译部分，针对content的翻译，比如文章详情 data.like JSON对象 否 该条item对应的点赞/热度的描述对象 data.like.rating float 否 表达点赞/热度的程度等级，由后台根据某种算法生成 data.like.number int 否 点赞/热度的实际数目 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、uid等 XXX int 否 参数错误：token、uid错误等 XXX int 否 账号异常：可能被封禁了 邀请码获取用户的邀请码或者其他各种码 地址：https://api.xxx.com/path/sickle/v1/codes 请求头1234567GET /path/sickle/v1/codesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?type=invite params 类型 是否必要 描述 type String 是 指定获取用户何种类的码，值为invite表示获取邀请码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789&#123; &quot;message&quot;: &quot;居然发成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;code&quot;: &quot;F2W34T&quot;, &quot;type&quot;: &quot;invite&quot;, &quot;url&quot;: &quot;https://mol.one?key=F2W34T&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data Json对象 是 同上 data.code String 是 用户对应的码 data.type String 是 用户对应的码的类型 data.url String 是 将制定链接与code进行拼接，例如有二维码业务的扩展，直接可以将该url生成二维码 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、type等 XXX int 否 参数错误：token、type错误等 XXX int 否 账号异常：可能被封禁了 海报poster获取用户海报数据 地址：https://api.xxx.com/path/sickle/v1/poster 请求头1234567GET /path/sickle/v1/posterAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?type=invite params 类型 是否必要 描述 type String 是 指定获取用户何种类的码，值为invite表示获取邀请海报 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112&#123; &quot;message&quot;: &quot;居然发成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/poster/invitation_poster.png&quot;, &quot;text&quot;: &quot;邀请海报&quot;, &quot;code&quot;: &quot;3D32SQ&quot;, &quot;type&quot;: &quot;invite&quot;, &quot;url&quot;: &quot;https://app.mol.one/?key=3D32SQ&quot;, &quot;time&quot;: &quot;2018-06-15 14:45:31&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.code String 是 用户对应的码 data.type String 是 用户对应的码的类型 data.image String 是 海报图，可能是背景图 data.text String 是 海报文案 data.url String 是 海报对应的二维码链接 data.time String 是 该海报生成时间 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、type等 XXX int 否 参数错误：token、type错误等 XXX int 否 账号异常：可能被封禁了 搜索search搜索接口，暂时用不到 地址：https://api.xxx.com/path/sickle/v1/search 请求头1234567GET /path/sickle/v1/searchAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1?keyword=BTC params 类型 是否必要 描述 keyword String 是 指定搜索匹配关键字 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;symbol&quot;: &quot;ETH&quot;, &quot;alias&quot;: &quot;以太坊&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;symbol&quot;: &quot;EOS&quot;, &quot;alias&quot;: &quot;柚子&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.uid String 是 该tag的唯一标识 data.tag String 是 该tag的缩写标识符 data.alias String 是 该tag的别名 data.rank String 是 该tag的排名，当type为coin时才有这个字段 data.image String 是 该tag的图标 data.type String 是 该tag的类型，暂时只有coin类型 异常 状态码 类型 是否必要 描述 XXX int 是 签到失败 XXX int 是 当天已经签到过 订阅获取用户的订阅tag并对其状态进行操作，例如取消订阅，切换订阅状态等。 获取订阅列表 地址：https://api.xxx.com/path/sickle/v1/subscriptions 请求头1234567GET /path/sickle/v1/subscriptionsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;34t34t34t34t&quot;, &quot;optionKey&quot;: &quot;2&quot;, &quot;optionValue&quot;: &quot;订阅+推送&quot;, &quot;renew&quot;: true, &quot;deadline&quot;: &quot;2018-09-11 12:23:55&quot;, &quot;remainder&quot;: 100, &quot;expiry&quot;: &quot;到期时间：2018-09-11 12:23:55&quot;, &quot;tag&quot;: &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;symbol&quot;: &quot;BTC&quot;, &quot;alias&quot;: &quot;比特币&quot;, &quot;image&quot;: &quot;https://static.feixiaohao.com/coin/eced1e28da4f16e117f471b08ad6e_mid.png&quot;, &quot;type&quot;: &quot;coin&quot; &#125;, &quot;sku&quot;: &#123; &quot;uid&quot;: &quot;23t23t23t262y24&quot;, &quot;price&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;unitPrice&quot;: &quot;5MOL/周&quot;, &quot;period&quot;: &quot;周&quot; &#125;, &quot;options&quot;: [ &#123; &quot;key&quot;: &quot;1&quot;, &quot;value&quot;: &quot;仅订阅&quot; &#125;, &#123; &quot;key&quot;: &quot;2&quot;, &quot;value&quot;: &quot;订阅+推送&quot; &#125;, &#123; &quot;key&quot;: &quot;4&quot;, &quot;value&quot;: &quot;取消订阅&quot; &#125; ] &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.uid String 是 订阅对象的的唯一标识 data.optionKey String 是 表示当前状态1：仅订阅2：订阅+推送3：订阅已过期4：取消订阅 data.optionValue String 是 表示当前状态的描述，用于前端展示，与optionKey对应 data.renew String 是 表示续费方式，true表示自动续费，默认是自动续费，暂时也只能自动续费 data.deadline String 是 到期截止时间 data.remainder int 是 当前状态，将剩余时间返回，大于0表示还没到齐，0表示当天到期，小于0表示已经逾期多少天 data.expiry String 是 对应的状态描述，给前端展示 data.tag String 是 tag对象 data.sku JSON对象 是 该tag的套餐描述 data.sku.uid String 是 该tag的套餐的uid data.sku.price String 是 该tag的套餐的具体价格 data.sku.currency String 是 该tag的套餐的价格单位 data.sku.unitPrice String 是 该tag的套餐的单价描述 data.sku.period String 是 该tag的套餐的周期单位 data.options JSON数组 是 可执行的操作列表 data.options.key String 是 执行该操作的参数，用于订阅操作中接口中的参数 data.options.value String 是 该操作的描述，用于前端展示 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 新增订阅 地址：https://api.xxx.com/path/sickle/v1/subscriptions 请求头1234567POST /path/sickle/v1/subscriptionsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1234567891011121314151617181920[ &#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;uid&quot;: &quot;24t2t23t23t23t&quot; &#125;, &#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;uid&quot;: &quot;24t2t23t23t23t&quot; &#125;, &#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;uid&quot;: &quot;24t2t23t23t23t&quot; &#125;] params 类型 是否必要 描述 tags.option String 是 订阅时的操作指令1：仅订阅2：订阅+推送3：订阅已过期4：取消订阅 tags.sku String 否 订阅的tag的sku的uid，不传表示默认，默认表示按周订阅 amount String 否 订阅的套餐的个数，如5表示5周等，不传表示默认，默认表示1 tags.uid String 是 订阅的tag的uid 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;uid&quot;: &quot;24t2t23t23t23t&quot; &#125;, &#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;uid&quot;: &quot;24t2t23t23t23t&quot; &#125;, &#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;, &quot;uid&quot;: &quot;24t2t23t23t23t&quot; &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.option String 是 订阅时的操作指令1：仅订阅2：订阅+推送3：订阅已过期4：取消订阅 data.sku String 是 订阅的tag的sku的uid amount String 否 订阅的套餐的个数，如5表示5周等，不传表示默认，默认表示1 data.uid String 是 订阅的tag的uid 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、option、sku、uid等 XXX int 否 参数错误：token、option、sku、uid错误等 XXX int 否 账号异常：可能被封禁了 XXX int 否 超过订阅个数，message提示：当前关注的币种不可超过3个 更新某个订阅状态 地址：https://api.xxx.com/path/sickle/v1/subscriptions/{uid} 请求头1234567PATCH /path/sickle/v1/subscriptions/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数由于订阅对象的uid在url上，因此不需要这个参数 12345&#123; &quot;option&quot;: &quot;1&quot;, &quot;sku&quot;: &quot;124yt34y43y&quot;, &quot;amount&quot;: &quot;5&quot;,&#125; params 类型 是否必要 描述 option String 是 该字段值来自获取的列表中的option中的值 sku String 否 操作的订阅对象的sku的uid，该字段来自获取的订阅列表中的sku对象中的uid字段，不传表示默认，默认表示按周订阅 amount String 否 订阅的套餐的个数，如5表示5周等，不传表示默认，默认表示1 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23r23r232r&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的订阅对象的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、option、sku、uid等 XXX int 否 参数错误：token、option、sku、uid错误等 XXX int 否 账号异常：可能被封禁了 糖果任务tasks我们把获取糖果的途径抽象成一个个任务，比如签到、邀请好友等都可以获取糖果。 获取任务通过GET方法获取任务列表 地址：https://api.xxx.com/path/sickle/v1/tasks 请求头1234567GET /path/sickle/v1/tasksAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;每日签到可得10MOL糖果&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;每日签到&quot;, &quot;uid&quot;: &quot;sign&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;邀请一个好友+66MOL糖果&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;uid&quot;: &quot;invitation&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;摩尔钱包充值MOL糖果&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;钱包充值&quot;, &quot;uid&quot;: &quot;wallet&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 badge String 是 该字段用于标记是否阅读过，或者显示消息数，具体看设计图要求，如果设计图要求显示具体消息数，则返回数字即可，都已读则返回空字符串即可表示全部消息已读，比如有两个红包未领取，就可以返回一个2显示在界面上，如果没有红包领取可以返回””，如果设计图要求只需要一个红点表示为未读状态，则返回为非空即可，已读则返回”” description String 是 对于该item的描述信息，暂时未使用到 image String 是 如果是banner则表示banner图，如果是中间的每一条item则表示icon图 title String 是 该item描述的功能名称 uid String 是 该功能对应的item的唯一标识，暂时定义的是功能名称的中文全拼 visible String 是 该item是否显示，visible标识显示，invisible标识不显示 actions JSON数组 是 描述该item的交互动作，第0个表示点击，第1个表示长按，第2个表示侧滑，如果还有后续定义增加在后面 actions.action.uid String 是 该动作的唯一标识 actions.action.key String 是 该动作可能需要的提示语，在该接口中没有用到 actions.action.value String 是 该动作执行所需参数，如果是跳转内嵌WebView或者跳转外部浏览器则返回的是url actions.action.type String 是 web表示跳转内嵌WebView，browser表示跳转到浏览器，native表示跳转原生 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 XXX int 是 当天已签到，无需重复签到 签到获取用户签到信息以及进行签到操作，签到信息为一个列表，后台拼装好用户的签到记录，同时签到动作表达的意思是新增一条签到信息 获取签到信息通过GET方法获取签到信息列表 地址：https://api.xxx.com/path/sickle/v1/signs 请求头1234567GET /path/sickle/v1/signsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314151617181920212223242526272829303132333435363738394041&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;amount&quot;: &quot;2&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;count&quot;: &quot;1天&quot;, &quot;sign&quot;: true, &quot;signable&quot;: true &#125;, &#123; &quot;amount&quot;: &quot;3&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;count&quot;: &quot;2天&quot;, &quot;sign&quot;: false, &quot;signable&quot;: false &#125;, &#123; &quot;amount&quot;: &quot;4&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;count&quot;: &quot;3天&quot;, &quot;sign&quot;: false, &quot;signable&quot;: false &#125;, &#123; &quot;amount&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;count&quot;: &quot;4天&quot;, &quot;sign&quot;: false, &quot;signable&quot;: false &#125;, &#123; &quot;amount&quot;: &quot;5&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;count&quot;: &quot;5天&quot;, &quot;sign&quot;: false, &quot;signable&quot;: false &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.amount String 是 签到奖励数目 data.currency String 是 得到奖励数的币种为MOL，此处写死MOL data.count String 是 签到天数，以“天”为单位 data.time String 是 某次签到时间 data.sign boolean 是 数据所对应的那天是否已经签到，true表示已签到，false表示未签到 data.signable boolean 是 数据所对应的那天是否可签到，true表示可签到，false表示不可签到 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 XXX int 是 当天已签到，无需重复签到 进行签到操作签到动作实际就是通过POST方法上传一份签到信息 地址：https://api.xxx.com/path/sickle/v1/signs 请求头1234567POST /path/sickle/v1/signsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;居然被你签到成功了&quot;, &quot;code&quot;: 200&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 XXX int 是 当天已签到，无需重复签到 订阅规则（该接口被会员等级接口替代）我们规定用户的订阅数与邀请人数挂钩，邀请一定人数才可以订阅一定个数，因此有一个规则查询。 地址：https://api.xxx.com/path/sickle/v1/subscriptions/regulations 请求头1234567GET /path/sickle/v1/subscriptions/regulationsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314151617181920212223242526&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;name&quot;: &quot;权限：同时订阅3个关键词&quot;, &quot;description&quot;: &quot;注册成功即开启(已达成）&quot;, &quot;done&quot;: true &#125;, &#123; &quot;name&quot;: &quot;权限：同时订阅3个关键词&quot;, &quot;description&quot;: &quot;注册成功即开启(已达成）&quot;, &quot;done&quot;: true &#125;, &#123; &quot;name&quot;: &quot;权限：同时订阅3个关键词&quot;, &quot;description&quot;: &quot;注册成功即开启(已达成）&quot;, &quot;done&quot;: true &#125;, &#123; &quot;name&quot;: &quot;权限：同时订阅3个关键词&quot;, &quot;description&quot;: &quot;注册成功即开启(已达成）&quot;, &quot;done&quot;: true &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.name String 是 对应的权限名称 data.description String 是 对应的权限的描述 data.done boolean 是 是否完成，值为true表示已经完成，值为false表示尚未完成 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 推送设置对于App中的某些需要上传到服务器端的功能的设置，通过统一设置接口来处理，例如用户的推送设置等用户相关功能。而对于某些本地化的功能设置则不需要上传到服务器端。 获取推送设置列表 地址：https://api.xxx.com/path/sickle/v1/settings/push 请求头1234567GET /path/sickle/v1/settings/pushAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;option &quot;: &quot;1&quot;, &quot;value&quot;: &quot;任何时候接受提醒&quot;, &quot;setting&quot;: false &#125;, &#123; &quot;option&quot;: &quot;2&quot;, &quot;value&quot;: &quot;夜间不接受提醒（11:00--06:00）&quot;, &quot;setting&quot;: false &#125;, &#123; &quot;option&quot;: &quot;3&quot;, &quot;value&quot;: &quot;暂停全部推送提醒&quot;, &quot;setting&quot;: true &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data JSON对象 是 同上 data.option String 是 对应选项的key，用于修改时作为参数传递给后台 data.value String 是 对应选项的描述 data.setting boolean 是 是否设置为该状态，值为true表示当前设置，值为false表示非当前设置 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 XXX int 否 账号异常：可能被封禁了 设置推送 地址：https://api.xxx.com/path/sickle/v1/settings/push 请求头1234567PATCH /path/sickle/v1/settings/pushAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数123&#123; &quot;option &quot;: &quot;1&quot;&#125; params 类型 是否必要 描述 option String 是 该字段值来自获取的列表中的option中的值 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token、option等 XXX int 否 参数错误：token、option错误等 XXX int 否 账号异常：可能被封禁了 个人中心这个模块的接口稍作修改，以后这种配置的接口都统一设置一种格式。 地址：https://api.xxx.com/path/sickle/v1/mine 请求头1234567GET /path/sickle/v1/mineAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;钱包&quot;, &quot;uid&quot;: &quot;qianbao&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;订阅管理&quot;, &quot;uid&quot;: &quot;dingyueguanli&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;推送设置&quot;, &quot;uid&quot;: &quot;push&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ], [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;uid&quot;: &quot;yaoqinghaoyou&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;加入社区&quot;, &quot;uid&quot;: &quot;jiarushequ&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;版本更新&quot;, &quot;uid&quot;: &quot;banbengengxin&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;更多&quot;, &quot;uid&quot;: &quot;gengduo&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ] ]&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 badge String 是 该字段用于标记是否阅读过，或者显示消息数，具体看设计图要求，如果设计图要求显示具体消息数，则返回数字即可，都已读则返回空字符串即可表示全部消息已读，比如有两个红包未领取，就可以返回一个2显示在界面上，如果没有红包领取可以返回””，如果设计图要求只需要一个红点表示为未读状态，则返回为非空即可，已读则返回”” description String 是 对于该item的描述信息，暂时未使用到 image String 是 如果是banner则表示banner图，如果是中间的每一条item则表示icon图 title String 是 该item描述的功能名称 uid String 是 该功能对应的item的唯一标识，暂时定义的是功能名称的中文全拼 visible String 是 该item是否显示，visible标识显示，invisible标识不显示 actions JSON数组 是 描述该item的交互动作，第0个表示点击，第1个表示长按，第2个表示侧滑，如果还有后续定义增加在后面 actions.action.uid String 是 该动作的唯一标识 actions.action.key String 是 该动作可能需要的提示语，在该接口中没有用到 actions.action.value String 是 该动作执行所需参数，如果是跳转内嵌WebView或者跳转外部浏览器则返回的是url actions.action.type String 是 web表示跳转内嵌WebView，browser表示跳转到浏览器，native表示跳转原生 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 H5端预注册由好友分享出的海报注册进行预绑定，并不是真正的绑定父子关系，只有当用户真正的注册进来的时候，才会让该条绑定记录生效。 地址：https://api.xxx.com/path/sickle/v1/preregister 请求头1234POST /path/sickle/v1/preregisterAccept: application/jsonContent-Type: application/json;charset=UTF-8Locale: zh 参数123456&#123; &quot;code&quot;: &quot;F5DE55&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;, &quot;sms&quot;: &quot;348543&quot;&#125; params 类型 是否必要 描述 code String 是 要绑定的邀请码，用户点击的链接或者扫描的二维码中有这个参数 countryCode String 是 国家区号 phone String 是 手机号码 sms String 是 验证码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然被你绑定成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23t2t23t23t23t23&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 data.uid String 是 预注册成功后会有一个绑定的记录的uid 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少countryCode、phone、code、sms等 XXX int 否 参数错误：countryCode、phone、code、sms错误等 XXX int 否 账号异常：可能被封禁了 邀请统计根据原型设计，需要在“邀请好友”模块中有邀请的奖励统计。 地址：https://api.xxx.com/path/sickle/v1/invitation 请求头1234567GET /path/sickle/v1/invitationAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678&#123; &quot;message&quot;: &quot;居然被你绑定成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;reward&quot;: &quot;235&quot;, &quot;count&quot;: &quot;15&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 data.reward String 是 通过邀请好友累积的奖励数 data.count String 是 邀请好友累积人数 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 账号异常：可能被封禁了 初始化每一个应用在启动的时候都会有很多数据与服务器交互，例如上传用户的必要信息、下载配置信息、更新必要信息、刷新token、更新闪屏广告等，按理论上来说这些数据是应该有各自的接口完成，但是考虑到性能问题和代码编写的复杂度问题，决定适当整合成聚合接口以请求次数就会减少，但这样又会造成另些问题，通过分析得出涉及三个维度的问题需要缕清： 上传数据（upload）还是下载数据（download），还是直接合并成一个请求（initialize） 数据的交互是否需要token 数据的格式 经讨论决定，只用两个接口一个是公共服务的initialize接口和项目应用层的initialize接口，需要token的数据如果没有传正确的token则不返回，但是那些不需要token就正常返回，数据格式最后采用对象式而非数组式，扩展性靠大家约束。 公共服务初始化这部分就是用户中心的那些初始化接口合并到这里，比如上传设备信息、系统信息、位置信息、ROM信息等，本应该根据资源设计成多个接口的，下载聚合成这一个接口。 地址：https://api.xxx.com/path/user/v1/initialize 请求头1234567POST /path/user/v1/initializeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: AndroidLocale: zh 参数由于该接口是多个接口的聚合，因此多个接口的参数应该都出现在这里，暂时只有手机相关的信息 1234567891011121314151617181920212223242526272829&#123; &quot;app&quot;: &#123; &quot;debug&quot;: &quot;false&quot;, &quot;versionCode&quot;: &quot;5&quot;, &quot;versionName&quot;: &quot;1.0.5&quot; &#125;, &quot;device&quot;: &#123; &quot;deviceID&quot;: &quot;1313512r123rd12r12r12re&quot;, &quot;brand&quot;: &quot;google&quot;, &quot;display&quot;: &quot;OPD3.170816.012&quot;, &quot;displayHeight&quot;: &quot;1920&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;fingerprint&quot;: &quot;google/walleye/walleye:8.0.0/OPD3.170816.012/4343094:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Google&quot;, &quot;model&quot;: &quot;Pixel 2&quot;, &quot;product&quot;: &quot;walleye&quot; &#125;, &quot;os&quot;: &#123; &quot;host&quot;: &quot;fe80::ccaf:c6ff:fe19:57a6%dummy0&quot;, &quot;root&quot;: &quot;false&quot;, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;version&quot;: &quot;26&quot; &#125;, &quot;location&quot;: &#123; &quot;longitude&quot;: &quot;333&quot;, &quot;latitude&quot;: &quot;565&quot;, &quot;address&quot;: &quot;中国深圳龙岗&quot; &#125;&#125; 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应由于该接口是多个接口的聚合，因此多个接口的响应应该都出现在这里，暂时只有刷新旧token所返回的新token 1234567&#123; &quot;message&quot;: &quot;居然被你上传成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;3811c92206b0436693c4c4d25&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 data.token String 是 刷新后的token 异常该接口比较特殊，是多个接口合并的接口，要进来保证前端请求成功，只要有一个请求成功了都算成功 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token，其他参数缺少无所谓，有多少传过去就存多少，并不算错 XXX int 否 参数错误：token错误等，其他参数就算瞎填也无从考证，因此不需要管 镰刀项目初始化这部分就是镰刀项目的那些初始化接口合并到这里，比如下载配置信息、重复提交邀请码、重复提交注册奖励等 地址：https://api.xxx.com/path/sickle/v1/initialize 请求头1234567POST /path/sickle/v1/initializeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: AndroidLocale: zh 参数由于该接口是多个接口的聚合，因此多个接口的参数应该都出现在这里，暂时只有手机相关的信息 1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应由于该接口是多个接口的聚合，因此多个接口的响应应该都出现在这里，暂时只有返回一些提示文案 1234567891011121314151617181920&#123; &quot;message&quot;: &quot;居然被你绑定成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;tips&quot;: [ &#123; &quot;key&quot;: &quot;用于显示&quot;, &quot;value&quot;: &quot;用于功能，如url&quot; &#125;, &#123; &quot;key&quot;: &quot;用于显示&quot;, &quot;value&quot;: &quot;用于功能，如url&quot; &#125;, &#123; &quot;key&quot;: &quot;用于显示&quot;, &quot;value&quot;: &quot;用于功能，如url&quot; &#125; ] &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 异常该接口比较特殊，是多个接口合并的接口，要进来保证前端请求成功，只要有一个请求成功了都算成功 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token，其他参数缺少无所谓，有多少传过去就存多少，并不算错 XXX int 否 参数错误：token错误等，其他参数就算瞎填也无从考证，因此不需要管 长连接部分（下期考虑）广告活动 uri：v1/advertise 这部分是用于某些时刻主动给用户推送弹窗广告或者活动的，客户端会预先设计好四种弹窗模板： Web图片弹窗，即一个弹窗里装在一个WebView，直接显示即可，这类弹窗只是显示，没有交互（不会有点击跳转）。 Web交互弹窗，即一个弹窗里装在一个WebView，直接显示网页内容，并且点击后可以跳转其他网页，当然这个跳转仍然在该弹窗内。 native图片弹窗，即一个弹窗里装载一个显示图片的控件，直接显示即可，无其他交互。 native交互弹窗，即一个特定的设计的弹窗，类似现在的挖矿每天第一次挖到第一笔MOL币时的弹窗，这个弹窗就是一个特殊的native交互式的弹窗，点击就跳转到了海报页面。 响应1234567891011&#123; &quot;message&quot;: &quot;弹广告了&quot;, &quot;code&quot;: 200, &quot;uid&quot;: &quot;A3BA3BA3BA3BC&quot;, &quot;uri&quot;: &quot;v1/advertise&quot;, &quot;data&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, …… &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 uid String 是 同上 uri String 是 同上 type String 是 web表示web弹窗，native表示native弹窗 url String 是 type为web是，url表示连接，为native时，如果是native图片弹框就表示图片的url 异常1暂无 强调：由于考虑到后期的扩展，比如熊老师做了一个调查的H5，推送到用户，参加完调查的用户在提交后可以得到摩尔奖励，这个就必须依赖到token了，因此我们在打开这个url对应的WebView/UIWebView的时候，默认将token传过去，就通过拼在url后面传过去就可以了，如下：接收到的是： https://www.baidu.com/ ，拼参后：https://www.baidu.com/?token=1r13rqwr132r1r 新消息提示 uri：v1/newItems 用于提醒前端，数据库有新的item更新，适当展示、合理提醒用户刷新。 响应123456&#123; &quot;message&quot;: &quot;10条新消息&quot;, &quot;code&quot;: 200, &quot;uid&quot;: &quot;A3BA3BA3BA3BC&quot;, &quot;uri&quot;: &quot;v1/newItems&quot;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 uid String 是 同上 uri String 是 同上 异常1暂无]]></content>
  </entry>
  <entry>
    <title><![CDATA[中后台管理系统介绍]]></title>
    <url>%2F%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%2F%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D%2F%E4%B8%AD%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[中后台管理系统介绍 Author：Leguang E-Mail：langmanleguang@qq.com 由于之前开发资源有限，运营/管理人员在工作期间总是出现如下情况： 这样一来效率极低，大大增加运营人员负担和开发人员重复体力劳作几率，用户体验也不好，现在要求出一套管理系统来配合解决用户的问题，让用户快速得到反馈，同时为了更方便的开展和运营业务，决定启动一个后台管理系统计划，目的是为了让部分功能对外暴露，使运营和管理人员能参与到后台数据的处理，同时为管理人员赋予一定的决策权，以达到减轻开发人员负担的作用。 要求对于后台管理系统，界面就不要求有多好看，只需要简介易用，快速响应就行，因此这部分就直接取模板的默认样式，不出设计稿了，熊老师觉得怎么好看怎么来，纯自由发挥。提出以下几点要求： 安全安全性放在第一位，是因为这个系统是针对用户的数据直接操作，因此要求严格，要求如下： 不允许删除数据，所有的操作都只是对可行性的标记字段的操作。 要求记录该次操作的人员信息，考虑到代码入侵性，看是仅仅记录操作人员的操作日志，还是记录每次操作所对应的人员信息，待商议。 只允许公司指定人员有权限操作，其他人不得操作。 只允许在公司内部操作，不允许外网操作。 操作要针对测试环境和正式环境（比如要推送一个广告，在测试环境中先推送试试效果），默认是正式环境。 要求没一个运营人在后台系统中的每一次接口调用、每一步操作都要有日志记录，以方便溯源和追责、这个看是有一个单独的接口还是文件记录然后上传。 易用易用是指：用户反馈问题–&gt;我们解决问题–&gt;用户得到问题反馈，这一过程的简单易用。能让代码处理的就不需要开发人员再去处理，一旦有开发参与了，那必定会是重复劳作。比如在App端有一个反馈界面（类似IM），直接以对话的形式反馈到后台，后台统一回复，甚至做成机器人的自动回复+人工回复。能做成一键式的决不多步操作，能做成傻瓜式的，决不浪费脑细胞。 对于所有数据的上架和下架有时间限制，例如banner图，其中有一张是关于直播的，可是直播结束之后就得下架，这个时候就需要下架时间，所以在我们上传这些数据到时候，有上架时间和下架时间，甚至是周期时间，和有效截止时间，因此这部分需要功能更强大才能节省人力物力。 智能需要提供决策，能让运营/管理人员做选择题的，就不要他做填空题，提供尽可能多的信息展示和建议。 模板考虑到熊老师专心研究Vue，因此综合考虑后，选择vue-element-admin这个模板 https://panjiachen.github.io/vue-element-admin/#/dashboard 默认一进来展示的内容是一些常见的、易查询的数据，如下： 当前在线人数（后期考虑做成根据时间的线形图统计）。 使用手册。 公司成员的联系方式。]]></content>
  </entry>
  <entry>
    <title><![CDATA[摩尔钱包后台管理系统设计]]></title>
    <url>%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[摩尔钱包后台管理系统设计 Author：Leguang E-Mail：langmanleguang@qq.com 功能大纲暂时只罗列出这么多功能，后续有想到再加。以下功能如无特别说明，均针对的是摩尔钱包功能。 左边导航从上至下，一级分类及其对应的子功能如下： 一级分类 子功能 1.用户 1.查询2.用户黑名单3.IP地址黑名单 2.配置 1.摩尔钱包文案2.Banner列表 3.红包列表4.发现模块5.我的模块 3.通知 1.通知2.历史记录 4.推送 1.广告2.连接管理3.历史记录 5.版本升级 1.Android2.iOS 6. 打款 无 7.日志 无 8.使用手册 无 9.反馈 无 功能测试环境和正式环境的切换针对后台系统的所有功能都是有测试环境和正式环境区分的，默认是正式环境，这个是针对某些需要测试的功能设计的，比如推送广告，需要看一下效果，因此需要先在测试环境配好，测试通过再直接用正式环境操作。所以考虑在页面顶部有一个开关，点击一下就切换到另一种模式。 用户用户模块的主要功能其实就是增删改查和黑名单等，界面没要求，根据功能和经验合理呈现即可，功能如下： 功能描述 查询 各种查询：1.根据手机号码查询出用户的信息列表2.根据用户MOL积分币的累积量查询用户的信息列表3.根据用户MOL积分币的可提取余额查询用户的信息列表4.其他这部分由何流远负责，具体还需要哪些查询功能再想想，觉得有意义的就加上去 用户黑名单 要求在界面上列出用户黑名单列表，每一条列表可以单独控制封禁和解封功能，同时要求有条件查询的选择，比如根据手机号码查询筛选列表 IP地址黑名单 要求在界面上列出IP地址黑名单列表，一点这个IP地址就可以呈现出该IP地址下的用户列表 配置该功能是对界面的一系列控制，这部分交由顺义来负责，由于涉及到界面控制，因此严格要求对测试环境和正式环境，在界面上也要有相关提示，比如在填写完配置信息，点提交的时候，要求弹框警示运营人员。功能如下表所示： 功能 描述 摩尔钱包文案 针对手机App的各种文案和链接，这部分对应的是content接口 Banner图配置 Banner图是指发现模块的Banner图配置 红包列表 针对的是发现模块中的红包模块的红包列表配置 发现模块 “发现”模块的功能（item）列表 我的模块 “我的”模块功能（item）列表 通知这个通知是指借助第三方平台的通知，是指手机APP的进程被杀掉后，还能收到的通知，暂时iOS对接的是极光推送，Android对接的是阿里云推送。功能如下： 功能 描述 通知 填写好参数后就点击发送即可 历史记录 历史列表，要求在点击某个历史记录的时候，就跳转到通知页面，然后将该历史记录的参数都填好 对界面没有要求，只是填空，可以参考阿里云的，如下图所示： 我们把通知的JSON格式定义如下 1234567891011121314&#123; &quot;data&quot;: &#123; &quot;title&quot;: &quot;摩尔&quot;, &quot;content&quot;: &quot;摩尔&quot;, &quot;when&quot;: &quot;&quot;, &quot;smallIcon&quot;: &quot;&quot;, &quot;largeIcon&quot;: &quot;&quot;, &quot;priority&quot;: &quot;&quot;, &quot;lights&quot;: &quot;&quot;, &quot;vibrate&quot;: &quot;&quot;, &quot;sound&quot;: &quot;&quot;, &quot;channel&quot;: &quot;&quot; &#125;&#125; 因此界面上只需要出10个填空的，把这10个字段都呈现出来即可。 推送这个推送与上面的通知的本质区别是：通知是在App根本没有启动的时候，依托系统级的长连接得到后台发送过来的信息，而这个推送定义成App已经启动，利用本App的长连接得到后台的推过来的信息。因此可以做更多的拓展。 功能 描述 广告 这部分暂时只考虑定义一个Web模板广告（本来是有计划一个原生的模板弹窗和一个Web模板弹窗来显示广告的，但是原生模板弹窗暂时没想好，因此不考虑了），填写一个某网页的url（这个可能是熊老师写个某个活动Web页面），然后指定发给某个用户，或者发给全部用户，用户拿到这个url后会拼接好token启动该url对应的web，因此这里还可以做一些针对用户的扩展，比如做个调查问卷，填写过问卷的给予MOL奖励，此时token就起作用了。界面只需要几个输入框即可。 历史记录 历史列表，要求在点击某个历史记录的时候，就跳转到广告页面，然后将该历史记录的参数都填好 连接管理 针对每一个长连接有一个开关，后台可控制允许某个/某些用户连接还是断开。 版本升级（暂时不做，等重构好升级接口再实现）现在的这种手动上传到某个阿里云目录的做法是比较原始的，应该有一个统一的管理版本的地方，发布版本时也应该是简单的在后台填写日志信息，然后发布，而不是手动修改数据库。 功能 描述 Android 界面上只要求将新版的JSON数据模拟得出来即可 iOS 界面上只要求将新版的JSON数据模拟得出来即可 界面上可以参考Bugly 打款（暂时不考虑）这个功能可以暂时不考虑 日志对该后台的所有操作都应该有记录，比如什么时候，那个人员登录过后台管理系统，做过哪些操作，根据时间排序列出来，方便日后审查和追责。 使用手册这部分简单介绍即可，可以把这边文档当做简版使用手册。 反馈（暂时不考虑）这部分是重点，希望后台能做成阿里云那么强大的服务后台。到时候前端会有一个反馈入口，以对话形式展示在前端App的某个页面，用户输入疑问后，会自动回复一些提示性语言，我们的客服人员上班后会查看，看到留言列表可以直接点击某一条留言，会一个输入框，输入完文字后点击回复按钮即可完成留言，用户下次打开反馈界面后就可以看到客服回复的内容。]]></content>
  </entry>
  <entry>
    <title><![CDATA[摩尔钱包锁仓模块接口文档]]></title>
    <url>%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E9%94%81%E4%BB%93%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E9%94%81%E4%BB%93%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[摩尔钱包锁仓模块接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 要求目标 接口“粒度”争取设计得足够小，争取在业务发生变化后，后台接口不需要增减，只需要前端组合接口仍然能满足新的业务需求。 任何一个接口都可以获取到数据，哪怕没传参数。 命名规范一名二姓三风水，四积阴德五读书，名不正则言不顺，言不顺则事难成。软件开发其实就是门命名的艺术，所以首先定义一些规范，提出一些硬性要求，大家在命名的时候尽量多花点心思，多参考优秀的命名风格。 强烈推荐参考：参考阿里巴巴Java开发手册，Android开发规范，iOS开发手册。 一个单词尽量选择5–7个字母的，这样才最优美。 首字母缩写的单词尽量每个字母都用大写，例如ID。用个小写，人家还以为是一个单词。当然uri、url、urn这种除外，因为大家都知道这个是什么。 规范并统一公司的基础包名与项目的关系。 前后端的某些名称概念要统一用某一个单词，比如支付的统一订单，支付宝用的是order，微信用的是unifiedorder，那我们统一对订单这个概念用order这个词。再比如主机：后台用gateway，现在我们统一用host。这单词不统一很容易分裂。 uri规范uri 表示资源，资源一般对应服务器端领域模型中的实体类，要求如下： 不用大写。 尽量不用横杠分隔符，万一要用，请使用中杠“-”不用下杠“_”。 参数列表要encode。 uri中的名词表示资源集合，使用复数形式。 路径仅表示资源的路径（位置），以及一些特殊的actions操作。 以复数（名词）进行命名资源，不管返回单个或者多个资源。 资源的路径从父到子依次如：/{resource}/{resource_id}/{sub_resource}/{sub_resource_id}/{sub_resource_property}。 使用?来进行资源的过滤、搜索以及分页等。 使用版本号，且版本号在资源路径之前。 优先使用内容协商来区分表述格式，而不是使用后缀来区分表述格式。 url最好越简短越好，结果过滤，排序，搜索相关的功能都应该通过参数实现。 url失效则返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 JSON规范暂时只考虑json的数据格式，要求如下： 不要使用缩写。 统一用驼峰命名法。 不要使用“_”或者“-”。 用名词复数表示集合类型。 为了方便以后的扩展兼容，如果返回的是数组，强烈建议用一个包含如items属性的对象进行包裹。如：123456789101112131415161718* 建议对每个字段设置默认值（数组型可设置为[],字符串型可设置为””，数值可设置为0，对象可设置为&#123;&#125;）,这一条是为了方便前端/客户端进行判断字段存不存在操作。* 建议资源使用UUID最为唯一标识。同时建议命名为id或者uid。* 采用UTF-8编码。* 数据应该拿来就能用，不应该还要进行转换操作。&gt;**草稿：JSON返回的格式是分门别类按对象来划分，还是铺大饼的形式铺开，两者利弊各异，比如url，可能一个接口中返回多个url，如果分json对象装的话，则key都可以叫url，否则的话key就得命名成xxxUrl。这个有待商议**## 业务简介本期开发的功能是白皮书上写明的利息挖矿，即类似支付宝中的余额宝，当用户存入MOL币，每周都能平分周利息分红。总体功能模块划分如下图所示：![模块](https://i.imgur.com/BZ6gfGn.png)## HTTP部分### 使用场景* App的初始化数据尽量都用http协议获取。* 页面的初始化数据尽量都用http协议获取。### url结构 https://{serviceRoot}/{collection}/{id}123456- &#123;serviceRoot&#125; – 域名+端口号 (site URL) + 根目录- &#123;collection&#125; – 要访问的资源- &#123;id&#125; – 要访问的资源的唯一编号### 公共请求头通过Content-Type指定请求与返回的数据格式有json和xml,暂时我们只管json的。其中请求数据还要指定Accept。其中额外添加的请求头里的参数注意大小写。 Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android123456789|params | 类型 | 描述 || - | - | - || Token | String | 这个不用解释了吧？ || AppVersion | String | App当前版本的版本名称 || Platform | String | Android表示Android平台，iOS表示iOS平台 |### 公共参数（建议公共参数放到请求头里）公共参数是指每一个接口应该传的参数，同时后端要指定公共参数的默认值，**且要保证没有传公共参数不会报错，所以需要一定的容错性，比如priceDes这个参数值，如果是用的是全部小写的，只要是不冲突，则可认为是准确的参数并且表达了按价格降序排列这个语意**。我个人建议公共参数放到请求头里，如果要放到请求体里，则固定格式如下： { “extra”: “扩展字段，可有可无，只要你干填，我就敢接”, “data”: { “uid”: “23523523523523” 其他个性参数…… }}1234567891011121314|params | 类型 | 描述 || - | - | - || extra | String | 额外扩展字段 || data | JSON对象 | 需要传的具体个性参数 |### 个性参数个性参数就是除了公共参数之外的，看能否考虑统一用json将公共参数和个性参数浓缩成一个参数，把想要表达的参数通过json中的key-value形式传递。例如：https://api.xxx.com/both/v1/search/products?params=&#123;&quot;extra&quot;:&quot;你想填什么呢&quot;,&quot;token&quot;:&quot;token_523523523&quot;,&quot;data&quot;:&#123;&quot;uid&quot;:&quot;23523523523523&quot;&#125;&#125;或者考虑与业务相关的参数就用json形式包装，而与业务无关的个性参数就还是用传统的方式另立一个参数。例如：https://api.xxx.com/both/v1/search/products?limit=10&amp;offset=10&amp;params=&#123;&quot;keyword&quot;:&quot;方便面&quot;,&quot;sort&quot;:&quot;des&quot;&#125;### 公共响应头 Content-Type:application/json; charset=utf-8Status:200 OK1234其中状态码要与公共响应体里的json中的code字段一样。### 公共响应体默认会有以下字段，不需要全部都有。 { “message”: “居然被你查询成功了”, “code”: 200, “page”: 0, “pageSize”: 20, “first”: “https://…”, “next”: “https://…”, “previous”: “https://…”, “last”: “https://…”, “data”: { “uid”: “6565656565665” }}12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849|key | 类型 | 描述 || - | - | - || message | String | 返回给接口调用者的描述，有可能用于显示到界面上，需要进行国际化处理 || code | int | 这个与请求头中的状态码一致，是为了满足部分开发者的习惯 || page | int | 分页请求中请求的当前页的页码 || pageSize | int | 分页请求中一页的个数，默认为20 || first | String | 分页请求中第一页的url ，如果没有则返回空字符串|| next | String | 分页请求中下一页的url，如果没有则返回空字符串 || previous | String | 分页请求中上一页的url，如果没有则返回空字符串 || last | String | 分页请求中最后一页的url，如果没有则返回空字符串 || data | object | 当前接口的具体数据由该json对象承载 || uid | String | **对于每一个资源对象，在返回的时候，都应该返回操作这个资源对象的唯一码** |### HTTP动词表示操作。常用的HTTP动词有下面五个（括号里是对应的SQL命令）。* GET（SELECT）：从服务器取出资源（一项或多项）。例如:GET /zoos：列出所有动物园。* POST（CREATE）：在服务器新建一个资源。例如:POST /zoos：新建一个动物园。* PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。例如:PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）。* DELETE（DELETE）：从服务器删除资源。例如:DELETE /zoos/ID：删除某个动物园。### 状态码作为API的设计者，正确的将API执行结果和失败原因用清晰简洁的方式传达给客户程序是十分关键的一步。我们确实可以在HTTP的相应内容中描述是否成功，如果出错是因为什么，然而，这就意味着用户需要进行内容解析，才知道执行结果和错误原因。因此，HTTP响应代码可以保证客户端在第一时间用最高效的方式获知 API 运行结果，并采取相应动作。下表列出了比较常用的响应代码。常用的http状态码及使用场景：| 响应代码 |代码含义 || - | - || 200 |已创建，请求成功且服务器已创建了新的资源。|| 201 |是否只显示处于警告状态的应用实例。|| 301 |重定向 , 请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。|| 302 |重定向 , 请求的网页临时移动到新位置，但求者应继续使用原有位置来进行以后的请求。302 会自动将请求者转到不同的临时位置。|| 304 |未修改，自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。|| 400 |错误请求 , 服务器不理解请求的语法。|| 401 |未授权 , 请求要求进行身份验证。|| 403 |已禁止 , 服务器拒绝请求。|| 404 |未找到 , 服务器找不到请求的网页。|| 405 |方法禁用 , 禁用请求中所指定的方法。|| 406 |不接受 , 无法使用请求的内容特性来响应请求的网页。|| 408 |请求超时 , 服务器等候请求时超时。|| 410 |已删除 , 如果请求的资源已被永久删除，那么，服务器会返回此响应。|| 412 |未满足前提条件 , 服务器未满足请求者在请求中设置的其中一个前提条件。|| 415 |不支持的媒体类型 , 请求的格式不受请求页面的支持。|| 500 |内部服务器错误。|### 分页分页适用于GET类型且返回集合数据的请求，根据如下参数进行分页操作。分页返回的数据见公共响应体。 { “extra”: “你想填什么就填什么”, “page”: 0, “pageSize”: 20,}1234567891011121314151617181920212223242526272829| params | 类型 | 描述 || - | - | - || extra | String | 扩展字段，可有可无 || page | int | 页码 || pageSize | int | 分页请求中一页的个数，该值固定,默认为20|### 项目url预览![锁仓利息预览](https://i.imgur.com/nC6ul8d.png)站在数据的角度，若想满足各大模块的功能需求，可以将接口分成如下几类：&gt; base url：https://api.xxx.com/path/| 分类 | 接口地址 | 参数 || - | - | - || 锁仓利息stake | https://api.xxx.com/path/v1/stake | || 锁仓利息说明description | https://api.xx.com/path/v1/stake/description | || 充值deposit | https://api.xxx.com/path/v1/stake/deposit | amount/currency/from/to等 || 地址addresses | https://api.xxx.com/path/v1/stake/addresses | || 提现withdraw | https://api.xxx.com/path/v1/stake/withdraw | amount/currency等 || 利息挖矿总记录records | https://api.xxx.com/path/v1/stake/records | type等 || 利息明细与规则detail | https://api.xxx.com/path/v1/stake/detail | |#### 锁仓利息stake（首页）该功能是类似支付宝中的余额宝的首页面，显示一些收益和明细列表的入口。&gt; 地址：https://api.xxx.com/path/v1/stake###### 请求头 GET /mol_wallet/v1/stakeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android12345###### 参数无###### 响应头 HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache12###### 响应 { “message”: “居然被你看到了”, “code”: 200, “data”: { “yesterdayIncome”: “155.0”, “amount”: “3000”, “accumulatedIncome”: “1111”, “dividend”: “500000”, “totalDividents”: “500000”, “predictIncome”: “500”, “currency”: “MOL” }}12345678910111213141516171819202122232425|key | 类型 | 描述 || - | - | - || message | String | 随便写，也可以作为服务器给前端固定提示的内容 || code | int | 与响应头里的Status一样 || data.yesterdayIncome | String | 昨日收益(MOL) || data.amount | String | 总额 || data.accumulatedIncome | String | 累计收益 || data.dividents | String | 本周可参与分红额度 || data.totalDividents | String | 本周当前锁仓的分红池 || data.predictIncome | String | 本周连续锁仓预计可得 || data.currency | String | 单位或者币种 |---#### 锁仓利息说明description这个暂时web先写死，不需要接口，如果后期改成原生实现的时候再考虑。---#### 地址addresses该接口是针对充值时，用户打到官方指定的地址，用于获取官方收款地址。由于充值页面是原生实现，一进入该页面就应该访问该接口获取地址，~~同时考虑网络稳定因素，做好二级缓存，保证官方地址一直能拿得到。同时原生端使用的时候，是随机去一个打款过去~~，经过商议，取消缓存。由于我们的服务器在每日凌晨4：00--5:00期间进行维护，因此此时请求接口会失败，后端会返回code为412表示在维护期间，禁止充币。所以前端根据该code值做弹框提示。&gt; 地址：https://api.xxx.com/path/v1/stake/addresses###### 请求头 GET /mol_wallet/v1/stake/addressesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android12345###### 参数无###### 响应头 HTTP/1.1 200 OKContent-Type:application/json; charset=utf-812###### 响应 { “message”: “居然被你查询成功了”, “code”: 200, “data”: { “address”: “mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec” }}12345678910111213141516| key | 类型 | 描述 || - | - | - || code | String | 200为成功，412表示凌晨4:00--5：00期间维护，拒绝充币。 || data.address | String | 官方收款地址，即用户充值到官方的地址，该地址为后台多个地址随机返回的 |---#### 充值deposit~~该接口用于告诉后台用户已经打币给官方指定地址了，让官方去确认，后台就可以利用hash这个参数结合blocks_info这个action去查询后对比。~~之后大家一起商议后，认为该方案不合理，有双花风险，因为看了nano的链的代码逻辑：双花的块都会放到链上，但是最后有一个会失效，然后从链上删除。因为考虑到在短时间内是无法通过hash块来确定一定是支付成功的，所以还是得后台收账后，并且5分钟内无误则可认为是真实转账。因此相应界面也得更改：客户端存入成功界面得提示5分钟后确认等字样。&gt; 地址：https://api.xxx.com/path/v1/stake/deposit##### 请求头 POST /mol_wallet/v1/stake/depositAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android12##### 参数 { “amount”: “50”, “fromAccount”: “mol_114x611xyehnj767bmxia1d67m3kqrtukxtdxkcptf4mzj8sea4ru779i78h”, “toAccount”: “mol_34qdk454gaxhic3w3a9i7pzn3hhkhxpaqgqg7gp3syupyf5gp9mmdsqg5zca”, “currency”: “MOL”, “block”: “{\”type\”:\”state\”,\”account\”:\”mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec\”,\”previous\”:\”65FA210BF9578C8CA0C1F5BECAF2EAE70C2D6B8CFDC839F897E11C6DB6CAE8F3\”,\”representative\”:\”mol_3ytentj15q44he4c778317r868wdttwufp96fsccjux4tuqc59ojgrwn6d4w\”,\”balance\”:\”1731194500000000000000000000000\”,\”link\”:\”0F4A77FB3E380B2E3270394336E66F0E36F986E2C2125B274FC27EC4C7C26385\”,\”signature\”:\”7310F2E1C0BB32F668796C92CDD564CE88214F6C065615EC821CEE1CFA124A1CFBEE4F0584FD488CCF8AC0AC1EA0E5574FA4D137CB0E2A433956C7839EEB0B04\”,\”work\”:\”5bdbe26964c621d0\”}”}123456789|params | 类型 | 描述 || - | - | - || amount | String | 充值总额 || from | String | 用户的打款地址 || to | String | 官方的收款地址 || currency | String | 单位或币种，暂时固定填MOL || block | String | 就是平时转账时，使用process这个action来处理block块时所需要的参数 |##### 响应头 HTTP/1.1 200 OKContent-Type:application/json; charset=utf-812##### 响应 { “message”: “居然被你充值成功了”, “code”: 200}123456789101112| key | 类型 | 描述 || - | - | - || uid | String | 该条数据的唯一ID |---#### 提现withdraw该接口用于告诉后台用户希望提现。&gt; 地址：https://api.xxx.com/path/v1/stake/withdraw###### 请求头 POST /mol_wallet/v1/stake/withdrawAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android12###### 参数 { “amount”: “50”, “currency”: “MOL”}123456| params | 类型 | 描述 || - | - | - || amount | String | 提现总额 || currency | String | 单位或币种，暂时固定填MOL |###### 响应头 HTTP/1.1 200 OKContent-Type:application/json; charset=utf-812###### 响应 { “message”: “居然被你提现成功了”, “code”: 200, “data”: { “uid”: “R23R23R23R2312E2D” }}123456789101112| key | 类型 | 描述 || - | - | - || uid | String | 该条数据的唯一ID |---#### 利息挖矿总记录records该接口获取用户在这个模块的一切记录列表，包括提币、充值、利息收益、分红收益等。&gt; 地址：https://api.xxx.com/path/v1/stake/records###### 请求头 GET /mol_wallet/v1/stake/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android12###### 参数 { “type”: “withdraw”, “last”: “2018-07-07 17:52”}123456| params | 类型 | 描述 || - | - | - || type | String | 该参数默认不传则表达获取所有类型记录，withdraw表示获取提现记录，deposit表示获取充值记录，interest表示获取利息记录，dividend表示获取分红记录 || last | String | 由于该接口顺义那边不好按page和pageSize的方式实现分页，因此使用last作为上一次请求的最后一行的标记，在第1页，也就是第一次请求的时候，这个last可以不传，同时在返回的字段中有一个last，在请求第2页时，将第1页返回的last字段带过去就可以了 |###### 响应头 HTTP/1.1 200 OKContent-Type:application/json; charset=utf-812###### 响应 { “message”: “居然被你查询成功了”, “code”: 200, “first”: “2018-07-07 17:52”, “next”: “2018-07-07 17:52”, “previous”: “2018-07-07 17:52”, “last”: “2018-07-07 17:52”, “data”: [ { “uid”: “1r12r12r12r1”, “type”: “withdraw”, “title”: “提币”, “description”: “锁仓，暂时不可提取”, “amount”: “300000”, “time”: “2018-07-11 19:09:37”, “currency”: “MOL” }, { “uid”: “1r12r12r12r1”, “type”: “deposit”, “title”: “提币”, “description”: “”, “amount”: “300000”, “time”: “2018-07-11 19:09:37”, “currency”: “MOL” } ]}123456789101112131415161718| key | 类型 | 描述 || - | - | - || uid | String | 该条记录的唯一识别 || type | String | withdraw表示提现记录，deposit表示充值记录，interest表示利息记录，dividend表示分红记录 || title | String | 对类型的补充描述 || description | String | 对类型的补充描述，比如设计图中的“锁仓，暂时不可提取” || amount | String | 该类型下的金额 || time | String | 该记录的时间 || currency | String | 单位或者币种，此处固定MOL |---#### 利息明细与规则detail该接口用于告诉用户此次锁仓利息的详细规则和具体收益情况。&gt; 地址：https://api.xxx.com/path/v1/stake/detail###### 请求头 GET /mol_wallet/v1/stake/detailAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android12345###### 参数无###### 响应头 HTTP/1.1 200 OKContent-Type:application/json; charset=utf-812###### 响应 { “message”: “居然被你查询成功了”, “code”: 200, “data”: { “totalDividend”: “64646”, “turnover”: “30000000”, “dailyRate”: “0.02%”, “totalPrincipal”: “55245400”, “totalInterest”: “25623”, “currency”: “MOL” }}123456789101112131415161718192021222324252627282930313233343536373839| key | 类型 | 描述 || - | - | - || totalDividend | String | 本周总分红池中的总量 || turnover | String | 上周流通量 || dailyRate | String | 日利率 || totalPrincipal | String | 本周锁仓量 || totalInterest | String | 本周所有人连续累积的利息总和 || currency | String | 单位或者币种，此处固定MOL |---## 实现方案由于种种原因，考虑到该模块是混合开发模式，即只有充值界面是原生实现，其他部分均为Web实现，因此需要定义好职责边界和原生与H5交互的方法。#### 职责划分Android和iOS各分配一人做该模块中的充值界面，其他的Web由熊老师完成。#### 锁仓利息首页（Web实现）摩尔钱包App点击“发现”模块中配置好的锁仓利息Item，将token和App版本信息通过cookie形式传给Web，再由熊老师放到请求头里（由于本来考虑到对公共参数统一放请求头中处理，因此这里稍微麻烦一点）请求 https://api.xxx.com/path/v1/stake 接口获取数据显示出来。底部的说明文字写死就好，就暂时不出接口配置了。#### 首页点击账单进入账单页面（Web实现）请求 https://api.xxx.com/path/v1/stake/records 接口获取数据显示出来，注意请求头里的公共参数。#### 首页点击？icon进入规则明细（Web实现）请求https://api.xxx.com/path/v1/stake/detail 接口获取数据显示出来，注意请求头里的公共参数。#### 点击说明中的“（详细规则）”（Web实现）点击说明中的“（详细规则）”跳转的奥上面的规则明细中![说明-明细](https://i.imgur.com/MqmJ0mT.png)#### 点击首页中的部分功能块（Web实现）点击这些功能块都是跳转到“账单”列表页![部分功能块](https://i.imgur.com/tcaei3j.png)#### 点击充币按钮该处为JS调用原生--&gt;跳转原生充币页面,方法名为go2Deposit，例如Android调用代码： window.stake.go2Deposit();1234567#### 充币页面（原生实现）1. 请求 https://api.xxx.com/path/v1/stake/addresses接口获取指定的打到官方的收款地址。在经过一系列的转账流程后，会从公链的接口得到这笔转账的block的hash值，作为参数。2. 接着请求 https://api.xxx.com/path/v1/stake/deposit接口，传递如下参数： { “amount”: “50”, “fromAccount”: “mol_114x611xyehnj767bmxia1d67m3kqrtukxtdxkcptf4mzj8sea4ru779i78h”, “toAccount”: “mol_34qdk454gaxhic3w3a9i7pzn3hhkhxpaqgqg7gp3syupyf5gp9mmdsqg5zca”, “currency”: “MOL”, “block”: “{\”type\”:\”state\”,\”account\”:\”mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec\”,\”previous\”:\”65FA210BF9578C8CA0C1F5BECAF2EAE70C2D6B8CFDC839F897E11C6DB6CAE8F3\”,\”representative\”:\”mol_3ytentj15q44he4c778317r868wdttwufp96fsccjux4tuqc59ojgrwn6d4w\”,\”balance\”:\”1731194500000000000000000000000\”,\”link\”:\”0F4A77FB3E380B2E3270394336E66F0E36F986E2C2125B274FC27EC4C7C26385\”,\”signature\”:\”7310F2E1C0BB32F668796C92CDD564CE88214F6C065615EC821CEE1CFA124A1CFBEE4F0584FD488CCF8AC0AC1EA0E5574FA4D137CB0E2A433956C7839EEB0B04\”,\”work\”:\”5bdbe26964c621d0\”}”}123其中block字段就是平时转账使用process这个action来处理block块时所需要的参数，后台来进行process，并直接返回200，但是此时只是在确认的状态，前端Web跳转到一个正在确认中的界面。注意请求头里的公共参数。3. 充币成功后，调用JS代码告诉Web已经充值成功，并隐藏该页面，否则就停留在充值页面，直到用户点击返回。JS方法名为deposited，以Android为例： webView.evaluateJavascript(&quot;javascript:deposited()&quot;, value -&gt; { Logger.e(&quot;value--&gt;&quot; + value); }); 12345#### 提币页面（Web实现）1. 点击提币按钮后，跳转到Web的提币页面，请求 https://api.xxx.com/path/v1/stake 该接口，或者从首页传进来，显示相应数据。2. 用户点击确定后，该处为JS调用原生--&gt;弹出密码验证框,方法名为go2Password，例如Android调用代码： window.stake.go2Password();123. 密码验证成功后，原生调用JS，告诉H5密码验证成功，JS方法名为verifyPassword，以Android为例： webView.evaluateJavascript(&quot;javascript:verifyPassword()&quot;, value -&gt; { Logger.e(&quot;value--&gt;&quot; + value); }); 12344. 在原生调用JS的回调方法中，请求 https://api.xxx.com/path/v1/stake/withdraw 接口，以POST形式提交相关参数后跳转相应的页面展示结果即可。注意请求头里的公共参数。#### 点击顶部？此处原生调用JS，跳转到帮助界面，JS方法名为“go2Helper”，以Android为例： webView.evaluateJavascript(&quot;javascript:go2Helper()&quot;, value -&gt; { Logger.e(&quot;value--&gt;&quot; + value); }); 123#### 点击顶部账单此处原生调用JS，跳转到账单记录界面，JS方法名为“go2Records”，以Android为例： webView.evaluateJavascript(&quot;javascript:go2Records()&quot;, value -&gt; { Logger.e(&quot;value--&gt;&quot; + value); }); 123456789101112131415## 错误/异常处理* 不要发生了错误但给2xx响应，客户端可能会缓存成功的HTTP请求；* 正确设置http状态码，不要自定义；* Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。对第三点的实现稍微多说一点：Java 服务器端一般用异常表示 RESTful API 的错误。API 可能抛出两类异常：业务异常和非业务异常。业务异常由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。非业务类异常表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。业务类异常必须提供2种信息：1. 如果抛出该类异常，HTTP响应状态码应该设成什么；2. 异常的文本描述； 错误描述{ “message”: “特么的又错了”, “code”: 500, “document”: “https://developer.xxx.com/v1/errors/500&quot;, “exception”: [ { “code”: “NullValue”, “target”: “PhoneNumber”, “message”: “Phone number must not be null” }, { “code”: “NullValue”, “target”: “LastName”, “message”: “Last name must not be null” }, { “code”: “MalformedValue”, “target”: “Address”, “message”: “Address is not valid” } ]}12 错误请求头{ “date”: “Mon, 08 Jan 2018 03:07:08 GMT”, “server”: “nginx/1.10.3 (Ubuntu)”, “connection”: “keep-alive”, “content-length”: “237”, “content-type”: “application/json”}` url失效随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 对于后台文档的要求文档要求描述详尽，尽可能的引导接口使用者理解接口设计，这样才能减少接口的改动，又能适应多变的业务。 容错性（健壮性）考虑到如果测试或者运营中有变动，要求每一个Web页面得有容错机制，比如关停该功能，则web必须的有相应的页面展示。]]></content>
  </entry>
  <entry>
    <title><![CDATA[摩尔钱包（国际版）接口文档]]></title>
    <url>%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E5%9B%BD%E9%99%85%E7%89%88%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E5%9B%BD%E9%99%85%E7%89%88%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[摩尔钱包（国际版）接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 登录（获取token和用户信息）该接口用于登陆获取token和部分用户信息，由于我们暂时定义的是通过短信来注册+登录，因此没有密码这些。 地址：https://api.xxx.com/path/v1/login 请求头1234567POST /path/v1/loginAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数：第三方登录1234&#123; &quot;account&quot;: &quot;233t23t23t23t32t&quot;, &quot;type&quot;: &quot;facebook&quot;&#125; 参数：账号（可以是自定义名称、手机号码、邮箱）密码登录12345&#123; &quot;account&quot;: &quot;233t23t23t23t32t&quot;, &quot;password&quot;: &quot;123456&quot;, &quot;type&quot;: &quot;password&quot;&#125; 参数：手机号码短信登录123456&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;account&quot;: &quot;18088881234&quot;, &quot;code&quot;: &quot;123456&quot;, &quot;type&quot;: &quot;sms&quot;&#125; 参数：邮箱验证登录12345&#123; &quot;account&quot;: &quot;233t23t23t23t32t&quot;, &quot;code&quot;: &quot;123456&quot;, &quot;type&quot;: &quot;email&quot;&#125; params 类型 是否必要 描述 account String 是 第三方登录获取的临时token type String 是 登录类型：1.facebook表示facebook登录2.weixin表示微信登录3.weibo表示微博登录4.QQ表示QQ登录5.email表示邮箱登录6.password表示账号密码登录所传内容要求忽略大小写 code String 否 验证码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;:&#123; &quot;token&quot;:&quot;3811c92206b0436693c4c4d25&quot; 用户的部分信息…… &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.token String 是 token值 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少countryCode、缺少phone等 XXX int 否 参数错误：countryCode错误、phone错误、格式错误等 XXX int 否 注册失败：与第一次注册相关 XXX int 否 登录失败：与登录相关 XXX int 否 账号异常：可能被封禁了 修改用户信息（如：绑定手机号） 地址：https://api.xxx.com/path/v1/users/phone 请求头1234567PATCH /path/v1/users/phoneAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数12345&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;13888888888&quot;, &quot;code&quot;: &quot;123456&quot;&#125; params 类型 是否必要 描述 countryCode String 是 区号 phoneNumber String 是 用户手机号码 code String 是 短信验证码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23r235235235235&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的用户的唯一标识 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少countryCode、缺少phone等 XXX int 否 参数错误：countryCode错误、phone错误、格式错误等 XXX int 否 注册失败：与第一次注册相关 XXX int 否 登录失败：与登录相关 XXX int 否 账号异常：可能被封禁了 退出登录（使token失效）该接口是退出登录状态,让token立马失效。 地址：https://api.xxx.com/path/v1/logout 请求头1234567DELETE /path/v1/logoutAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 映射信息获取当前可映射的名额人次、可映射的总额度。前端只需要判断两个数值都大于0，则可以映射，否则不可映射。 地址：https://api.xxx.com/path/wallet/v1/mapper 请求头1234567GET /path/wallet/v1/mapperAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;time&quot;: 100, &quot;currency&quot;: &quot;MOL&quot;, &quot;amount&quot;: 100000, &quot;unit&quot;: &quot;人次&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 time String 是 可映射的人次数 unit String 是 可映射的人次数的单位 currency String 是 可映射的MOL数 amount String 是 可映射的数量 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 映射记录获取该用户的映射历史记录。 地址：https://api.xxx.com/path/wallet/v1/mapper/records 请求头1234567GET /path/wallet/v1/mapper/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314151617181920212223242526&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;time&quot;: &quot;2018-10-10 19:20:21&quot;, &quot;address&quot;: &quot;0x3rt3r321r13r113r13r12&quot;, &quot;amount&quot;: &quot;100000&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;state&quot;: &#123; &quot;key&quot;: &quot;等待确认&quot;, &quot;value&quot;: 0 &#125; &#125;, &#123; &quot;time&quot;: &quot;2018-10-10 19:20:21&quot;, &quot;address&quot;: &quot;0x3rt3r321r13r113r13r12&quot;, &quot;amount&quot;: &quot;100000&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;state&quot;: &#123; &quot;key&quot;: &quot;等待确认&quot;, &quot;value&quot;: 0 &#125; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 time String 是 时间 address String 是 映射的ERC20的地址 amount String 是 此次映射的数量 currency String 是 单位MOL，固定写死 state JSON对象 是 描述此次映射的状态 state.key String 是 状态自然语言描述 state.value String 是 状态数据库中的值，用于参数传递，前端运用判断 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 市场行情获取当前可映射的名额人次、可映射的总额度。前端只需要判断两个数值都大于0，则可以映射，否则不可映射。 地址：https://api.xxx.com/path/wallet/v1/markets 请求头1234567GET /path/wallet/v1/marketsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: AndroidLocale: zh 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;data&quot;: [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;去交易&quot;, &quot;type&quot;: &quot;browser&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;currency&quot;: &quot;$&quot;, &quot;exchange&quot;: &quot;Fcoin&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;pair&quot;: &quot;MOL/ETH&quot;, &quot;price&quot;: &quot;46319.39725273&quot;, &quot;uid&quot;: &quot;fcoin_mol_eth&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;去交易&quot;, &quot;type&quot;: &quot;browser&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;currency&quot;: &quot;$&quot;, &quot;exchange&quot;: &quot;Bit-Z&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;pair&quot;: &quot;MOL/ETH&quot;, &quot;price&quot;: &quot;46319.39725273&quot;, &quot;uid&quot;: &quot;fcoin_mol_eth&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.currency String 是 价格单位 data.exchange String 是 交易所名称 data.image String 是 交易所LOGO图 data.pair String 是 交易对名称 data.price JSON对象 是 行情价格 data.uid String 是 该条数据的唯一标识 data.action JSON数组 是 该条数据所对应的执行事件 data.action.key String 是 此事件所对应的显示部分数据 data.action.type String 是 web表示跳转内嵌WebView，browser表示跳转到浏览器，native表示跳转原生 data.action.value String 是 该动作执行所需参数，如果是跳转内嵌WebView或者跳转外部浏览器则返回的是url 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段 XXX int 否 缺少参数：缺少token等 XXX int 否 参数错误：token错误等 个人中心这个模块的接口稍作修改，以后这种配置的接口都统一设置一种格式。 地址：https://api.xxx.com/path/wallet/v1/mycenter 请求头1234567GET /path/wallet/v1/mycenterAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: AndroidLocale: zh 参数1暂无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;138****8888&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;绑定手机号&quot;, &quot;uid&quot;: &quot;bangdingshoujihao&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;未绑定&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;Facebook&quot;, &quot;uid&quot;: &quot;Facebook&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;认证领红包&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;真人认证&quot;, &quot;uid&quot;: &quot;zhenrenrenzheng&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;我的钱包地址&quot;, &quot;uid&quot;: &quot;my_wallet_address&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ] ]&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 badge String 是 该字段用于标记是否阅读过，或者显示消息数，具体看设计图要求，如果设计图要求显示具体消息数，则返回数字即可，都已读则返回空字符串即可表示全部消息已读，比如有两个红包未领取，就可以返回一个2显示在界面上，如果没有红包领取可以返回””，如果设计图要求只需要一个红点表示为未读状态，则返回为非空即可，已读则返回”” description String 是 对于该item的描述信息，暂时未使用到 image String 是 如果是banner则表示banner图，如果是中间的每一条item则表示icon图 title String 是 该item描述的功能名称 uid String 是 该功能对应的item的唯一标识，暂时定义的是功能名称的中文全拼 visible String 是 该item是否显示，visible标识显示，invisible标识不显示 actions JSON数组 是 描述该item的交互动作，第0个表示点击，第1个表示长按，第2个表示侧滑，如果还有后续定义增加在后面 actions.action.uid String 是 该动作的唯一标识 actions.action.key String 是 该动作可能需要的提示语，在该接口中没有用到 actions.action.value String 是 该动作执行所需参数，如果是跳转内嵌WebView或者跳转外部浏览器则返回的是url actions.action.type String 是 web表示跳转内嵌WebView，browser表示跳转到浏览器，native表示跳转原生 异常 状态码 类型 是否必要 描述 XXX int 否 应用版本名称错误：针对的是请求头里的Application字段]]></content>
  </entry>
  <entry>
    <title><![CDATA[摩尔钱包新闻模块接口文档]]></title>
    <url>%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E6%96%B0%E9%97%BB%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E6%96%B0%E9%97%BB%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[摩尔钱包新闻模块接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 业务简介本模块是针对钱包业务的扩充，希望用户能通过钱包活动获取币，增加流通。 业务模块总体功能模块划分如下图所示： URL结构1https://&#123;serviceRoot&#125;/&#123;module&#125;/&#123;collection&#125;/&#123;id&#125; {serviceRoot} – 域名+端口号 (site URL) + 根目录 {module} – 模块名称 {collection} – 要访问的资源 {id} – 要访问的资源的唯一编号 公共请求头通过Content-Type指定请求与返回的数据格式有json和xml,暂时我们只管json的。其中请求数据还要指定Accept。其中额外添加的请求头里的参数注意大小写。12345Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android params 类型 是否必须 描述 Token String 是 这个不用解释了吧？ AppVersion String 是 App当前版本的版本名称 Platform String 是 Android表示Android平台，iOS表示iOS平台 公共参数（部分公共参数建议公放到请求头里）公共参数是指每一个接口都可能有的，为了减少篇幅，我在这里统一定义，同时后端要指定公共参数的默认值，且要保证没有传公共参数不会报错，所以需要一定的容错性，比如priceDes这个参数值，如果是用的是全部小写的，只要是不冲突，则可认为是准确的参数并且表达了按价格降序排列这个语意。常用公共参数如下： params 类型 是否必须 描述 keyword String 否 用于检索，不传或者传空，表示默认，默认不检索该关键字 sort String 否 用于对列表排序，不传则表示默认，默认按配置顺序，asc升序，desc降序 page int 否 用于分页描述，不传则表示默认，默认是第1页 pageSize int 否 表示该页显示的条数，不传则表示默认，默认为20条 个性参数个性参数就是除了公共参数之外的，看能否考虑统一用JSON将公共参数和个性参数浓缩成一个参数，把想要表达的参数通过json中的key-value形式传递。例如：https://api.xxx.com/both/v1/search/products?params={&quot;extra&quot;:&quot;你想填什么呢&quot;,&quot;token&quot;:&quot;token_523523523&quot;,&quot;data&quot;:{&quot;uid&quot;:&quot;23523523523523&quot;}} 或者考虑与业务相关的参数就用json形式包装，而与业务无关的个性参数就还是用传统的方式另立一个参数。例如：https://api.xxx.com/both/v1/search/products?limit=10&amp;offset=10&amp;params={&quot;keyword&quot;:&quot;方便面&quot;,&quot;sort&quot;:&quot;des&quot;} 通过商议将个性参数统一按原始的URL传参形式传递，不考虑上面所说的那种方式。 公共响应头12Content-Type:application/json; charset=utf-8Status:200 OK 公共响应体默认会有以下字段，不需要全部都有。12345678910111213&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;6565656565665&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 返回给接口调用者的描述，有可能用于显示到界面上，需要进行国际化处理 code int 是 这个与请求头中的状态码一致，是为了满足部分开发者的习惯 page int 否 分页请求中请求的当前页的页码 pageSize int 否 分页请求中一页的个数，默认为20 first String 否 分页请求中第一页的url ，如果没有则返回空字符串 next String 否 分页请求中下一页的url，如果没有则返回空字符串 previous String 否 分页请求中上一页的url，如果没有则返回空字符串 last String 否 分页请求中最后一页的url，如果没有则返回空字符串 data object 否 当前接口的具体数据由该json对象承载 uid String 否 对于每一个资源对象，在返回的时候，都应该返回操作这个资源对象的唯一码 HTTP动词表示操作。常用的HTTP动词有下面五个（括号里是对应的SQL命令）。 GET（SELECT）：从服务器取出资源（一项或多项）。例如:GET /zoos：列出所有动物园。 POST（CREATE）：在服务器新建一个资源。例如:POST /zoos：新建一个动物园。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。例如:PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）。 DELETE（DELETE）：从服务器删除资源。例如:DELETE /zoos/ID：删除某个动物园。 状态码作为API的设计者，正确的将API执行结果和失败原因用清晰简洁的方式传达给客户程序是十分关键的一步。我们确实可以在HTTP的相应内容中描述是否成功，如果出错是因为什么，然而，这就意味着用户需要进行内容解析，才知道执行结果和错误原因。因此，HTTP响应代码可以保证客户端在第一时间用最高效的方式获知 API 运行结果，并采取相应动作。下表列出了比较常用的响应代码。常用的http状态码及使用场景： 响应代码 代码含义 200 已创建，请求成功且服务器已创建了新的资源。 201 是否只显示处于警告状态的应用实例。 301 重定向 , 请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。 302 重定向 , 请求的网页临时移动到新位置，但求者应继续使用原有位置来进行以后的请求。302 会自动将请求者转到不同的临时位置。 304 未修改，自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。 400 错误请求 , 服务器不理解请求的语法。 401 未授权 , 请求要求进行身份验证。 403 已禁止 , 服务器拒绝请求。 404 未找到 , 服务器找不到请求的网页。 405 方法禁用 , 禁用请求中所指定的方法。 406 不接受 , 无法使用请求的内容特性来响应请求的网页。 408 请求超时 , 服务器等候请求时超时。 410 已删除 , 如果请求的资源已被永久删除，那么，服务器会返回此响应。 412 未满足前提条件 , 服务器未满足请求者在请求中设置的其中一个前提条件。 415 不支持的媒体类型 , 请求的格式不受请求页面的支持。 500 内部服务器错误。 分页分页适用于GET类型且返回集合数据的请求，根据如下参数进行分页操作。分页返回的数据见公共响应体。12345&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20,&#125; params 类型 是否必须 描述 page int 否 同上 pageSize int 否 同上 项目url预览 站在数据的角度，若想满足各大模块的功能需求，可以将接口分成如下几类： base url：https://api.xxx.com/path/ 分类 接口地址 参数 新闻主题（分类）topics https://api.xxx.com/path/v1/topics 新闻列表+广告news https://api.xxx.com/path/v1/news topic的uid 收益profit https://api.xxx.com/path/v1/profit MOL（积分形式）收益记录profit/records https://api.xxx.com/path/v1/profit/records 摩尔币的记录mol/records https://api.xxx.com/path/v1/mol/record 主题（分类）topics针对新闻进行分类的接口，对应一般新闻页面中顶部的分类列表。 地址：https://api.xxx.com/path/v1/topics 请求头123456GET /path/v1/topicsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910111213141516171819202122232425262728293031&#123; &quot;message&quot;: &quot;居然被你看到了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;key&quot;: &quot;&quot;, &quot;value&quot;: &quot;推荐&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;key&quot;: &quot;&quot;, &quot;value&quot;: &quot;体育&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;key&quot;: &quot;&quot;, &quot;value&quot;: &quot;科技&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;key&quot;: &quot;&quot;, &quot;value&quot;: &quot;教育&quot; &#125;, &#123; &quot;uid&quot;: &quot;32t23t23sdvsdbse324h34h&quot;, &quot;key&quot;: &quot;&quot;, &quot;value&quot;: &quot;本地&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 uid String 是 该主题的唯一识别 key String 是 用于标记该主题，暂时用不到 value String 是 该主题的显示文本 新闻列表+广告news由于新闻列表中会夹杂广告，因此把广告当新闻处理。 地址：https://api.xxx.com/path/v1/news 请求头123456GET /path/v1/newsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?topic=23mksd9ssdpoi0weg&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 topic String 否 获取某一个主题（分类），对应上文topics接口中的uid，不传或者传空字符表示默认值，默认返回可能的所有新闻 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;advertisement&quot;, &quot;style&quot;: &quot;0&quot;, &quot;description&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;source&quot;: &quot;币世界&quot;, &quot;author&quot;: &quot;币老爷&quot;, &quot;time&quot;: &quot;2018-04-23 20:00&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, &quot;topic&quot;: &quot;34y34y34t3t34t432t4&quot;, &quot;images&quot;: [ &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot; ], &quot;share&quot;: &quot;https://app.mol.one/news/qfr23r23r23r2r3?url=http://toutiao.com/group/6536299962081214990/&quot;, &quot;like&quot;: &#123; &quot;state&quot;: &quot;like&quot;, &quot;number&quot;: &quot;200&quot; &#125; &#125;, &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;type&quot;: &quot;news&quot;, &quot;style&quot;: &quot;0&quot;, &quot;description&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;source&quot;: &quot;币世界&quot;, &quot;author&quot;: &quot;币老爷&quot;, &quot;time&quot;: &quot;2018-04-23 20:00&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, &quot;topic&quot;: &quot;34y34y34t3t34t432t4&quot;, &quot;images&quot;: [ &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot; ], &quot;share&quot;: &quot;https://app.mol.one/news/qfr23r23r23r2r3?url=http://toutiao.com/group/6536299962081214990/&quot;, &quot;like&quot;: &#123; &quot;state&quot;: &quot;like&quot;, &quot;number&quot;: &quot;200&quot; &#125; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 该条资讯的唯一标示，可用于获取详情 data.title String 是 文章标题 data.type String 是 表达该item的类型，分两种，值为news表示新闻，值为advertisement表示广告 data.style String 是 标记样式类型的，我们规定每一个item都有且只有4中样式，无论是广告还是news，详细查看设计稿。值为0表示无图片的形式，值为1表示左边只有一张图片的形式，值为2表示只有一张大图片形式（通常为video的预览图），值为3表示3张小图片形式 data.description String 是 文章描述 data.source String 是 文章来源 data.author String 是 文章作者 data.time String 是 时间 data.url String 是 该条资讯web连接 data.topic String 是 所属的topic（类型）的uid data.images JSON数组 是 文章配图，图片个数与style这个类型规定的一致 data.share String 是 分享的url，url=https://www.baidu.com/ 参数是真实的今日头条对应的url。 data.like JSON对象 是 用于表示点赞数和点赞状态 data.like.state String 是 like表示已点赞，unlike表示未点赞 data.like.number String 是 点赞数 点赞like此处的点赞是要消耗摩尔币，优先消耗未提现的部分，如果未提现部分不够，则code返回某一个值，当前端收到该值则走支付10MOL的流程。这里是不允许取消点赞的，因为此时可能已经分了后来人的钱。 地址：https://api.xxx.com/path/v1/like 请求头123456POST /path/v1/likeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数1234&#123; &quot;itemId&quot;: &quot;13r13rt1312412er12r1&quot;, &quot;action&quot;: &quot;like&quot;&#125; params 类型 是否必须 描述 itemId String 是 新闻item的uid action String 否 不传表示默认，默认表示点赞，值为like表示点赞，值为unlike表示取消点赞 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;2342423233&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data object 是 当前接口的具体数据由该json对象承载 data.uid String 是 所操作的那个新闻item的uid 收益profit这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口来查询余额状态。 地址：https://api.xxx.com/path/v1/profit 请求头123456GET /path/v1/profitAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;accumulation&quot;: &quot;11124525&quot;, &quot;balance&quot;: &quot;95885&quot;, &quot;currency&quot;: &quot;MOL&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.accumulation String 是 该账户历史累积收益，非raw类型的值 data.balance String 是 该账户上可用于提现的收益，非raw类型的值 data.currency String 是 对应的币种的单位 MOL（积分形式）收益记录profit/records这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口查询收益记录。 地址：https://api.xxx.com/path/v1/profit/records 请求头123456GET /path/v1/profit/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789101112131415161718192021222324252627282930&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该JSON对象承载 data.uid String 是 交易记录主键 data.title String 是 交易记录标题名称 data.description String 是 交易记录描述 data.amount String 是 交易记录金额 data.image String 是 交易记录图标 data.currency String 是 交易记录币种 data.time String 是 交易记录时间 提现（从MOL积分币到MOL链）withdraw这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口让用户提现，从MOL积分币换成MOL链上的真实币。 地址：https://api.xxx.com/path/v1/withdraw 请求头123456POST /path/v1/withdrawAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数1234&#123; &quot;amount&quot;: &quot;50&quot;, &quot;currency&quot;: &quot;MOL&quot;&#125; params 类型 是否必须 描述 amount String 否 提现额度，允许从积分币到MOL链上的币提现多少通过该参数控制，非raw类型，不传表示默认，默认表示全部提现 currency String 否 默认传MOL（大写） 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567&#123; &quot;message&quot;: &quot;居然被你提现成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;235235235&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.uid String 是 该次提现生成的提现记录uid，可通过这个查询到该条提现记录 MOL（积分形式）提现记录withdraw/records这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口查询提现记录。 地址：https://api.xxx.com/path/v1/withdraw/records 请求头123456GET /path/v1/withdraw/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910111213141516171819202122232425262728293031323334&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;content&quot;: &quot;提现到钱包&quot;, &quot;amount&quot;: &quot;+50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot;, &quot;state&quot;: &quot;申请中&quot;, &quot;address&quot;: &quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&quot;, &quot;type&quot;: &quot;applying&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;content&quot;: &quot;提现到钱包&quot;, &quot;amount&quot;: &quot;+50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot;, &quot;state&quot;: &quot;已到账&quot;, &quot;address&quot;: &quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&quot;, &quot;type&quot;: &quot;received&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该JSON对象承载 data.uid String 是 提现记录主键 data.content String 是 提现记录标题名称 data.amount String 是 提现记录总额 data.image String 否 提现记录图标，可以不用这个 data.currency String 是 提现记录币种标识 data.time String 是 提现记录时间 data.state String 是 提现记录状态，数据库改积分数值几乎的秒级的，而从积分到链上，会有一段确认时间，因此需要设计一个状态来给用户展示，两种状态：申请中，已到账 data.address String 是 提现地址（提现的收款地址） data.type String 是 提现记录状态判断值，根据这个参数来判断当前状态，值为applying表示申请中，值为received表示已到账 实现方案新闻来源新闻来源由欧阳通过分析得出一个结论是直接用今日头条之前的一个域名接口 http://m.365yg.com/list/?tag=news_military&amp;as=A125BB5695B10A9&amp;format=json_raw 其中参数部分欧阳要具体列出来，并标明意思。于是整体思路如下： 后台通过该接口获取到如下格式数据（由于太长了，我只截取其中某一个新闻的JSON） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; &quot;media_name&quot;: &quot;央视网新闻&quot;, &quot;ban_comment&quot;: 0, &quot;abstract&quot;: &quot;“人民是历史的创造者，人民是真正的英雄。从乡村振兴到脱贫攻坚，从高质量发展到科技创新，从贯彻新发展理念到实战化练兵。&quot;, &quot;image_list&quot;: [], &quot;datetime&quot;: &quot;2018-03-25 17:05&quot;, &quot;article_type&quot;: 0, &quot;tag&quot;: &quot;news_politics&quot;, &quot;has_m3u8_video&quot;: 0, &quot;keywords&quot;: &quot;人民军队,两会,习近平,四梁八柱,中华民族&quot;, &quot;display_dt&quot;: 1521850927, &quot;has_mp4_video&quot;: 0, &quot;aggr_type&quot;: 1, &quot;cell_type&quot;: 0, &quot;article_sub_type&quot;: 0, &quot;bury_count&quot;: 0, &quot;title&quot;: &quot;习近平两会“话中画”&quot;, &quot;source_icon_style&quot;: 6, &quot;tip&quot;: 0, &quot;has_video&quot;: false, &quot;share_url&quot;: &quot;http://m.toutiao.com/a6536299962081214990/?iid=0&amp;app=news_article&quot;, &quot;label&quot;: &quot;置顶&quot;, &quot;source&quot;: &quot;央视网新闻&quot;, &quot;comment_count&quot;: 101, &quot;article_url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;publish_time&quot;: 1521850927, &quot;group_flags&quot;: 0, &quot;middle_mode&quot;: true, &quot;has_image&quot;: true, &quot;action_extra&quot;: &quot;&#123;\&quot;channel_id\&quot;: 0&#125;&quot;, &quot;tag_id&quot;: &quot;6536299962081214990&quot;, &quot;source_url&quot;: &quot;/i6536299962081214990/&quot;, &quot;display_url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;is_stick&quot;: true, &quot;item_id&quot;: &quot;6536299962081214990&quot;, &quot;repin_count&quot;: 31024, &quot;cell_flag&quot;: 262155, &quot;source_open_url&quot;: &quot;sslocal://profile?uid=50025817786&quot;, &quot;level&quot;: 0, &quot;digg_count&quot;: 9, &quot;behot_time&quot;: 1521968742, &quot;hot&quot;: 0, &quot;cursor&quot;: 1521968742999, &quot;url&quot;: &quot;http://toutiao.com/group/6536299962081214990/&quot;, &quot;image_url&quot;: &quot;https://p3.pstatp.com/list/15218509162387765f09457&quot;, &quot;user_repin&quot;: 0, &quot;label_style&quot;: 6, &quot;video_style&quot;: 0, &quot;media_info&quot;: &#123; &quot;avatar_url&quot;: &quot;http://p1.pstatp.com/large/bc20000b91968707dab&quot;, &quot;media_id&quot;: 50044041847, &quot;name&quot;: &quot;央视网新闻&quot;, &quot;user_verified&quot;: true &#125;, &quot;group_id&quot;: &quot;6536299962081214990&quot;, &quot;gallary_image_count&quot;: 3&#125; 后台拿到数据后转成新闻列表接口中要求的格式，然后返回给前端。 这么做的原因是需要做容错机制，因为考虑到该接口不是永远都能用，也没有经过检验，因此我们还要考虑其他方案，万一不能用了，起码不至于强制前端更新App。 阅读奖励的请求阅读一段时间会有奖励，此时就要告诉后台请求奖励，考虑安全因素，因此使用长连接来发送该消息，即多一个消息类型，如下所示： 请求1234567&#123; &quot;uid&quot;: &quot;A3BA3BA3BA3BC&quot;, &quot;uri&quot;: &quot;v1/requestNewsAwards&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;3r213r23r23r142151234&quot; &#125;&#125; params 类型 是否必须 描述 uid String 是 该条消息的uid uri String 是 该消息类型的标识 data.uid String 是 该条新闻的uid，告诉后台是对哪条新闻的奖励 同时一个用户一天能通过阅读获取的MOL币的个数是有上限的，以及本人针对该文章能获取的币也是有上限的，这两个上限是配置化。本来想将这种消息类型做成通用的，即请求多少奖励通过参数传给后台，这样未来其他项目就只要直接改奖励的MOL的个数，但是考虑到安全和可控等因素，还是独立一个uri类型了。 响应12345678910&#123; &quot;message&quot;: &quot;恭喜你，连接成功&quot;, &quot;code&quot;: 200, &quot;uid&quot;: &quot;A3BA3BA3BA3BC&quot;, &quot;uri&quot;: &quot;v1/requestNewsAwards&quot;, &quot;data&quot;: &#123; &quot;amount&quot;: &quot;1&quot;, &quot;currency&quot;: &quot;MOL&quot; &#125;&#125; 分享的链接实现由于我们分享的链接中的数据本质不是我们自己的，连HTML都是别人写好了的，但是想嵌入我们自己的业务逻辑代码，因此分享给用户点击的url必须是mol.one域名下的： https://mol.one/news/grwefgwq423t2t23?url=https://www.baidu.com 该url中news路径下对应的是熊老师写的程序，将 https://www.baidu.com 的内容显示在里面，同时底部加一个领取红包的按钮。]]></content>
  </entry>
  <entry>
    <title><![CDATA[用户系统接口文档]]></title>
    <url>%2F%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%2F%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[用户系统接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 发送短信验证码该接口用于向指定手机发送短信验证码，由于该接口是暴露在外的，因此需要尽量做到严格限制，比如一个手机号码一天只能发送多少条，一个IP地址最多只允许多少个手机号码发送短信。 地址：https://api.xxx.com/path/sms 请求头123456POST /path/smsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1234&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;居然发成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;F2W34T23T23T23T23T&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code String 是 同上 data Json对象 是 同上 data.uid String 是 同上 登录（获取token和用户信息）该接口用于登陆获取token和部分用户信息，由于我们暂时定义的是通过短信来注册+登录，因此没有密码这些。 地址：https://api.xxx.com/path/login 请求头123456POST /path/loginAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数123456&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phone&quot;: &quot;15297838217&quot;, &quot;password&quot;: &quot;111111&quot;, &quot;sms&quot;: &quot;348543&quot;&#125; params 类型 是否必要 描述 countryCode String 是 国家区号 phone String 是 手机号码 password String 否 密码 sms String 否 验证码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;:&#123; &quot;token&quot;:&quot;3811c92206b0436693c4c4d25&quot; 用户的部分信息…… &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.token String 是 token值 退出登录（使token失效）该接口是退出登录状态,让token立马失效。 地址：https://api.xxx.com/path/logout 请求头123456DELETE /path/logoutAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 注册(添加用户) 地址：https://api.xxx.com/path/register 请求头123456POST /path/registerAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1234567&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;password&quot;: &quot;111111&quot;, &quot;phone&quot;: &quot;15297838217&quot;, &quot;smsCode&quot;: &quot;123829&quot;, &quot;source&quot;: &quot;wallet&quot;&#125; params 类型 是否必须 描述 countryCode String 是 国家区号 phone String 是 手机号码 password String 是 密码 smsCode String 是 短信验证码 source String 是 表示用户注册来源，值为wallet表示来自钱包的注册用户 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;dec26723c4324bdb91cead673f8b77ab&quot;, &quot;token&quot;: &quot;qf13r13r13r13r13r&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.uid String 是 返回用户创建的uid值 data.token String 是 注册成功后就让其直接登录，因此返回token 查询用户该接口是给后台系统使用的，因此要控制要权限。 查询多个用户（批量操作） 地址：https://api.xxx.com/path/users 请求头123456GET /path/userAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数以下参数都是只是过滤作用 ?uid=05y45y3y34y086&amp;userName=用户名&amp;nickName=昵称&amp;countryCode=0086&amp;phone=13888888888&amp;enable=true params 类型 是否必要 描述 uid String 否 用户id userName String 否 用户名 nickName String 否 昵称 countryCode String 否 国家区号 phone String 否 手机号码 enable boolean 否 该参数可以过滤出是否是黑名单的用户 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2r323r23r32r&quot;, &quot;userName&quot;: &quot;用户名&quot;, &quot;nickName&quot;: &quot;昵称&quot;, &quot;avatar&quot;: &quot;用户头像&quot;, &quot;latestLogin&quot;: &quot;最后登录时间&quot;, &quot;loginTimes&quot;: &quot;登录次数&quot;, &quot;token&quot;: &quot;最新token&quot;, &quot;source&quot;: &quot;来源&quot;, &quot;createTime&quot;: &quot;创建时间&quot;, &quot;enabled&quot;: &quot;是否有效&quot;, &quot;countryCode&quot;: &quot;国家区号&quot;, &quot;phone&quot;: &quot;手机号码&quot; &#125;, &#123; &quot;uid&quot;: &quot;2r323r23r32r&quot;, &quot;userName&quot;: &quot;用户名&quot;, &quot;nickName&quot;: &quot;昵称&quot;, &quot;avatar&quot;: &quot;用户头像&quot;, &quot;latestLogin&quot;: &quot;最后登录时间&quot;, &quot;loginTimes&quot;: &quot;登录次数&quot;, &quot;token&quot;: &quot;最新token&quot;, &quot;source&quot;: &quot;来源&quot;, &quot;createTime&quot;: &quot;创建时间&quot;, &quot;enabled&quot;: &quot;是否有效&quot;, &quot;countryCode&quot;: &quot;国家区号&quot;, &quot;phone&quot;: &quot;手机号码&quot; &#125; ]&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 uid值 data.userName String 是 用户名 data.nickName String 是 昵称 data.avatar String 是 用户头像 data.latestLogin String 是 最后登录时间 data.loginTimes String 是 登录次数 data.token String 是 最新token data.source String 是 来源 data.createTime String 是 创建时间 data.enabled int 是 是否有效 data.countryCode String 是 国家区号 data.phone String 是 手机号码 查询单个用户 地址：https://api.xxx.com/path/users/{uid} 请求头123456GET /path/user&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;2r323r23r32r&quot;, &quot;userName&quot;: &quot;用户名&quot;, &quot;nickName&quot;: &quot;昵称&quot;, &quot;avatar&quot;: &quot;用户头像&quot;, &quot;latestLogin&quot;: &quot;最后登录时间&quot;, &quot;loginTimes&quot;: &quot;登录次数&quot;, &quot;token&quot;: &quot;最新token&quot;, &quot;source&quot;: &quot;来源&quot;, &quot;createTime&quot;: &quot;创建时间&quot;, &quot;enabled&quot;: &quot;是否有效&quot;, &quot;countryCode&quot;: &quot;国家区号&quot;, &quot;phone&quot;: &quot;手机号码&quot; &#125;&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.uid String 是 uid值 data.userName String 是 用户名 data.nickName String 是 昵称 data.avatar String 是 用户头像 data.latestLogin String 是 最后登录时间 data.loginTimes String 是 登录次数 data.token String 是 最新token data.source String 是 来源 data.createTime String 是 创建时间 data.enabled int 是 是否有效 data.countryCode String 是 国家区号 data.phone String 是 手机号码 修改用户信息（暂时不考虑批量操作） 地址：https://api.xxx.com/path/users/{uid} 请求头123456PUT /path/users/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数123456&#123; &quot;userName&quot;: &quot;用户名&quot;, &quot;nickName&quot;: &quot;昵称&quot;, &quot;avatar&quot;: &quot;上传文件&quot;, 其他参数……&#125; params 类型 是否必要 描述 userName String 否 用户名 nickName String 否 昵称 avatar File 否 用户头像 其他参数 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23r235235235235&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的用户的唯一标识 查询用户设备信息 地址：https://api.xxx.com/path/v1.0/users/{uid}/devices 请求头123456GET /path/users/&#123;uid&#125;/devicesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314151617181920212223242526272829&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;:&#123; [ &#123; &quot;uid&quot;: &quot;uid&quot;, &quot;appDebug&quot;: &quot;是否为debug版本&quot;, &quot;appVersioncode&quot;: &quot;版本号&quot;, &quot;appVersionname&quot;: &quot;版本名称（iOS中称为版本号），例如1.0.1&quot;, &quot;deviceDisplay&quot;: &quot;系统屏幕信息&quot;, &quot;deviceDisplayheight&quot;: &quot;屏幕像素高度&quot;, &quot;deviceDisplaywidth&quot;: &quot;屏幕像素宽度&quot;, &quot;deviceDrand&quot;: &quot;品牌信息，如小米、华为&quot;, &quot;deviceFingerprint&quot;: &quot;设备指纹，一个综合的，唯一的关于设备的描述&quot;, &quot;deviceManufacturer&quot;: &quot;生产厂商信息&quot;, &quot;deviceModel&quot;: &quot;型号信息&quot;, &quot;deviceProduct&quot;: &quot;G750-T01&quot;, &quot;deviceid&quot;: &quot;根据综合信息生成的一个设备唯一ID&quot;, &quot;osHost&quot;: &quot;本机ip地址&quot;, &quot;osIsroot&quot;: &quot;手机系统是否有Root过&quot;, &quot;osVersion&quot;: &quot;系统版本号，如19代表4.4&quot;, &quot;networkIp&quot;: &quot;外网ip&quot; &quot;createTime&quot;: &quot;创建时间&quot; &quot;enabled&quot;: &quot;是否有效&quot; &#125; ] &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.uid JSON对象 是 同上 data.uid String 是 uid值 data.appDebug String 是 是否为debug版本 data.appVersioncode String 是 版本号 data.appVersionname String 是 版本名称（iOS中称为版本号），例如1.0.1 data.deviceDisplay String 是 系统屏幕信息 data.deviceDisplayheight String 是 屏幕像素高度 data.deviceDisplaywidth String 是 屏幕像素宽度 data.deviceDrand String 是 品牌信息，如小米、华为 data.deviceFingerprint String 是 设备指纹，一个综合的，唯一的关于设备的描述 data.deviceManufacturer String 是 生产厂商信息 data.deviceModel String 是 型号信息 data.deviceProduct String 是 G750-T01 data.deviceid String 是 根据综合信息生成的一个设备唯一ID data.osHost String 是 手机系统是否有Root过 data.osVersion String 是 系统版本号，如19代表4.4 data.networkIp String 是 外网ip data.osVersion String 是 创建时间 data.osVersion String 是 是否有效 刷新token对token的期限进行刷新等地址：https://api.xxx.com/path/v1/tokens 请求头123456PUT /path/v1/tokensAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数123&#123; &quot;token&quot;: &quot;token_3523235&quot;&#125; key 类型 描述 token String 用户现在使用的token 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: &quot;3000&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data.token String 获取的token data.expires String 期限 查询token状态地址：https://api.xxx.com/both/v1/tokens/token_255235235 请求头123456GET /both/v1/tokens/token_255235235Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: &quot;3000&quot;, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data JSON对象 data对象不为空则表示该token是合法的。 data.token String 获取的token data.expires String 期限 添加用户设备信息 地址：https://api.xxx.com/path/v1.0/users/{uid}/devices 请求头123456POST /path/users/&#123;uid&#125;/devicesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1234567891011121314151617 &#123; &quot;appDebug&quot;: &quot;是否为debug版本&quot;, &quot;appVersioncode&quot;: &quot;版本号&quot;, &quot;appVersionname&quot;: &quot;版本名称（iOS中称为版本号），例如1.0.1&quot;, &quot;deviceDisplay&quot;: &quot;系统屏幕信息&quot;, &quot;deviceDisplayheight&quot;: &quot;屏幕像素高度&quot;, &quot;deviceDisplaywidth&quot;: &quot;屏幕像素宽度&quot;, &quot;deviceDrand&quot;: &quot;品牌信息，如小米、华为&quot;, &quot;deviceFingerprint&quot;: &quot;设备指纹，一个综合的，唯一的关于设备的描述&quot;, &quot;deviceManufacturer&quot;: &quot;生产厂商信息&quot;, &quot;deviceModel&quot;: &quot;型号信息&quot;, &quot;deviceProduct&quot;: &quot;G750-T01&quot;, &quot;deviceid&quot;: &quot;根据综合信息生成的一个设备唯一ID&quot;, &quot;osHost&quot;: &quot;本机ip地址&quot;, &quot;osIsroot&quot;: &quot;手机系统是否有Root过&quot;, &quot;osVersion&quot;: &quot;系统版本号，如19代表4.4&quot; &#125; params 类型 是否必须 描述 appDebug String 是 是否为debug版本 appVersioncode String 是 版本号 appVersionname String 是 版本名称（iOS中称为版本号），例如1.0.1 deviceDisplay String 是 系统屏幕信息 deviceDisplayheight String 是 屏幕像素高度 deviceDisplaywidth String 是 屏幕像素宽度 deviceDrand String 是 品牌信息，如小米、华为 deviceFingerprint String 是 设备指纹，一个综合的，唯一的关于设备的描述 deviceManufacturer String 是 生产厂商信息 deviceModel String 是 型号信息 deviceProduct String 是 G750-T01 deviceid String 是 根据综合信息生成的一个设备唯一ID osHost String 是 手机系统是否有Root过 osVersion String 是 系统版本号，如19代表4.4 networkIp String 是 外网IP地址 osVersion String 是 创建时间 osVersion String 是 是否有效 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;2r323r23r32r&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的设备信息的唯一标识 删除用户设备信息 地址：https://api.xxx.com/path/v1.0/users/{uid}/devices/{uid} 请求头123456DELETE /path/v1.0/users/&#123;uid&#125;/devices/&#123;uid&#125;Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23t23t23t23t&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的设备信息的唯一标识 添加户黑名单该接口用于后台将可疑用户加入黑名单，被加入黑名单的用户是不能挖矿和提现的。黑名单表只是一个日志记录作用，真正表达表达某个用户是否可用是user表中的enable字段。 批量操作 地址：https://api.xxx.com/path/v1.0/blacks 请求头123456POST /path/v1.0/blacksAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1234567891011121314[ &#123; &quot;cause&quot;: &quot;001&quot;, &quot;uid&quot;: &quot;3522352352&quot; &#125;, &#123; &quot;cause&quot;: &quot;001&quot;, &quot;uid&quot;: &quot;235235235&quot; &#125;, &#123; &quot;cause&quot;: &quot;001&quot;, &quot;uid&quot;: &quot;23523523523&quot; &#125;] params 类型 是否必须 描述 cause String 是 加入黑名单的原因，到时候我们定义一套原因码，接口调用方只需要传某个原因码即可 uid String 是 用户唯一标识 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23t23t23t23t&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的设备信息的唯一标识 移除黑名单实际上是在blacks表中多增一条日志记录，实质上是把user表中某uid的用户信息中的enable字段改成true。 地址：https://api.xxx.com/path/v1.0/blacks 请求头考虑到参数问题，由于新增黑名单和删除黑名单的参数实际是一样的，为了表达一个是移除黑名单，一个是加入黑名单，就把移除黑名单的操作使用DELETE，如下： 123456DELETE /path/v1.0/blacksAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1234567891011121314[ &#123; &quot;cause&quot;: &quot;001&quot;, &quot;uid&quot;: &quot;3522352352&quot; &#125;, &#123; &quot;cause&quot;: &quot;001&quot;, &quot;uid&quot;: &quot;235235235&quot; &#125;, &#123; &quot;cause&quot;: &quot;001&quot;, &quot;uid&quot;: &quot;23523523523&quot; &#125;] params 类型 是否必须 描述 cause String 是 加入黑名单的原因，到时候我们定义一套原因码，接口调用方只需要传某个原因码即可 uid String 是 用户唯一标识 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23t23t23t23t&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.uid String 是 所操作的黑名单记录的唯一标识 查询用户收益 地址：https://api.xxx.com/path/v1.0/user/{uid}/profit 地址：https://api.xxx.com/path/v1.0/profit 请求头123456GET /path/v1.0/user/&#123;uid&#125;/profitAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 params 类型 是否必须 描述 balance String 是 可用余额 accumulation String 是 累积总量 currency String 是 单位币种 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;balance&quot;: &quot;100&quot;, &quot;accumulation&quot;: &quot;10000&quot;, &quot;currency&quot;: &quot;MOL&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.balance String 是 用户可提现的、可用余额 data.accumulation String 是 用户历史累积收益 data.currency String 是 币种，默认返回大写的MOL 国际化多语言 地址：https://api.xxx.com/path/v1.0/locales 请求头123456GET /path/v1.0/localesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数1无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314151617181920212223242526&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;key&quot;: &quot;zh&quot;, &quot;value&quot;: &quot;中文（简体）&quot;, &quot;uid&quot;: &quot;wefwefwe131241132r13&quot; &#125;, &#123; &quot;key&quot;: &quot;en&quot;, &quot;value&quot;: &quot;english&quot;, &quot;uid&quot;: &quot;wefwefwe131241132r13&quot; &#125;, &#123; &quot;key&quot;: &quot;ja&quot;, &quot;value&quot;: &quot;日本語&quot;, &quot;uid&quot;: &quot;wefwefwe131241132r13&quot; &#125;, &#123; &quot;key&quot;: &quot;ko&quot;, &quot;value&quot;: &quot;한글&quot;, &quot;uid&quot;: &quot;wefwefwe131241132r13&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON数组 是 同上 data.key String 是 该语言所对应的国际化标识，长用做参数 data.value String 是 该语言在该国文字中的提现形式 data.uid String 是 该语言唯一标识 设置国际化语言该接口用于设置该用户在我们公司所有应用中的语言种类，默认是zh中文简体。 地址：https://api.xxx.com/path/v1.0/locales 请求头123456PATCH /path/v1.0/localesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android 参数123&#123; &quot;key&quot;: &quot;zh&quot;&#125; params 类型 是否必须 描述 key String 否 不传表示默认，默认表示zh中文简体，所传值来自上一个语言列表中的key值 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789&#123; &quot;message&quot;: &quot;成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;key&quot;: &quot;en&quot;, &quot;value&quot;: &quot;english&quot;, &quot;uid&quot;: &quot;wefwefwe131241132r13&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.key String 是 该语言所对应的国际化标识，长用做参数 data.value String 是 该语言在该国文字中的提现形式 data.uid String 是 该语言唯一标识]]></content>
  </entry>
  <entry>
    <title><![CDATA[Websoket协议规范]]></title>
    <url>%2F%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%2F%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3%2F%E7%94%A8%E6%88%B7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[用户系统设计文档 Author：Leguang E-Mail：langmanleguang@qq.com 数据库设计 表功能介绍user_credential_t身份认证信息，用于用户登录。包括用用户唯一标识符，户名，密码，手机号码(含国家代码)，是否有效，创建时间，修改时间。在确保唯一性的前提下，可以对手机号码进行切换。系统中使用是否有效来作为黑名单开关，控制用户是否可以登录。 user_info_t用户信息，用于前段用户展现。包括用户唯一标识符(该标识符与user_credential_t中的唯一标识符一致)，昵称，头像，来源(首次注册成平台用户的来源app)，创建时间，修改时间。后续还可以将用户的一些非关键信息进行在该表完善。 user_token_t用户token信息，用于用户状态维持。包括用户唯一标识符(该标识符与user_credential_t中的唯一标识符一致)，访问token，访问token过期时间，刷新token，刷新token过期时间。用户登录时，会产生新的访问token和刷新token，并对该表对应的记录进行刷新，同时将访问token和刷新token分别写入缓存。进行会话有效期验证，以缓存是否存在作为唯一有效判断依据。访问token达到过期时间是，缓存将会删除对应的记录，若在刷新token过期时间内，可以支持产生一个新的访问token给访问端。若超过了刷新token过期时间，则需要再次登录。 user_login_h用户登录记录，记录用户登录流水。包括登录流水唯一标识符，登录用户唯一标识符，登录设备，登录ip，登录设备内部ip，登录应用，登录应用版本号(整型，主要用于前后版本的比较)，登录应用版本名称(文本，如v1.0.0，用于可视化展现，由于一些特殊原因，不能基于版本名称作为前后版本的判断依据)，登录方式(支持4种登录方式：password，sms，1keylogin，token；前面3种可作为登录方式的可选项，token只有在进行刷新会话的场景下才有效，比如上传初始化信息)，是否登录成功，备注信息(登录成功标注OK，失败标注失败原因)，登录时间，登录应用是否为debug版本，系统是否root，系统版本号，地理精度，地理纬度，地址。是否登录成功和备注信息，可以衍生作为后续用户安全性的一个判断指标，比如指定时间内失败次数达到多少次不能再次登录等。 user_login_summary_t用户登录汇总信息，只存取最后一次成功登录的信息。包括唯一标识符(与user_credential_t中的唯一标识符一致)，最近登录ip，最近登录设备内部ip，最近登录app名称(app_t的应用名称)，最近登录应用版本号，最近登录应用版本名称，最近登录方式，登录次数(只有登录成功成功在进行增加)，最近登录系统是否debug版本，最近登录是否root，登录系统的rom，最近登录系统版本号，最近登录经度，最近登录纬度，最近登录地址。 user_app_r用户应用关联，记录用户使用过的所有app。包括用户应用关联唯一标识符，用户唯一标识符，应用唯一标识符，是否有效，创建时间，修改时间。是否有效可以基于应用进行黑名单控制，可以在后续功能中进行完善。 app_t应用信息。包括应用唯一标识符，应用名称，应用显示名称，应用描述信息，是否有效，创建时间，修改时间。外部应用需要先注册为平台应用之后才能调用接口服务。当前支付中心，会基于应用唯一标识符进行公私钥发放。 app_version_t应用版本信息，用于各个平台下的版本信息。包括应用版本唯一标识符，应用标识符，版本号(整型，主要用于前后版本的比较)，版本名称(文本，如v1.0.0，用于可视化展现，由于一些特殊原因，不能基于版本名称作为前后版本的判断依据)，版本描述信息(如changelog)，平台(目前支持iOS，Android)，是否有效，创建时间，修改时间。 device_t设备信息，主要记录连接的设备信息。包括设备唯一标识符，系统屏幕信息，屏幕像素高度，屏幕像素宽度，品牌信息，设备指纹(一个综合的，唯一的关于设备的描述)，生产厂商，设备唯一ID，是否有效，创建时间，修改时间。后续可以基于设备是否有效进行黑名单控制。 block_t封禁信息，记录被批量封禁的对象。包括封禁唯一标识符，被封禁的对象类型(支持IP，DEVICE，USER)，被封禁对象列表(支持ip，设备唯一标识符(参考device_t中device_id))，原因描述，是否解封(封禁后，可以进行批量解封)，创建时间。本表主要用于管理维护，不作为是否被封禁的判断依据。可以批量选择IP，设备，用户进行封禁和解封。同一批对象封禁后进行解封，需要重新创建一条解封记录。而不是简单的修改是否被封禁标记。 block_element_r封禁元素关联，封禁时，除了对block_t中记录一条操作记录外，会在本表记录被封禁的具体对象(设备唯一ID，用户唯一标识符)。包括封禁元素记录序号，封禁对象唯一标识符(参考user_credential中的uid，device_t中的uid)，封禁元素类型(支持USER，DEVICE)。sys_blacklist_t黑名单列表，已经采用了block_t和block_elment_r，该表作废。 sms_phone_counter_t手机短信发送计数器，用于记录每个手机号码当日的短信发送量。包括唯一标识符，国家代码，手机号码，当日短信发送量，创建时间，修改时间。发起短信发送请求时，需要先获取该号码的发送量，如果修改时间在当前日期之前，则讲修改日期修改为当前日期，并将发送量置为1。 sms_ip_counter_tip短信发送计数器，用于记录每个ip当日短信发送量。包括唯一标识符，ip地址(支持ipv4、ipv6两种协议)，当日短信发送量，创建时间，修改时间。处理逻辑同sms_phone_counter_t。 user_locale_t用户语言区域，用于记录用户的常用语言。包括用户唯一标识符(同user_credential_t中的uid)，关联数据字典类型编码(如zh_CN，en_US)，国家/区域(格式[a-zA-Z]{2} | [0-9]{3}，参考java.util.Locale)，时区(格式GMT Sign Hours : Minutes，如GMT+8:00)，创建时间，修改时间。 sys_dict_type_t数据字典类型，用于维护系统常用枚举类型。包括类型唯一标识符，数据字典类型，类型名称(用于前段展现),条目类型(boolean、byte、char、short、Int、long、float、double等基本数据类型对应的包装类型，以及BigInteger、BigDecimal、String总共10种类型)，是否有效，创建时间，修改时间，是否有自条目，条目值(若没有子条目，可以直接设值)。 sys_dict_item_t数据字典条目，用于维护系统常用枚举值。包括唯一标识符，字典类型，条目编码(书写规则跟java常亮一致)，条目名称(用于前段展现)，条目值(需要配合sys_dictionary_type的item_type组合得到相应的值)，条目序号，是否有效，创建时间，修改时间。 point_account_t用户积分账户，记录用户积分的余额和累计积分。包括唯一标识符，用户唯一标识符，应用名称(参考app_t中的app_name)，历史累计积分，可用余额，创建时间，修改时间。具有积分体系的应用，使用集中化的方式进行存储，避免各个应用自建积分体系的繁冗工作。 point_record_t用户积分记录，用于记录用户每笔积分的出入项目，方便后续应用内部积分对账。包括唯一标识符，交易积分额度，账户，用户唯一标识符，应用名称，是否为收入项，事务唯一标识符，创建时间，修改时间。三方应用进行对接时，需要相同的存储事务唯一标识符，方便对账。事务唯一标识符，可以客户端生成，也可以通过transaction_t中集中发放。 transaction_t全局统一事务，用于分布式事务处理。包括唯一标识符，创建时间。 接口说明用户接口获取用户认证信息根据手机号码，或用户名精确查找用户认证信息。 链接GET /v1/credentials 参数 参数名 说明 传递方式 参数类型 userName 用户名 query string countryCode 国家代码 query string phoneNumber 手机号 query string 举例：/v1/credentials?countryCode=0086&amp;phoneNumber=18665801387 返回值1234567891011121314&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5e3d1bead71e11e89b0b00163e007a48&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;password&quot;: &quot;NULLD78C274515A44F5A1A4D96AB3A883F47&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-23 23:50:06&quot;, &quot;updateTime&quot;: &quot;2018-10-23 23:50:06&quot; &#125;&#125; 用户信息分页查询根据条件对用户数据进行分页查询。 链接GET /v1/users 参数 参数名 说明 传递方式 参数类型 uid 用户编号 query string userName 用户名 query string nickname 昵称 query string countryCode 国家代码 query string phoneNumber 手机号 query string enabled 用户是否有效，即设为黑名单 query boolean sortby 排序属性 query string order 排序顺序 query string page 第几页 query integer pageSize 每页记录数 query integer 举例：/v1/users?countryCode=0086&amp;page=2&amp;pageSize=3 返回值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;079d3543d8d211e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;13088834856&quot;, &quot;userName&quot;: &quot;008613088834856&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-26 03:48:42&quot;, &quot;latestLogin&quot;: &quot;2018-10-31 11:27:30&quot;, &quot;loginTimes&quot;: 2 &#125;, &#123; &quot;uid&quot;: &quot;082eb8c2dcff11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;15271940251&quot;, &quot;userName&quot;: &quot;008615271940251&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-31 11:20:55&quot;, &quot;latestLogin&quot;: &quot;2018-11-02 08:27:20&quot;, &quot;loginTimes&quot;: 3 &#125;, &#123; &quot;uid&quot;: &quot;08ae0660d74e11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;13888888888&quot;, &quot;userName&quot;: &quot;008613888888888&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-24 05:31:19&quot;, &quot;latestLogin&quot;: &quot;2018-11-02 11:42:03&quot;, &quot;loginTimes&quot;: 44 &#125; ], &quot;page&quot;: 2, &quot;pageSize&quot;: 3, &quot;first&quot;: &quot;https://api.imfmf.com/usercenter/v1/users?countryCode=0086&amp;page=1&amp;pageSize=3&quot;, &quot;next&quot;: &quot;https://api.imfmf.com/usercenter/v1/users?countryCode=0086&amp;page=3&amp;pageSize=3&quot;, &quot;previous&quot;: &quot;https://api.imfmf.com/usercenter/v1/users?countryCode=0086&amp;page=1&amp;pageSize=3&quot;, &quot;last&quot;: &quot;https://api.imfmf.com/usercenter/v1/users?countryCode=0086&amp;page=1&amp;pageSize=3&quot;&#125; 将用户加入黑名单将单个用户加入黑名单。目前做法仅仅是将当前用户设为无效，实际上还需要在block_t和block_item_t中增加相应的记录，后续可以去完善这一块 链接PATCH /v1/users/blacklist/{uid} 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string 举例：/v1/users/blacklist/5e3d1bead71e11e89b0b00163e007a48 返回值12345678910111213141516&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5e3d1bead71e11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: false, &quot;createTime&quot;: &quot;2018-10-23 23:50:06&quot;, &quot;latestLogin&quot;: &quot;2018-10-31 07:06:14&quot;, &quot;loginTimes&quot;: 7 &#125;&#125; 请注意，用户的enabled已经变成false了。 将用户移除黑名单将单个用户从黑名单中移除。目前做法仅仅是将当前用户设为有效，实际上还需要在block_t和block_item_t中增加相应的记录，后续可以去完善这一块 链接DELETE /v1/users/blacklist/{uid} 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string 举例：/v1/users/blacklist/5e3d1bead71e11e89b0b00163e007a48 返回值12345678910111213141516&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5e3d1bead71e11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-23 23:50:06&quot;, &quot;latestLogin&quot;: &quot;2018-10-31 07:06:14&quot;, &quot;loginTimes&quot;: 7 &#125;&#125; 请注意，用户的enabled已经恢复成true了。 按条件分页查询用户登录过的设备按用户唯一标识符，是否有效等条件查询用户登录过的设备，并可以指定排序字段和规则分页查询。 链接GET /v1/users/devices 参数 参数名 说明 传递方式 参数类型 userUid 用户唯一标识符 query string enabled 是否有效 query boolean sortby 排序属性 query string order 排序规则，支持ASC，DESC query string page 页数 query integer pageSize 每页行数 query integers 举例：/v1/users/devices?userUid=05ec0890c46811e898a000163e002b60 返回值12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;0b63192bc39011e898a000163e002b60&quot;, &quot;display&quot;: &quot;MHA-AL00 8.0.0.363(C00)&quot;, &quot;displayHeight&quot;: &quot;1808&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;HUAWEI&quot;, &quot;fingerprint&quot;: &quot;HUAWEI/MHA-AL00/HWMHA:8.0.0/HUAWEIMHA-AL00/363(C00):user/release-keys&quot;, &quot;manufacturer&quot;: &quot;HUAWEI&quot;, &quot;model&quot;: &quot;MHA-AL00&quot;, &quot;product&quot;: &quot;MHA-AL00&quot;, &quot;deviceID&quot;: &quot;0865580032738937300002366300CN01&quot;, &quot;createTime&quot;: &quot;2018-09-29 02:33:27&quot;, &quot;updateTime&quot;: &quot;2018-09-29 02:33:27&quot;, &quot;enabled&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;7df1aefdc46a11e898a000163e002b60&quot;, &quot;display&quot;: &quot;MHA-AL00 8.0.0.363(C00)&quot;, &quot;displayHeight&quot;: &quot;1808&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;HUAWEI&quot;, &quot;fingerprint&quot;: &quot;HUAWEI/MHA-AL00/HWMHA:8.0.0/HUAWEIMHA-AL00/363(C00):user/release-keys&quot;, &quot;manufacturer&quot;: &quot;HUAWEI&quot;, &quot;model&quot;: &quot;MHA-AL00&quot;, &quot;product&quot;: &quot;MHA-AL00&quot;, &quot;createTime&quot;: &quot;2018-09-30 04:37:09&quot;, &quot;updateTime&quot;: &quot;2018-09-30 04:37:09&quot;, &quot;enabled&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;91bb3c66c46a11e898a000163e002b60&quot;, &quot;display&quot;: &quot;MHA-AL00 8.0.0.363(C00)&quot;, &quot;displayHeight&quot;: &quot;1808&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;HUAWEI&quot;, &quot;fingerprint&quot;: &quot;HUAWEI/MHA-AL00/HWMHA:8.0.0/HUAWEIMHA-AL00/363(C00):user/release-keys&quot;, &quot;manufacturer&quot;: &quot;HUAWEI&quot;, &quot;model&quot;: &quot;MHA-AL00&quot;, &quot;product&quot;: &quot;MHA-AL00&quot;, &quot;createTime&quot;: &quot;2018-09-30 04:37:43&quot;, &quot;updateTime&quot;: &quot;2018-09-30 04:37:43&quot;, &quot;enabled&quot;: true &#125; ], &quot;page&quot;: 1, &quot;pageSize&quot;: 10, &quot;first&quot;: &quot;http://localhost:9941/usercenter/v1/users/devices?userUid=05ec0890c46811e898a000163e002b60&amp;page=1&amp;pageSize=10&quot;, &quot;next&quot;: &quot;http://localhost:9941/usercenter/v1/users/devices?userUid=05ec0890c46811e898a000163e002b60&amp;page=1&amp;pageSize=10&quot;, &quot;previous&quot;: &quot;http://localhost:9941/usercenter/v1/users/devices?userUid=05ec0890c46811e898a000163e002b60&amp;page=1&amp;pageSize=10&quot;, &quot;last&quot;: &quot;http://localhost:9941/usercenter/v1/users/devices?userUid=05ec0890c46811e898a000163e002b60&amp;page=1&amp;pageSize=10&quot;&#125; 按用户唯一标识符查询单个用户信息根据用户唯一标识符精确查询用户信息。 链接GET /v1/users/{uid} 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string 举例：/v1/users/5e3d1bead71e11e89b0b00163e007a48 返回值12345678910111213141516&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5e3d1bead71e11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-23 23:50:06&quot;, &quot;latestLogin&quot;: &quot;2018-10-31 07:06:14&quot;, &quot;loginTimes&quot;: 7 &#125;&#125; 查看用户最近登录的设备查看用户最近一次登录所用的设备。 链接GET /v1/users/{uid}/devices/latest 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string 举例：/v1/users/05ec0890c46811e898a000163e002b60/devices/latest 返回值123456789101112131415161718&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;91bb3c66c46a11e898a000163e002b60&quot;, &quot;display&quot;: &quot;MHA-AL00 8.0.0.363(C00)&quot;, &quot;displayHeight&quot;: &quot;1808&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;HUAWEI&quot;, &quot;fingerprint&quot;: &quot;HUAWEI/MHA-AL00/HWMHA:8.0.0/HUAWEIMHA-AL00/363(C00):user/release-keys&quot;, &quot;manufacturer&quot;: &quot;HUAWEI&quot;, &quot;model&quot;: &quot;MHA-AL00&quot;, &quot;product&quot;: &quot;MHA-AL00&quot;, &quot;createTime&quot;: &quot;2018-09-30 04:37:43&quot;, &quot;updateTime&quot;: &quot;2018-09-30 04:37:43&quot;, &quot;enabled&quot;: true &#125;&#125; 修改用户信息修改用户基本信息，包括头像，昵称，来源等。 链接PATCH /v1/users/{uid}/info 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string info 用户信息 body string info详情如下 参数名 说明 传递方式 参数类型 avatar 头像 string nickname 昵称 string source 来源 string uid 用户唯一标识符，可选填 string 举例：/v1/users/05ec0890c46811e898a000163e002b60/infoinfo参数123456&#123; &quot;avatar&quot;: &quot;http://www.asmile.com/avatar.png&quot;, &quot;nickname&quot;: &quot;马自达&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;&#125; 返回值12345678910&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;nickname&quot;: &quot;马自达&quot;, &quot;avatar&quot;: &quot;http://www.asmile.com/avatar.png&quot;, &quot;source&quot;: &quot;SICKLE&quot; &#125;&#125; 获取用户语言区域根据用户唯一标识符获取用户的语言区域信息。 链接GET /v1/users/{uid}/locale 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string 举例：/v1/users/05ec0890c46811e898a000163e002b60/locale 返回值123456789101112&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;language&quot;: &quot;zh_CN&quot;, &quot;region&quot;: &quot;CHN&quot;, &quot;timeZone&quot;: &quot;GMT+08:00&quot;, &quot;createTime&quot;: &quot;2018-11-04 17:40:40&quot;, &quot;updateTime&quot;: &quot;2018-11-04 17:40:40&quot; &#125;&#125; 设置用户语言区域设置指定用户的语言区域信息。 链接PATCH /v1/users/{uid}/locale 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string locale 语言区域信息 body string 语言区域信息参数 参数名 说明 传递方式 参数类型 language 语言 string region 国家代码 string timeZone 时区 string 举例：/v1/users/05ec0890c46811e898a000163e002b60/localebody参数12345&#123; &quot;language&quot;: &quot;en_US&quot;, &quot;region&quot;: &quot;USA&quot;, &quot;timeZone&quot;: &quot;GMT-08:00&quot;&#125; 返回值12345678910111213141516&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5e3d1bead71e11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-23 23:50:06&quot;, &quot;latestLogin&quot;: &quot;2018-10-31 07:06:14&quot;, &quot;loginTimes&quot;: 7 &#125;&#125; 修改密码提供一个传统的修改密码接口，传入用户名或者手机号码，老密码，新密码。用户名，手机号码，老密码验证通过后，更新新密码。 链接PATCH /v1/users/password 参数 参数名 说明 传递方式 参数类型 passwordInfo 用户密码信息 body string passwordInfo参数举例：PATCH /v1/users/password123456&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;newPassword&quot;: &quot;654321&quot;, &quot;originalPassword&quot;: &quot;123456&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;&#125; 返回值123456&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;newPassword&quot;: &quot;654321&quot;, &quot;originalPassword&quot;: &quot;123456&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;&#125; 获取当前用户指定应用的积分账户根据用户唯一标识符和应用名称获取积分账户。 链接GET /v1/users/{uid}/{appName}/points 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string appName 应用名称 path string 举例：/v1/users/05ec0890c46811e898a000163e002b60/SICKLE/points 返回值12345678910111213&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ed3895c46811e898a000163e002b60&quot;, &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;appName&quot;: &quot;sickle&quot;, &quot;accumulation&quot;: 0, &quot;balance&quot;: 0, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;updateTime&quot;: &quot;2018-09-30 04:19:29&quot; &#125;&#125; 给指定用户增减积分给用户对应的应用的账户增减积分。全局事务id，可用于分布式事务控制，及后续积分对账。 链接POST /v1/users/{uid}/{appName}/points 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string appName 应用名称 path string amount 积分数量 query double xid 全局事务id query string 举例：/v1/users/05ec0890c46811e898a000163e002b60/SICKLE/points?amount=1000&amp;xid=123eaf789822342cdfab3eee3e002b60 返回值1234567891011121314151617181920212223&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;4c539071e05c11e898a000163e002b60&quot;, &quot;amount&quot;: 1000, &quot;account&quot;: &#123; &quot;uid&quot;: &quot;05ed3895c46811e898a000163e002b60&quot;, &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;appName&quot;: &quot;sickle&quot;, &quot;accumulation&quot;: 1000, &quot;balance&quot;: 1000, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;updateTime&quot;: &quot;2018-11-04 18:06:05&quot; &#125;, &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;appName&quot;: &quot;SICKLE&quot;, &quot;income&quot;: true, &quot;transactionUid&quot;: &quot;123eaf789822342cdfab3eee3e002b60&quot;, &quot;createTime&quot;: &quot;2018-11-04 18:06:05&quot;, &quot;updateTime&quot;: &quot;2018-11-04 18:06:05&quot; &#125;&#125; 短信接口按用户唯一标识符查询单个用户信息输入国家代码和手机号码，发送短信验证码。 链接POST /v1/sms 参数 参数名 说明 传递方式 参数类型 phoneInfo 手机信息 body string 举例：/v1/sms参数1234&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;15000000000&quot;&#125; 返回值1234&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000&#125; 只返回成功与否。发送成功，指定的手机将会收到验证码信息。 极验接口极验预处理根据用户唯一标识符精确查询用户信息。 链接POST /v1/geetest/preprocess 参数 参数名 说明 传递方式 参数类型 param 预处理参数 body string 举例：/v1/geetest/preprocess参数1234&#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;&#125; 返回值123456789&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;success&quot;: 1, &quot;challenge&quot;: &quot;39c9a5ceaf6daad2426e3c6834d7f31b&quot;, &quot;gt&quot;: &quot;7e8626f9dfcbf3c4ef46fed3f5c30107&quot; &#125;&#125; 进行极验二次验证时，需要传入challenge。 极验二次验证验证预处理返回的challenge是否正确。 链接POST /v1/geetest/enhance 参数 参数名 说明 传递方式 参数类型 uid 用户标识符 path string 举例：/v1/geetest/enhance参数1234567&#123; &quot;challenge&quot;: &quot;39c9a5ceaf6daad2426e3c6834d7f31b&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;seccode&quot;: &quot;23345345adfetwgeywhhgfger&quot;, &quot;validate&quot;: &quot;true&quot;&#125; 返回值1234&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000&#125; 极验短信发送验证challenge是否正确，验证通过后发送短信至指定手机。 链接POST /v1/geetest/sms 参数 参数名 说明 传递方式 参数类型 param 极验短信参数 body string 举例：/v1/geetest/sms参数1234567&#123; &quot;challenge&quot;: &quot;39c9a5ceaf6daad2426e3c6834d7f31b&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;seccode&quot;: &quot;23345345adfetwgeywhhgfger&quot;, &quot;validate&quot;: &quot;true&quot;&#125; 返回值1234&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000&#125; token接口请求token请求token，创建用户会话。支持1keylogin，sms，password三种类型的登录。该接口整合了注册和登录功能，如果是首次登录则后台会进行用户的创建，然后创建访问token，如果账户已经存在，则直接处理登录逻辑。 链接POST /v1/tokens 参数 参数名 说明 传递方式 参数类型 tokenRequest 请求token参数 body string tokenRequest结构123456789101112131415&#123; &quot;accessToken&quot;: &quot;string&quot;, &quot;appId&quot;: &quot;string&quot;, &quot;appKey&quot;: &quot;string&quot;, &quot;countryCode&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot;, &quot;phone&quot;: &quot;string&quot;, &quot;randoms&quot;: &quot;string&quot;, &quot;sign&quot;: &quot;string&quot;, &quot;smsCode&quot;: &quot;string&quot;, &quot;telecom&quot;: &quot;string&quot;, &quot;timestamp&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;&#125; 以上是全量参数，支持1keylogin，sms，password三种类型的登录，每种类型所传的参数不一样。 1keylogin 登录参数：12345678910&#123; &quot;accessToken&quot;: &quot;string&quot;, &quot;appId&quot;: &quot;string&quot;, &quot;randoms&quot;: &quot;string&quot;, &quot;sign&quot;: &quot;string&quot;, &quot;telecom&quot;: &quot;string&quot;, &quot;timestamp&quot;: &quot;string&quot;, &quot;type&quot;: &quot;1keylogin&quot;, &quot;version&quot;: &quot;string&quot;&#125; 注：type是1keylogin,以上参数是通过创蓝闪验获取的 sms 登录123456&#123; &quot;countryCode&quot;: &quot;string&quot;, &quot;phone&quot;: &quot;string&quot;, &quot;smsCode&quot;: &quot;string&quot;, &quot;type&quot;: &quot;sms&quot;&#125; 注：type是sms,smsCode是事先获得的短信验证码 password 登录123456&#123; &quot;countryCode&quot;: &quot;string&quot;, &quot;password&quot;: &quot;string&quot;, &quot;phone&quot;: &quot;string&quot;, &quot;type&quot;: &quot;password&quot;&#125; 注：type是sms,password是用户注册过并设置了密码才有 登录时请求头Application 传 应用名:版本本名 如SICKLE:1.0.1Platform 传 android或iosToken 不用传 返回值12345678910111213141516171819&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;nickname&quot;: &quot;马自达&quot;, &quot;avatar&quot;: &quot;http://www.asmile.com/avatar.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;token&quot;: &quot;7c346efa24c64d0c857dd60303eb57d5&quot;, &quot;empowering&quot;: false, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;latestLogin&quot;: &quot;2018-11-05 02:52:30&quot;, &quot;loginTimes&quot;: 6 &#125;&#125; empowering为true代表是首次登录 获取token根据token信息，获取对应的用户信息。 链接GET /v1/tokens 参数 参数名 说明 传递方式 参数类型 Token 访问token header string Application 应用信息 header string Platform 平台 header string 举例：/v1/tokens参数Request Headers1234&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Token&quot;: &quot;7c346efa24c64d0c857dd60303eb57d5&quot;&#125; 返回值123456789101112131415161718&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;nickname&quot;: &quot;马自达&quot;, &quot;avatar&quot;: &quot;http://www.asmile.com/avatar.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;empowering&quot;: false, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;latestLogin&quot;: &quot;2018-11-05 02:52:30&quot;, &quot;loginTimes&quot;: 6 &#125;&#125; 刷新token传入现有的访问token，产生一个新的token。传入的token必须还未过期，否则会报错。 链接PUT /v1/tokens 参数 参数名 说明 传递方式 参数类型 Token 访问token header string Application 应用信息 header string Platform 平台 header string 举例：/v1/tokens参数1234&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Token&quot;: &quot;7c346efa24c64d0c857dd60303eb57d5&quot;&#125; 返回值12345678910111213141516171819&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;18665801387&quot;, &quot;userName&quot;: &quot;008618665801387&quot;, &quot;nickname&quot;: &quot;马自达&quot;, &quot;avatar&quot;: &quot;http://www.asmile.com/avatar.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;token&quot;: &quot;94916990f394483cb6238b6db3c1ac5c&quot;, &quot;empowering&quot;: false, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;latestLogin&quot;: &quot;2018-11-05 02:52:30&quot;, &quot;loginTimes&quot;: 6 &#125;&#125; 删除token传入现有的访问token，进行删除，可以达到注销登录状态的目的。 链接DELETE /v1/tokens 参数 参数名 说明 传递方式 参数类型 Token 访问token header string Application 应用信息 header string Platform 平台 header string 举例：/v1/tokens参数1234&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Token&quot;: &quot;94916990f394483cb6238b6db3c1ac5c&quot;&#125; 返回值1234&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000&#125; 用户应用关联接口查询本机是否与当前应用关联在应用端传入手机和验证码，验证是否为本机，若是再请求判断是否已经是当前应用的用户，然后返回用户信息和app信息。 链接DELETE /v1/userapps 参数 参数名 说明 传递方式 参数类型 countryCode 国家代码 query string phoneNumber 手机号码 query string smsCode 验证码 query string 举例：/v1/userapps?countryCode=0086&amp;phoneNumber=18665801387&amp;smsCode=477055 返回值123456789101112131415161718192021222324252627&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ed0c37c46811e898a000163e002b60&quot;, &quot;user&quot;: &#123; &quot;uid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;nickname&quot;: &quot;马自达&quot;, &quot;avatar&quot;: &quot;http://www.asmile.com/avatar.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;updateTime&quot;: &quot;2018-09-30 04:19:29&quot; &#125;, &quot;app&quot;: &#123; &quot;uid&quot;: &quot;42ea6149b7f711e898a000163e002b60&quot;, &quot;appName&quot;: &quot;SICKLE&quot;, &quot;displayName&quot;: &quot;MOL SICKLE&quot;, &quot;description&quot;: &quot;镰刀资讯&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-09-14 08:22:04&quot;, &quot;updateTime&quot;: &quot;2018-09-14 08:22:04&quot; &#125;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-09-30 04:19:29&quot;, &quot;updateTime&quot;: &quot;2018-09-30 04:19:29&quot; &#125;&#125; 登录历史信息按ip统计时段内登录的设备数查找指定时间段内指定ip的登录设备统计，可以指定最少登录设备数，用于过滤登录设备数量不少于指定数量的的ip对应的统计信息。 链接GET /v1/logins/devicecount 参数 参数名 说明 传递方式 参数类型 loginIp 登录ip query string startTime 开始时间 query date-time endTime 结束时间 query date-time enabled 设备是否有效 query boolean success 是否成功登录 query boolean deviceCount 最少登录设备数 query integer 举例：/v1/logins/devicecount?loginIp=112.97.194.129 返回值123456789101112131415161718192021222324252627282930313233343536&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;loginIp&quot;: &quot;112.97.194.129&quot;, &quot;deviceCount&quot;: 6, &quot;deviceLogins&quot;: [ &#123; &quot;loginDevice&quot;: &quot;0b63192bc39011e898a000163e002b60&quot;, &quot;loginDeviceUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/devicecount?loginDevice=0b63192bc39011e898a000163e002b60&quot; &#125;, &#123; &quot;loginDevice&quot;: &quot;38252a93c40611e898a000163e002b60&quot;, &quot;loginDeviceUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/devicecount?loginDevice=38252a93c40611e898a000163e002b60&quot; &#125;, &#123; &quot;loginDevice&quot;: &quot;7b4d4165c2d311e898a000163e002b60&quot;, &quot;loginDeviceUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/devicecount?loginDevice=7b4d4165c2d311e898a000163e002b60&quot; &#125;, &#123; &quot;loginDevice&quot;: &quot;7df1aefdc46a11e898a000163e002b60&quot;, &quot;loginDeviceUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/devicecount?loginDevice=7df1aefdc46a11e898a000163e002b60&quot; &#125;, &#123; &quot;loginDevice&quot;: &quot;91bb3c66c46a11e898a000163e002b60&quot;, &quot;loginDeviceUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/devicecount?loginDevice=91bb3c66c46a11e898a000163e002b60&quot; &#125;, &#123; &quot;loginDevice&quot;: &quot;946a4f5fc40811e898a000163e002b60&quot;, &quot;loginDeviceUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/devicecount?loginDevice=946a4f5fc40811e898a000163e002b60&quot; &#125; ] &#125; ]&#125; deviceCount为登录设备数，deviceLogins为各设备唯一标识符及起对应的登录记录连接。 按ip统计时段内登录的设备数查找指定时间段内指定ip的登录设备统计，可以指定最少登录设备数，用于过滤登录设备数量不少于指定数量的的ip对应的统计信息。 链接GET /v1/logins/devicecount 参数 参数名 说明 传递方式 参数类型 loginDevice 登录设备唯一标识符 query string startTime 开始时间 query date-time endTime 结束时间 query date-time enabled 设备是否有效 query boolean success 是否成功登录 query boolean userCount 最少用户数 query integer 举例：/v1/logins/usercount?loginDevice=7b4d4165c2d311e898a000163e002b60 返回值12345678910111213141516171819202122232425262728&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;loginDevice&quot;: &quot;7b4d4165c2d311e898a000163e002b60&quot;, &quot;userCount&quot;: 4, &quot;userLogins&quot;: [ &#123; &quot;loginUser&quot;: &quot;113c42bcc3df11e898a000163e002b60&quot;, &quot;userLoginUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/users/113c42bcc3df11e898a000163e002b60&quot; &#125;, &#123; &quot;loginUser&quot;: &quot;2d1bc18ec40a11e898a000163e002b60&quot;, &quot;userLoginUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/users/2d1bc18ec40a11e898a000163e002b60&quot; &#125;, &#123; &quot;loginUser&quot;: &quot;704f7e7cc40511e898a000163e002b60&quot;, &quot;userLoginUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/users/704f7e7cc40511e898a000163e002b60&quot; &#125;, &#123; &quot;loginUser&quot;: &quot;945521c9c40811e898a000163e002b60&quot;, &quot;userLoginUrl&quot;: &quot;http://localhost:9941/usercenter/v1.0/logins/users/945521c9c40811e898a000163e002b60&quot; &#125; ] &#125; ]&#125; userCount为登录用户数，userLogins为各用户唯一标识符及起对应的登录记录连接。 获取用户时间段内登录的信息查找指定时间段内指定ip的登录设备统计，可以指定最少登录设备数，用于过滤登录设备数量不少于指定数量的的ip对应的统计信息。 链接GET /v1/logins/users/{uid} 参数 参数名 说明 传递方式 参数类型 loginIp 登录ip query string startTime 开始时间 query date-time endTime 结束时间 query date-time enabled 设备是否有效 query boolean success 是否成功登录 query boolean deviceCount 最少登录设备数 query integer 举例：查看唯一标识符为113c42bcc3df11e898a000163e002b60的用户登录时间大于2018/09/29 21:30:00的登录记录。v1/logins/users/113c42bcc3df11e898a000163e002b60?startTime=2018%2F09%2F29%2021%3A30%3A00 返回值12345678910111213141516171819202122232425262728293031323334353637383940&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;113c42bcc3df11e898a000163e002b60&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;13049304814&quot;, &quot;userName&quot;: &quot;008613049304814&quot;, &quot;nickname&quot;: &quot;user_008613049304814&quot;, &quot;avatar&quot;: &quot;https://www.baidu.com/img/bd_logo1.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-09-29 19:59:07&quot;, &quot;latestLogin&quot;: &quot;2018-09-29 21:50:40&quot;, &quot;loginTimes&quot;: 26, &quot;records&quot;: [ &#123; &quot;uid&quot;: &quot;982d0491c3ee11e898a000163e002b60&quot;, &quot;loginUser&quot;: &quot;113c42bcc3df11e898a000163e002b60&quot;, &quot;loginDevice&quot;: &quot;dc5e955ac3bb11e898a000163e002b60&quot;, &quot;loginIp&quot;: &quot;113.118.194.58&quot;, &quot;loginHost&quot;: &quot;192.168.1.129&quot;, &quot;loginApp&quot;: &quot;SICKLE&quot;, &quot;loginAppVersionCode&quot;: 101, &quot;loginAppVersion&quot;: &quot;1.0.1&quot;, &quot;loginWay&quot;: &quot;token&quot;, &quot;success&quot;: true, &quot;loginMemo&quot;: &quot;OK&quot;, &quot;loginTime&quot;: &quot;2018-09-29 21:50:16&quot;, &quot;appDebug&quot;: false, &quot;osRoot&quot;: false, &quot;osRom&quot;: &quot;aliyun&quot;, &quot;osVersion&quot;: &quot;22&quot;, &quot;longitude&quot;: &quot;114.040897&quot;, &quot;latitude&quot;: &quot;22.614372&quot;, &quot;address&quot;: &quot;广东省深圳市龙华区民康路84号靠近华夏银行(龙华支行)&quot; &#125; ] &#125;&#125; 返回值有两部分组成，前部分是用户的基本信息及用户登录的总次数，records为用户登录的详细记录。 全局事务接口获取全局事务获取全局事务id，可作为分布式事务处理的依据。 链接POST /v1/transaction 参数无参数举例：/v1/transaction 返回值12345678&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;09766456e0c911e898a000163e002b60&quot;, &quot;createTime&quot;: &quot;2018-11-05 15:04:28&quot; &#125;&#125; 访问终端信息接口上传终端信息，并返回用户信息将终端设备上传，记录用户登录的最新设备。同时后台会进行token刷新。 链接POST /v1/initialize 参数 参数名 说明 传递方式 参数类型 terminal 终端信息 body string 1234567891011121314151617181920212223242526272829&#123; &quot;app&quot; = &#123; &quot;debug&quot; = &quot;flase&quot;; &quot;versionCode&quot; = &quot;1&quot;; &quot;versionName&quot; = &quot;1.0.0&quot;; &#125;; &quot;device&quot; = &#123; &quot;brand&quot; = &quot;iPhone&quot;; &quot;deviceID&quot; = &quot;101d855909687927f31&quot;; &quot;display&quot; = &quot;&quot;; &quot;displayHeight&quot; = &quot;1080&quot;; &quot;displayWidth&quot; = &quot;1920&quot;; &quot;fingerprint&quot; = &quot;&quot;; &quot;manufacturer&quot; = &quot;IOS&quot;; &quot;model&quot; = &quot;iPhone 6s Plus&quot;; &quot;product&quot; = &quot;&quot;; &#125;; &quot;location&quot; = &#123; &quot;address&quot; = &quot;\U5e7f\U4e1c\U7701\U6df1\U5733\U5e02\U9f99\U534e\U533a\U6c11\U5eb7\U8def\U9760\U8fd1\U4e1c\U660e\U5927\U53a6(\U6c11\U5eb7\U8def)&quot;; &quot;latitude&quot; = &quot;23&quot;; &quot;longitude&quot; = &quot;114&quot;; &#125;; &quot;os&quot; = &#123; &quot;host&quot; = &quot;fe80::182e:de50:4ad4:78a3&quot;; &quot;rom&quot; = &quot;appstore&quot;; &quot;root&quot; = &quot;fales&quot;; &quot;version&quot; = &quot;12.0.1&quot;; &#125;;&#125; 返回值123456789101112131415161718&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;0ab21520d6bf11e89b0b00163e007a48&quot;, &quot;countryCode&quot;: &quot;0086&quot;, &quot;phoneNumber&quot;: &quot;13267017181&quot;, &quot;userName&quot;: &quot;008613267017181&quot;, &quot;avatar&quot;: &quot;https://miaoyoujuan.com/mol_sickle/icon/head_mol_sickle.png&quot;, &quot;source&quot;: &quot;SICKLE&quot;, &quot;enabled&quot;: true, &quot;token&quot;: &quot;7e1a58f1918a48d397b2fee4aaa3ea9a&quot;, &quot;empowering&quot;: false, &quot;createTime&quot;: &quot;2018-10-23 12:27:44&quot;, &quot;latestLogin&quot;: &quot;2018-11-05 07:17:50&quot;, &quot;loginTimes&quot;: 498 &#125;&#125; 返回用户基本基本信息和登录统计信息。empowering为true代表是首次登录 积分接口获取当前用户的积分账户传入Token信息和Application信息，获取当前用户在指定应用中的积分账户。 链接GET /v1/points 参数 参数名 说明 传递方式 参数类型 Token 访问token header string Application 应用信息，格式：应用名:版本名称 header string Request Headers12345&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Token&quot;: &quot;d31a6af803184fca93511700cf2a988a&quot;, &quot;Application&quot;: &quot;SICKLE:1.0.0&quot;&#125; 返回值12345678910111213&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;05ed3895c46811e898a000163e002b60&quot;, &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;appName&quot;: &quot;sickle&quot;, &quot;accumulation&quot;: 1000, &quot;balance&quot;: 1000, &quot;createTime&quot;: &quot;2018-09-30 12:19:29&quot;, &quot;updateTime&quot;: &quot;2018-11-05 02:06:06&quot; &#125;&#125; accumulation为累计积分数量balance为当前用户积分余额 给指定用户增减积分给指定用户增减积分，正数增加，负数减少。 链接POST /v1/points 参数 参数名 说明 传递方式 参数类型 Token 访问token header string Application 应用信息，格式：应用名:版本名称 header string userUid 用户唯一标识符 query string amount 变化数额，增加用正数，减少用负数 query double transcationUid 全局事务唯一标识符 query string 举例：/v1/points?userUid=05ec0890c46811e898a000163e002b60&amp;amount=5&amp;transactionUid=1253dac21335290779cdef00163e002bRequest Headers12345&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Token&quot;: &quot;d31a6af803184fca93511700cf2a988a&quot;, &quot;Application&quot;: &quot;SICKLE:1.0.0&quot;&#125; 返回值1234567891011121314151617181920212223&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;e24c8a88e0ce11e898a000163e002b60&quot;, &quot;amount&quot;: 5, &quot;account&quot;: &#123; &quot;uid&quot;: &quot;05ed3895c46811e898a000163e002b60&quot;, &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;appName&quot;: &quot;sickle&quot;, &quot;accumulation&quot;: 1005, &quot;balance&quot;: 1005, &quot;createTime&quot;: &quot;2018-09-30 12:19:29&quot;, &quot;updateTime&quot;: &quot;2018-11-05 15:46:19&quot; &#125;, &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;appName&quot;: &quot;SICKLE&quot;, &quot;income&quot;: true, &quot;transactionUid&quot;: &quot;1253dac21335290779cdef00163e002b&quot;, &quot;createTime&quot;: &quot;2018-11-05 15:46:19&quot;, &quot;updateTime&quot;: &quot;2018-11-05 15:46:19&quot; &#125;&#125; 返回结果的data信息分两部分，主体部分是这当前操作的积分信息，包含本次交易的基本信息，income是否收入项，正数为true，负数为false。另外一部分是操作后的积分账户信息。 设备信息接口按条件查询设备列表指定条件查询分页查询设备信息。 链接GET /v1/devices 参数 参数名 说明 传递方式 参数类型 uid 设备唯一标识符 query string display 系统屏幕信息 query string displayHeight 屏幕像素高度 query string displayWidth 屏幕像素宽度 query string brand 品牌信息 query string fingerprint 设备指纹(一个综合的，唯一的关于设备的描述) query string manufacturer 生产厂商 query string model query string product query string deviceID 设备唯一ID query string host 内部ip query string root 是否root query boolean rom 操作系统rom query string osVersion 系统版本名称 query string startTime 开始时间 query date-time endTime 结束时间 query date-time enabled 是否有效 query boolean sortby 排序属性 query string order 排序规则 query string page 页数 query integer pageSize 每页行数 query integer 举例：查看品牌是小米的所有设备/v1/devices?brand=XIAOMI 返回值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;38252a93c40611e898a000163e002b60&quot;, &quot;display&quot;: &quot;OPR1.170623.027&quot;, &quot;displayHeight&quot;: &quot;2030&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;Xiaomi&quot;, &quot;fingerprint&quot;: &quot;Xiaomi/chiron/chiron:8.0.0/OPR1.170623.027/V10.0.1.0.ODECNFH:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Xiaomi&quot;, &quot;model&quot;: &quot;MIX 2&quot;, &quot;product&quot;: &quot;chiron&quot;, &quot;deviceID&quot;: &quot;wLnnx8yfonqP0EkD5RxX3iJUxXO4hz4k/i8nx997kMQq1Z7HabWgPdzlhLJEw5oU&quot;, &quot;host&quot;: &quot;192.168.43.74&quot;, &quot;root&quot;: false, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;osVersion&quot;: &quot;26&quot;, &quot;createTime&quot;: &quot;2018-09-30 00:39:23&quot;, &quot;updateTime&quot;: &quot;2018-09-30 00:39:23&quot;, &quot;enabled&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;39391f5cc40511e898a000163e002b60&quot;, &quot;display&quot;: &quot;OPR1.170623.027&quot;, &quot;displayHeight&quot;: &quot;2030&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;Xiaomi&quot;, &quot;fingerprint&quot;: &quot;Xiaomi/chiron/chiron:8.0.0/OPR1.170623.027/V10.0.1.0.ODECNFH:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Xiaomi&quot;, &quot;model&quot;: &quot;MIX 2&quot;, &quot;product&quot;: &quot;chiron&quot;, &quot;deviceID&quot;: &quot;kTdotkS3jpFJqTe1wtPtAK0JgdTrYmerEmt22+XPTAA35JZfFiv94wIfcDkQqkYX&quot;, &quot;host&quot;: &quot;192.168.1.127&quot;, &quot;root&quot;: false, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;osVersion&quot;: &quot;26&quot;, &quot;createTime&quot;: &quot;2018-09-30 00:32:15&quot;, &quot;updateTime&quot;: &quot;2018-09-30 00:32:15&quot;, &quot;enabled&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;aa81d818c3bb11e898a000163e002b60&quot;, &quot;display&quot;: &quot;android_x86-userdebug 5.1.1 LMY48Z eng.denglibo.20171121.141123 test-keys&quot;, &quot;displayHeight&quot;: &quot;1920&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;xiaomi&quot;, &quot;fingerprint&quot;: &quot;Android-x86/android_x86/x86:5.1.1/LMY48Z/denglibo11211412:userdebug/test-keys&quot;, &quot;manufacturer&quot;: &quot;xiaomi&quot;, &quot;model&quot;: &quot;hm 1s&quot;, &quot;product&quot;: &quot;hm 1s&quot;, &quot;deviceID&quot;: &quot;286ff13382f34b9aa52a4909015a35ba&quot;, &quot;host&quot;: &quot;172.16.2.15&quot;, &quot;root&quot;: false, &quot;rom&quot;: &quot;aliyun&quot;, &quot;osVersion&quot;: &quot;22&quot;, &quot;createTime&quot;: &quot;2018-09-29 15:45:42&quot;, &quot;updateTime&quot;: &quot;2018-09-29 15:45:42&quot;, &quot;enabled&quot;: true &#125; ], &quot;page&quot;: 1, &quot;pageSize&quot;: 10, &quot;first&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;, &quot;next&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;, &quot;previous&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;, &quot;last&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;&#125; 获取在线设备列表根据用户唯一标识符列表获取在线设备列表。 链接POST /v1/devices/online 参数 参数名 说明 传递方式 参数类型 userUidList 用户唯一标识符列表 body Array[string] 举例：查看品牌是小米的所有设备/v1/devices/onlinebody1[&quot;d31a6af803184fca93511700cf2a988a&quot;] 返回值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;38252a93c40611e898a000163e002b60&quot;, &quot;display&quot;: &quot;OPR1.170623.027&quot;, &quot;displayHeight&quot;: &quot;2030&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;Xiaomi&quot;, &quot;fingerprint&quot;: &quot;Xiaomi/chiron/chiron:8.0.0/OPR1.170623.027/V10.0.1.0.ODECNFH:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Xiaomi&quot;, &quot;model&quot;: &quot;MIX 2&quot;, &quot;product&quot;: &quot;chiron&quot;, &quot;deviceID&quot;: &quot;wLnnx8yfonqP0EkD5RxX3iJUxXO4hz4k/i8nx997kMQq1Z7HabWgPdzlhLJEw5oU&quot;, &quot;host&quot;: &quot;192.168.43.74&quot;, &quot;root&quot;: false, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;osVersion&quot;: &quot;26&quot;, &quot;createTime&quot;: &quot;2018-09-30 00:39:23&quot;, &quot;updateTime&quot;: &quot;2018-09-30 00:39:23&quot;, &quot;enabled&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;39391f5cc40511e898a000163e002b60&quot;, &quot;display&quot;: &quot;OPR1.170623.027&quot;, &quot;displayHeight&quot;: &quot;2030&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;Xiaomi&quot;, &quot;fingerprint&quot;: &quot;Xiaomi/chiron/chiron:8.0.0/OPR1.170623.027/V10.0.1.0.ODECNFH:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Xiaomi&quot;, &quot;model&quot;: &quot;MIX 2&quot;, &quot;product&quot;: &quot;chiron&quot;, &quot;deviceID&quot;: &quot;kTdotkS3jpFJqTe1wtPtAK0JgdTrYmerEmt22+XPTAA35JZfFiv94wIfcDkQqkYX&quot;, &quot;host&quot;: &quot;192.168.1.127&quot;, &quot;root&quot;: false, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;osVersion&quot;: &quot;26&quot;, &quot;createTime&quot;: &quot;2018-09-30 00:32:15&quot;, &quot;updateTime&quot;: &quot;2018-09-30 00:32:15&quot;, &quot;enabled&quot;: true &#125;, &#123; &quot;uid&quot;: &quot;aa81d818c3bb11e898a000163e002b60&quot;, &quot;display&quot;: &quot;android_x86-userdebug 5.1.1 LMY48Z eng.denglibo.20171121.141123 test-keys&quot;, &quot;displayHeight&quot;: &quot;1920&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;brand&quot;: &quot;xiaomi&quot;, &quot;fingerprint&quot;: &quot;Android-x86/android_x86/x86:5.1.1/LMY48Z/denglibo11211412:userdebug/test-keys&quot;, &quot;manufacturer&quot;: &quot;xiaomi&quot;, &quot;model&quot;: &quot;hm 1s&quot;, &quot;product&quot;: &quot;hm 1s&quot;, &quot;deviceID&quot;: &quot;286ff13382f34b9aa52a4909015a35ba&quot;, &quot;host&quot;: &quot;172.16.2.15&quot;, &quot;root&quot;: false, &quot;rom&quot;: &quot;aliyun&quot;, &quot;osVersion&quot;: &quot;22&quot;, &quot;createTime&quot;: &quot;2018-09-29 15:45:42&quot;, &quot;updateTime&quot;: &quot;2018-09-29 15:45:42&quot;, &quot;enabled&quot;: true &#125; ], &quot;page&quot;: 1, &quot;pageSize&quot;: 10, &quot;first&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;, &quot;next&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;, &quot;previous&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;, &quot;last&quot;: &quot;http://localhost:9941/usercenter/v1/devices?brand=XIAOMI&amp;page=1&amp;pageSize=10&quot;&#125; 应用接口创建应用根据应用名称创建应用，不能重名。 链接POST /v1/app 参数 参数名 说明 传递方式 参数类型 app 应用信息 body 举例：创建芒果音乐APP/v1/appbody12345&#123; &quot;appName&quot;: &quot;MONGO&quot;, &quot;description&quot;: &quot;芒果音乐&quot;, &quot;displayName&quot;: &quot;芒果音乐&quot;&#125; 返回值1234567891011&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5a756efbe0dd11e898a000163e002b60&quot;, &quot;appName&quot;: &quot;MONGO&quot;, &quot;displayName&quot;: &quot;芒果音乐&quot;, &quot;description&quot;: &quot;芒果音乐&quot;, &quot;createTime&quot;: &quot;2018-11-05 17:29:53&quot; &#125;&#125; 根据应用唯一标识符批量获取应用出入多个应用唯一标识符，返回多个应用信息。 链接GET /v1/app 参数 参数名 说明 传递方式 参数类型 uidList 应用唯一标识符列表 query Array[string] 举例：查看品牌是小米的所有设备/v1/app?uidList=5a756efbe0dd11e898a000163e002b60%2C6dd50bbfdc3711e898a000163e002b60 返回值123456789101112131415161718192021222324&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;5a756efbe0dd11e898a000163e002b60&quot;, &quot;appName&quot;: &quot;MONGO&quot;, &quot;displayName&quot;: &quot;芒果音乐&quot;, &quot;description&quot;: &quot;芒果音乐&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 17:29:54&quot;, &quot;updateTime&quot;: &quot;2018-11-05 17:29:54&quot; &#125;, &#123; &quot;uid&quot;: &quot;6dd50bbfdc3711e898a000163e002b60&quot;, &quot;appName&quot;: &quot;DONKEY&quot;, &quot;displayName&quot;: &quot;电驴快传&quot;, &quot;description&quot;: &quot;电驴快传是一款基于区块链的短视频应用&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-10-30 19:32:06&quot;, &quot;updateTime&quot;: &quot;2018-10-30 19:32:06&quot; &#125; ]&#125; 按条件查询设备列表指定条件查询分页查询设备信息。 链接GET /v1/app/{uid} 参数 参数名 说明 传递方式 参数类型 uid 应用唯一标识符列表 path string 举例：查看品牌是小米的所有设备/v1/app/5a756efbe0dd11e898a000163e002b60 返回值123456789101112&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5a756efbe0dd11e898a000163e002b60&quot;, &quot;appName&quot;: &quot;MONGO&quot;, &quot;displayName&quot;: &quot;芒果音乐&quot;, &quot;description&quot;: &quot;芒果音乐&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 17:29:54&quot; &#125;&#125; 数据字典接口创建数据字典类型指定条件查询分页查询设备信息。 链接POST /v1/dict/types 参数 参数名 说明 传递方式 参数类型 createType 字典类型创建对象 body createType参数详解|参数名 | 说明 |传递方式 |参数类型||— |— |—| —||hasChildren|是否具有子条目| |boolean||itemType|子条目类型，若没有子节点，则是自身类型| |String||typeCode|类型代码| |String||typeName|类型名称，用于前端展现| |String||itemValue|条目值，若hasChildren为false，说明只有一级，需要设置当前值| |String|举例：创建国家类型/v1/dict/typescreateType123456&#123; &quot;hasChildren&quot;: true, &quot;itemType&quot;: &quot;java.lang.String&quot;, &quot;typeCode&quot;: &quot;COUNTRY&quot;, &quot;typeName&quot;: &quot;国家&quot;&#125; 创建单笔交易最大金额数据字典项，无子条目123456&#123; &quot;hasChildren&quot;: false, &quot;itemType&quot;: &quot;java.math.BigDecimal&quot;, &quot;typeCode&quot;: &quot;MAX_PER_DEAL&quot;, &quot;typeName&quot;: &quot;单笔交易最大金额&quot;&#125; 返回值国家类型返回值123456789101112131415&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;typeCode&quot;: &quot;COUNTRY&quot;, &quot;typeName&quot;: &quot;国家&quot;, &quot;itemType&quot;: &quot;java.lang.String&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 17:58:41&quot;, &quot;updateTime&quot;: &quot;2018-11-05 17:58:41&quot;, &quot;hasChildren&quot;: true, &quot;itemValue&quot;: &quot;string&quot; &#125;&#125; 单笔交易最大金额1234567891011121314&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;b2683b4ee0ec11e898a000163e002b60&quot;, &quot;typeCode&quot;: &quot;MAX_PER_DEAL&quot;, &quot;typeName&quot;: &quot;单笔交易最大金额&quot;, &quot;itemType&quot;: &quot;java.math.BigDecimal&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:19:44&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:19:44&quot;, &quot;hasChildren&quot;: false &#125;&#125; 查看指定的数据字典类型根据类型编码获取字典类型。 链接GET /v1/dict/types/{typeCode} 参数 参数名 说明 传递方式 参数类型 typeCode 类型编码 path string 举例：查看品牌是小米的所有设备/v1/dict/types/MAX_PER_DEAL 返回值1234567891011121314&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;b2683b4ee0ec11e898a000163e002b60&quot;, &quot;typeCode&quot;: &quot;MAX_PER_DEAL&quot;, &quot;typeName&quot;: &quot;单笔交易最大金额&quot;, &quot;itemType&quot;: &quot;java.math.BigDecimal&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:19:44&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:19:44&quot;, &quot;hasChildren&quot;: false &#125;&#125; 查看数据字典类型列表指定条件查询分页查询设备信息。 链接GET /v1/dict/types 参数 参数名 说明 传递方式 参数类型 typeName 类型名称 query string hasChildren 是否有子条目 query boolean enabled 用户是否有效 query boolean sortby 排序属性 query string order 排序顺序 query string page 第几页 query integer pageSize 每页记录数 query integer 举例：所有有子条目的类型/v1/dict/types?hasChildren=true 返回值1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;1f69cc4baf5011e898a000163e002b60&quot;, &quot;typeCode&quot;: &quot;string&quot;, &quot;typeName&quot;: &quot;string&quot;, &quot;itemType&quot;: &quot;string&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-09-03 16:05:29&quot;, &quot;updateTime&quot;: &quot;2018-09-03 16:05:29&quot;, &quot;hasChildren&quot;: true, &quot;itemValue&quot;: &quot;string&quot; &#125;, &#123; &quot;uid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;typeCode&quot;: &quot;COUNTRY&quot;, &quot;typeName&quot;: &quot;国家&quot;, &quot;itemType&quot;: &quot;java.lang.String&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 17:58:41&quot;, &quot;updateTime&quot;: &quot;2018-11-05 17:58:41&quot;, &quot;hasChildren&quot;: true, &quot;itemValue&quot;: &quot;string&quot; &#125;, &#123; &quot;uid&quot;: &quot;cbdf3e9faf2711e898a000163e002b60&quot;, &quot;typeCode&quot;: &quot;LANGUAGE&quot;, &quot;typeName&quot;: &quot;语言&quot;, &quot;itemType&quot;: &quot;java.lang.String&quot;, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-09-03 11:16:49&quot;, &quot;updateTime&quot;: &quot;2018-09-03 11:16:49&quot;, &quot;hasChildren&quot;: true &#125; ], &quot;page&quot;: 1, &quot;pageSize&quot;: 10, &quot;first&quot;: &quot;http://localhost:9941/usercenter/v1/dict/types?hasChildren=true&amp;page=1&amp;pageSize=10&quot;, &quot;next&quot;: &quot;http://localhost:9941/usercenter/v1/dict/types?hasChildren=true&amp;page=1&amp;pageSize=10&quot;, &quot;previous&quot;: &quot;http://localhost:9941/usercenter/v1/dict/types?hasChildren=true&amp;page=1&amp;pageSize=10&quot;, &quot;last&quot;: &quot;http://localhost:9941/usercenter/v1/dict/types?hasChildren=true&amp;page=1&amp;pageSize=10&quot;&#125; 创建数据字典条目在指定数据字典类型下创建指定条目名称。 链接POST /v1/dict/{typeUid}/items 参数 参数名 说明 传递方式 参数类型 typeUid 数据字典唯一标识符 path string createItem 字典条目创建对象 body createItem参数说明 参数名 说明 传递方式 参数类型 itemCode 条目代码 string itemName 条目显示名 string itemOrder 条目排序 integer itemValue 条目值 string typeUid 字典类型唯一标识符，可不填 string 举例：创建一个俄罗斯的国家子条目/v1/dict/5fcf24cbe0e111e898a000163e002b60/itemscreateItem信息1234567&#123; &quot;itemCode&quot;: &quot;RUS&quot;, &quot;itemName&quot;: &quot;俄罗斯&quot;, &quot;itemOrder&quot;: 2, &quot;itemValue&quot;: &quot;Russia&quot;, &quot;typeUid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;&#125; 返回值123456789101112131415&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;6cdb1a2fe0f011e898a000163e002b60&quot;, &quot;typeUid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;itemCode&quot;: &quot;RUS&quot;, &quot;itemName&quot;: &quot;俄罗斯&quot;, &quot;itemValue&quot;: &quot;Russia&quot;, &quot;itemOrder&quot;: 2, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:46:25&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:46:25&quot; &#125;&#125; 查看指定的数据字典类型下的条目传入字典类型代码查询其下的字典条目。 链接GET /v1/dict/{typeCode}/items 参数 参数名 说明 传递方式 参数类型 typeCode 类型编码 path string enabled 是否有效 query boolean sortby 排序属性 query string order 排序顺序 query string page 第几页 query integer pageSize 每页记录数 query integer 举例：查看类型为COUNTRY下的条目/v1/dict/COUNTRY/items?sortby=itemCode 返回值123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;6cdb1a2fe0f011e898a000163e002b60&quot;, &quot;typeUid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;itemCode&quot;: &quot;RUS&quot;, &quot;itemName&quot;: &quot;俄罗斯&quot;, &quot;itemValue&quot;: &quot;Russia&quot;, &quot;itemOrder&quot;: 2, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:46:26&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:46:26&quot; &#125;, &#123; &quot;uid&quot;: &quot;984a7ce5e0ef11e898a000163e002b60&quot;, &quot;typeUid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;itemCode&quot;: &quot;CHN&quot;, &quot;itemName&quot;: &quot;中国&quot;, &quot;itemValue&quot;: &quot;China&quot;, &quot;itemOrder&quot;: 0, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:40:29&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:40:29&quot; &#125;, &#123; &quot;uid&quot;: &quot;b356ef87e0ef11e898a000163e002b60&quot;, &quot;typeUid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;itemCode&quot;: &quot;USA&quot;, &quot;itemName&quot;: &quot;美国&quot;, &quot;itemValue&quot;: &quot;United States&quot;, &quot;itemOrder&quot;: 2, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:41:15&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:41:15&quot; &#125; ], &quot;page&quot;: 1, &quot;pageSize&quot;: 10, &quot;first&quot;: &quot;http://localhost:9941/usercenter/v1/dict/COUNTRY/items?sortby=itemCode&amp;page=1&amp;pageSize=10&quot;, &quot;next&quot;: &quot;http://localhost:9941/usercenter/v1/dict/COUNTRY/items?sortby=itemCode&amp;page=1&amp;pageSize=10&quot;, &quot;previous&quot;: &quot;http://localhost:9941/usercenter/v1/dict/COUNTRY/items?sortby=itemCode&amp;page=1&amp;pageSize=10&quot;, &quot;last&quot;: &quot;http://localhost:9941/usercenter/v1/dict/COUNTRY/items?sortby=itemCode&amp;page=1&amp;pageSize=10&quot;&#125; 查看指定code的数据字典条目根据条目代码获取数据字典条目项。 链接GET /v1/dict/items/{itemCode} 参数 参数名 说明 传递方式 参数类型 itemCode 条目编码 path string 举例：/v1/dict/items/CHN 返回值123456789101112131415&#123; &quot;message&quot;: &quot;success&quot;, &quot;code&quot;: 200000, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;984a7ce5e0ef11e898a000163e002b60&quot;, &quot;typeUid&quot;: &quot;5fcf24cbe0e111e898a000163e002b60&quot;, &quot;itemCode&quot;: &quot;CHN&quot;, &quot;itemName&quot;: &quot;中国&quot;, &quot;itemValue&quot;: &quot;China&quot;, &quot;itemOrder&quot;: 0, &quot;enabled&quot;: true, &quot;createTime&quot;: &quot;2018-11-05 19:40:29&quot;, &quot;updateTime&quot;: &quot;2018-11-05 19:40:29&quot; &#125;&#125; 工具接口获取当前应用信息从http头部获取应用信息。 链接GET /v1/application 参数 参数名 说明 传递方式 参数类型 Application 应用信息 header string 举例：/v1/applicationRequest Headers1234&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Application&quot;: &quot;SICKLE:1.0.0&quot;&#125; 返回值1234&#123; &quot;appName&quot;: &quot;SICKLE&quot;, &quot;version&quot;: &quot;1.0.0&quot;&#125; 获取客户端真实的ip地址获取客户端访问的真是ip地址，在负载均衡代理之前的ip。 链接GET /v1/clientip 参数无参数举例：/v1/clientip 返回值10:0:0:0:0:0:0:1 获取当前平台信息从http头部获取应用信息。 链接GET /v1/platform 参数 参数名 说明 传递方式 参数类型 Platform 平台信息 header string 举例：/v1/platformRequest Headers1234&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Platform&quot;: &quot;iOS&quot;&#125; 返回值1iOS 获取当前token从http头部获取访问token信息。 链接GET /v1/token 参数 参数名 说明 传递方式 参数类型 Token 访问token header string 举例：/v1/tokenRequest Headers1234&#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Token&quot;: &quot;d31a6af803184fca93511700cf2a988a&quot;&#125; 返回值1234&#123; &quot;userUid&quot;: &quot;05ec0890c46811e898a000163e002b60&quot;, &quot;token&quot;: &quot;d31a6af803184fca93511700cf2a988a&quot;&#125; 获取当前User-Agent从http头部获取访问客户端的User-Agent。 链接GET /v1/useragent 参数无参数举例：/v1/useragent 返回值1Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.1 Safari/605.1.15]]></content>
  </entry>
  <entry>
    <title><![CDATA[公共接口]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2F%E5%85%AC%E5%85%B1%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F%E5%85%AC%E5%85%B1%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[公共接口 Author：Leguang E-Mail：langmanleguang@qq.com 该文档描述的是一些公共的接口，如：App的更新，设备信息的搜集等。 初始化信息此接口目的是为了向后台提交设备的信息、App信息、用户信息，以便后台运用。 地址：https://api.xxx.com/path/v1/initializer 请求头123456POST /path/v1/initializerAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数123456789101112131415161718192021222324252627282930313233&#123; &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;token&quot;: &quot;token_13121241rf31rf13f&quot;, &quot;data&quot;: &#123; &quot;app&quot;: &#123; &quot;debug&quot;: &quot;false&quot;, &quot;versionCode&quot;: &quot;5&quot;, &quot;versionName&quot;: &quot;1.0.5&quot; &#125;, &quot;device&quot;: &#123; &quot;brand&quot;: &quot;google&quot;, &quot;display&quot;: &quot;OPD3.170816.012&quot;, &quot;displayHeight&quot;: &quot;1920&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;fingerprint&quot;: &quot;google/walleye/walleye:8.0.0/OPD3.170816.012/4343094:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Google&quot;, &quot;model&quot;: &quot;Pixel 2&quot;, &quot;product&quot;: &quot;walleye&quot; &#125;, &quot;os&quot;: &#123; &quot;host&quot;: &quot;fe80::ccaf:c6ff:fe19:57a6%dummy0&quot;, &quot;root&quot;: &quot;false&quot;, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;version&quot;: &quot;26&quot; &#125;, &quot;location&quot;: &#123; &quot;longitude&quot;: &quot;333&quot;, &quot;latitude&quot;: &quot;565&quot;, &quot;address&quot;:&quot;中国深圳龙岗&quot; &#125;, &quot;deviceID&quot;: &quot;1313512r123rd12r12r12re&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 可选（可当做扩展字段） token String 是 未来考虑放到请求头里 data Object 是 data.deviceID String 是 根据综合信息生成的一个设备唯一ID，依托于阿里云、华为、小米等推送生成的，其中阿里云的如果App被删掉重新下载可能会得到不通设备唯一ID data.app Object 是 有关App信息对象 data.app.versionName String 是 版本名称（iOS中称为版本号），例如1.0.1 data.app.versionCode String 是 版本号 data.app.debug String 是 是否为debug版本 data.device Object 是 设备信息对象 data.device.brand String 是 品牌信息，如小米、华为 data.device.model String 是 型号信息，如 data.device.product String 是 G750-T01 data.device.manufacturer String 是 生产厂商信息 data.device.fingerprint String 是 设备指纹，一个综合的，唯一的关于设备的描述 data.device.displayWidth String 是 屏幕像素宽度 data.device.displayHeight String 是 屏幕像素高度 data.device.display String 是 系统屏幕信息 data.os Object 是 系统信息对象 data.os.version String 是 系统版本号，如19代表4.4 data.os.isRoot String 是 手机系统是否有Root过 data.os.rom String 是 该字段用于Android平台，iOS传空即可。该字段用于标记ROM，但事实上我们用来标记推送类别，Android会根据系统ROM信息上传不同的值，MIUI值为xiaomi，如果EMUI值为huawei，其他的统一值为aliyun。默认不传后台也当做aliyun推送。 data.os.host String 是 本机ip地址，这个是内网地址，所以没有命名为ip，ip表示外网地址，由服务器端在请求头里获取 data.location.longitude String 是 地球上的经度，这个用高德地图或者百度地图获取即可 data.location.latitude String 是 地球上的维度，这个用高德地图或者百度地图获取即可 data.location.address String 是 详细地址 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234&#123; &quot;message&quot;: &quot;居然被你提交成功了&quot;, &quot;code&quot;: 200&#125; key 类型 描述 message String 是 同上 code int 是 同上 删除设备信息该接口用于用户登出时调用，因为用户如果注销了，就不应该再发推送给用户了。至于后台是不是真的删除这些数据要酌情考虑，个人建议是不要删除，只是做出一个删除标志就好。 地址：https://api.xxx.com/path/v1/initializer 请求头123456DELETE /path/v1/initializerAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数1234&#123; &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;token&quot;: &quot;token_13121241rf31rf13f&quot;&#125; params 类型 描述 message String 可选（可当做扩展字段） token String 未来考虑放到请求头里 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200&#125; params 类型 描述 message String 是 同上 code int 是 同上 调用时机：传递过去的数据如果有token则存储起来与用户关联（暂时还无需做到类似今日头条那样抽象强大）， 每次启动都会传。 登录成功后。 策略依托于这些信息，可以做出精准分析，但是仅仅利用这些数据配合某种逻辑处理还是无法查出谁是刷子的，因此还需要结合时间这一维度，在使用时只需要利用ip和id这个参数做两个维度的分析即可。分析如下： 对于一般的刷子，在同一时刻，同一ip（外网IP地址，由服务器端获取）下如果存在多个id同时挖矿，则可认定该ip下的所有id对应的用户是刷子通过模拟器、设备、多开等形式在挖矿，建议加入到黑名单中。 2. 对于高级刷子（技术内行），他可能会采取动态ip，高手能针对多个App（App多开形式或者其他真机、模拟器）代理多个外网ip，此时就可以利用host这个参数来分析，因为外网代理的ip无论你怎么换，你内网的地址也总只有少数几个（比如172.16.2.15），因此同一个内网地址host对应了多个id即可认为这个些id对应的用户为刷子，但是又由于绝大多数人的内网ip都差不多，都是172.168.xx.xx，因此这个只能作为一个补充辅助策略。 根据手机的品牌、型号、屏幕分辨率等得知手机的廉价性（一般是指真机），来判断是否是刷子在利用廉价手机在刷。 新增经纬度的辅助判断，对于同一经纬度的，那必然是在一个矿区了。 App更新考虑到我们的App是未上应用商店的，只能靠自身提示更新，因此需要一个完善的更新系统，但由于暂时没有后台管理系统，所以只能靠手工上传发布（未来会有可视化的后台来管理）。同时要考虑指定某个版本升级到最新版本这一需求。 地址：https://api.xxx.com/path/v1/upgrade 请求头123456GET /path/v1/upgradeAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567891011121314151617&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: &#123; &quot;time&quot;: &quot;2018-04-28 23:57:12&quot;, &quot;size&quot;: &quot;50M&quot;, &quot;fileName&quot;: &quot;xxx.apk&quot;, &quot;force&quot;: true, &quot;versionCode&quot;: 1, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;link&quot;: &quot;https://miaoyoujuan.com/both.apk&quot;, &quot;description&quot;: &quot;摩尔钱包&quot;, &quot;title&quot;: &quot;摩尔钱包&quot;, &quot;ignore&quot;: true, &quot;md&quot;: &quot;234T243T2T&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.time String 是 该条更新记录的上传时间 data.size String 是 下载包的大小 data.fileName String 是 下载的文件的名称 data.force boolean 是 是否强制升值 data.versionCode int 是 针对安卓版本的版本号，安卓是根据整个版本号比大小来比较版本的新旧 data.versionName String 是 版本的名称，比如1.0.2 data.link String 是 下载连接地址 data.description String 是 显示在界面上的更新日志 data.title String 是 显示在界面上的更新标题 data.ignore boolean 是 是否可以忽略该版本 data.md String 是 考虑到包有可能被篡改，应该针对下载的包进行检测。 iOS客户端检测考虑到之前淘宝上的签名卖家恶意代码注入，因此决定在App进入之后进行包信息的自检。 地址：https://api.xxx.com/path/v1/apphash 请求头123456GET /path/v1/apphashAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应12345678910&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: &#123; &quot;md&quot;: &quot;234T243T2T&quot;, &quot;hash&quot;: &quot;24T24T2T424T24T&quot;, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;time&quot;: &quot;2018-04-28 23:57:12&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.time String 是 该条更新记录的上传时间 data.versionName String 是 版本的名称，比如1.0.2 data.hash boolean 是 iOS客户端的资源hash data.md String 是 iOS客户端的数字摘要信息 时间戳该接口用于一些需要服务器端时间为标准的业务，暂时只用于密码输入次数过多被禁止6小时再试。 地址：https://api.xxx.com/path/v1/timestamp 请求头123GET /path/v1/timestamp Accept: application/jsonContent-Type: application/json;charset=UTF-8 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;time&quot;: &quot;1534903480654&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.time String 是 当前服务器的时间戳]]></content>
  </entry>
  <entry>
    <title><![CDATA[Websoket协议规范]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FWebsoket%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%2FWebsoket%E5%8D%8F%E8%AE%AE%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[Websoket协议规范 Author：Leguang E-Mail：langmanleguang@qq.com 前言由于单纯的Http协议无法满足钱包某些主动推送业务（如主动推送更新、广告、提示等），因此需借助soket来弥补。在传统长连接业务可选普通Soket和WebSoket，考虑到浏览器也能支持WebSoket，所以优先选择WebSoket。 要求目标 接口“粒度”争取设计得足够小，争取在业务发生变化后，后台接口不需要增减，只需要前端组合接口仍然能满足新的业务需求。 任何一个接口都可以获取到数据，哪怕没传参数。 命名规范一名二姓三风水，四积阴德五读书，名不正则言不顺，言不顺则事难成。软件开发其实就是门命名的艺术，所以首先定义一些规范，提出一些硬性要求，大家在命名的时候尽量多花点心思，多参考优秀的命名风格。 强烈推荐参考：参考阿里巴巴Java开发手册，Android开发规范，iOS开发手册。 一个单词尽量选择5–7个字母的，这样才最优美。 首字母缩写的单词尽量每个字母都用大写，例如ID。用个小写，人家还以为是一个单词。当然uri、url、urn这种除外，因为大家都知道这个是什么。 规范并统一公司的基础包名与项目的关系。 前后端的某些名称概念要统一用某一个单词，比如支付的统一订单，支付宝用的是order，微信用的是unifiedorder，那我们统一对订单这个概念用order这个词。再比如主机：后台用gateway，现在我们统一用host。这单词不统一很容易分裂。 uri规范uri 表示资源，资源一般对应服务器端领域模型中的实体类，要求如下： 不用大写。 尽量不用横杠分隔符，万一要用，请使用中杠“-”不用下杠“_”。 参数列表要encode。 uri中的名词表示资源集合，使用复数形式。 路径仅表示资源的路径（位置），以及一些特殊的actions操作。 以复数（名词）进行命名资源，不管返回单个或者多个资源。 资源的路径从父到子依次如：/{resource}/{resource_id}/{sub_resource}/{sub_resource_id}/{sub_resource_property}。 使用?来进行资源的过滤、搜索以及分页等。 使用版本号，且版本号在资源路径之前。 优先使用内容协商来区分表述格式，而不是使用后缀来区分表述格式。 url最好越简短越好，结果过滤，排序，搜索相关的功能都应该通过参数实现。 url失效则返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 JSON规范暂时只考虑json的数据格式，要求如下： 不要使用缩写。 统一用驼峰命名法。 不要使用“_”或者“-”。 用名词复数表示集合类型。 为了方便以后的扩展兼容，如果返回的是数组，强烈建议用一个包含如items属性的对象进行包裹。如：12345678910111213141516171819202122232425* 建议对每个字段设置默认值（数组型可设置为[],字符串型可设置为””，数值可设置为0，对象可设置为&#123;&#125;）,这一条是为了方便前端/客户端进行判断字段存不存在操作。* 建议资源使用UUID最为唯一标识。同时建议命名为id或者uid。* 采用UTF-8编码。* 数据应该拿来就能用，不应该还要进行转换操作。&gt;**草稿：JSON返回的格式是分门别类按对象来划分，还是铺大饼的形式铺开，两者利弊各异，比如url，可能一个接口中返回多个url，如果分json对象装的话，则key都可以叫url，否则的话key就得命名成xxxUrl。这个有待商议**## WebSoket部分### 使用场景所有需要**双向通讯（确切的说是需要后台主动推送给前端的情景）**的部分都尽量使用WebSoket。### 应用列举理论上来说，对于数据的任何细微变化都应该有一个消息通过WebSoket传送出来，让客户端可以任意支配，此时的WebSoket就好比一个数据库的观察者，这样才能充分利用长连接，感知数据库的变化。当然实际中并不需要这么复杂，一般用于场景如：消息提醒、公司活动等。### 格式- 统一使用json。- 无论是客户端发送给服务端还是服务端发送给客户端，都使用统一的json格式完成通讯。- 兼容Http协议，若某个WebSoket传输的内容需要改成Http协议完成的话，可迅速兼容。- 安全加密（后面会单独介绍）。### URL结构 {版本号}/{业务名}12345678- &#123;版本号&#125; – 由于我们的业务未稳定，为了应对可能的协议变更，所以需要这个版本号来控制。- &#123;业务名&#125; – 这个与同事们商议后定义一个方便后台通过反射调用方法的名称。### 协议格式与同事商议后得出一些结论，暂定格式如下：#### 客户端--&gt;服务端 { “message”: “大王叫我来查询了”, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/getXXX”, “data”: { “uid”: “6565656565665” }}12345678910|key | 类型 | 描述 || - | -| -||message | String | 返回给接口调用者的描述，有可能用于显示到界面上，需要进行国际化处理 ||uid | String | 唯一标识该次请求或者响应，可以是时间戳，也可以是hash等，该字段如果是如果是前端传给后台的话，后台必须原样返回 ||uri | String | 当分类使用，标记该次通讯的意义，类似Http协议中的URL，MQTT中的topic等，该字段如果是如果是前端传给后台的话，后台必须原样返回 ||data | object | 当前接口的具体数据由该json对象承载 ||uid | String | **对于每一个资源对象，在返回的时候，都应该返回操作这个资源对象的唯一码** |#### 服务端--&gt;客户端 { “message”: “居然被你查询成功了”, “code”: 200, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/getXXX”, “data”: { “uid”: “6565656565665” }}12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455|key | 类型 | 描述 || - | -| -||message | String | 返回给接口调用者的描述，有可能用于显示到界面上，需要进行国际化处理 ||code | int | 这个与请求头中的状态码一致，是为了满足部分开发者的习惯 ||uid | String | 唯一标识该次请求或者响应，可以是时间戳，也可以是hash等，该字段如果是如果是前端传给后台的话，后台必须原样返回 ||uri | String | 当分类使用，标记该次通讯的意义，类似Http协议中的URL，MQTT中的topic等，该字段如果是如果是前端传给后台的话，后台必须原样返回 ||data | object | 当前接口的具体数据由该json对象承载 ||uid | String | **对于每一个资源对象，在返回的时候，都应该返回操作这个资源对象的唯一码** |### 状态码作为 API 的设计者，正确的将 API 执行结果和失败原因用清晰简洁的方式传达给客户程序是十分关键的一步。 我们可以模仿HTTP协议,在响应内容中描述是否成功，如果出错是因为什么，然而，这就意味着用户需要进行内容解析，才知道执行结果和错误原因。因此，响应码可以保证客户端在第一时间用最高效的方式获知 API 运行结果，并采取相应动作。下表列出了比较常用的响应代码。常用的状态码及使用场景：|响应码|代码含义|| - | -||200|已创建，请求成功且服务器已创建了新的资源。||201|是否只显示处于警告状态的应用实例。||301|重定向 , 请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。||302|重定向 , 请求的网页临时移动到新位置，但求者应继续使用原有位置来进行以后的请求。302 会自动将请求者转到不同的临时位置。||304|未修改，自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。||400|错误请求 , 服务器不理解请求的语法。||401|未授权 , 请求要求进行身份验证。||403|已禁止 , 服务器拒绝请求。||404|未找到 , 服务器找不到请求的网页。||405|方法禁用 , 禁用请求中所指定的方法。||406|不接受 , 无法使用请求的内容特性来响应请求的网页。||408|请求超时 , 服务器等候请求时超时。||410|已删除 , 如果请求的资源已被永久删除，那么，服务器会返回此响应。||412|未满足前提条件 , 服务器未满足请求者在请求中设置的其中一个前提条件。||415|不支持的媒体类型 , 请求的格式不受请求页面的支持。||500|内部服务器错误。|## 具体业务### 预览![预览](https://i.imgur.com/ZoNmzun.png)| 业务 | uri | 描述 || - | - | - ||连接 | v1/connect | 由服务端主动推送过来，当连接成功后，后台会返回一些初始化数据，如token、加密的秘钥等 ||断开连接 | v1/disconnect | 由客户端发送给服务端，当客户端退出时发送一个信号给服务端来关闭资源，做收尾处理 ||心跳 | v1/heartbeat | 心跳包，可以是服务端发送给客户端，客户端返回，也可以是客户端发给服务端，服务端统计 ||收账 | v1/receive | 由服务端主动推送过来，前端根据data里的内容主动收账 ||自定义推送 | v1/notify | 由服务端主动推送过来，前端根据data里的内容创建通知显示 ||广告活动 | v1/advertise | 由服务端主动推送过来，前端根据data里的内容主动弹框居中显示，此处预先设定好四种模板弹框：web图片弹框、web可交互弹框，原生图片弹框，原生可交互弹框 ||简单即时通讯 | v1/im | 暂时不考虑（此处说的简单即时通讯是指用于一些简单双向通讯场景，比如社交中的回复，他人回复后客户端自动就能加载，比如反馈模块中用户反馈bug，客户迅速回复） ||预留扩展 | v1/extra | 暂时不考虑 ||登出/注销 | v1/logout | 由服务端主动推送过来，前端弹出登录界面 |### 连接在连接成功后，后台会返回一些初始化数据，这些数据包括token、session、秘钥等，客户端可以保存起来以备后用。##### 响应 { “message”: “恭喜你，连接成功”, “code”: 200, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/connect”, “data”: { “token”: “23523t23t23t23t23t” }}123456789|key | 类型 | 描述 || - | -| -||token | String | 连接成功后，服务端会返回一个token，如果以后还有其他初始化数据的话，也会通过这个uri返回 |### 断开连接在退出App，或者关闭浏览器后，就由客户端发送这个uri给服务端，服务端就可以做一些收尾工作。##### 响应 { “message”: “请注意了，我要断开连接了”, “uri”: “v1/disconnect”}12345### 心跳每隔1分钟，客户端主动发送一次心跳给服务端，服务端统计，如果间隔2次未收到心跳，即认为是客户端断开，即可断开连接，考虑到心跳的流量成本，因此心跳的数据尽量少。##### 响应 { “uri”: “v1/heartbeat”}123456### 收账由服务端主动推送过来，服务端已经处理分析出链上的每一个块的变化与哪一个账户相关，然后推送到账户所在的手机上，手机端只要直接做刷新功能即可。##### 响应服务端--&gt;客户端 { “code”: 200, “data”: { “account”: “mol_1rf1umue1ugxz3akhz41dukp44deyybh3boh4byur1n3oot5j16511pgy7ue”, “amount”: “119340000000000000000000000000”, “block”: “{ “type”: “state”, “account”: “mol_1rf1umue1ugxz3akhz41dukp44deyybh3boh4byur1n3oot5j16511pgy7ue”, “previous”: “B34B6EA7FE4E832919FD1C3F63E24ABDD5B65C0DE99732497651ED2328A11601”, “representative”: “mol_3ytentj15q44he4c778317r868wdttwufp96fsccjux4tuqc59ojgrwn6d4w”, “balance”: “120329200000000000000000000000”, “link”: “67568C72C765DAF47A1427B976E5914C7B17FE2F8CC9779490FBDEFEC9E5DE01”, “link_as_account”: “mol_1stpjjsegsgtyjx3abxsguks4m5u4zz4z58bgycb3yyyzu6ydqi34kgefsif”, “signature”: “6547BD8CC1A16A484E083D4037EE77E7E463FDE358CF3FF2000CA2A40393271648D926B5CA143EA7CFE51178549C175575CFA9DC2864B3215753AFB4D2129F0F”, “work”: “a7556bb5e343ec87”}“, “hash”: “390C43CFB3E4B0F1E218CF023905D84985C6569348D873697E5C8D8610872C87”, “is_send”: “false” }, “message”: “XX收到多少MOL”, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/receive”}123456789101112131415161718192021222324252627282930313233343536373839以上数据其实是将块信息放到data对象中，与手机中的type为state，subType为receive的块信息一样。|key | 类型 | 描述 || - | -| -||account | String | 接收block的账户地址 ||amount | String | 接收的总额 ||block | String | block信息，其实又是一个json字符串 ||hash | String | 该block的hash ||is_send | String | 该block为非发送类型 |### 自定义推送#### 通知介绍通知作为后台沟通手机端的一个桥梁，可以理解为后台撩前端的手段。我们在自定义通知的时候主要针对三大大类属性进行设置：- 样式（style）：对应的通知的样式，一般包括图标，标题，内容，时间，甚至是自定义的布局。- 动作（action）：用户滑动下拉框的动作，用户点击通知的后续动作，比如跳转界面，比如播放语音等。一般的推送平台往往都提供设置这两样属性的Api，可以是前端设置，也可以是后端设置。- 声音+震动：这些都是可以随意组合设置的。#### 通知分类按照是否自定义分为两大类：- 默认通知（最常用）- 自定义通知（针对特殊场景，如视频电话通知，跳转特定页面通知）。##### 默认通知![默认通知](https://i.imgur.com/QklBKdG.png)这一类通知只需要提醒用户我们有发一个消息给他，有可能是广告，有可能是升级通知等。样式：一般都只要基本的默认样式，即图标，标题，内容，时间。其中时间是到达前端的时间，后台不需要设置。动作：只需要打开App即可。pushRequest.setAndroidOpenType(&quot;APPLICATION&quot;);如果填URL是为了给我们解析用的，就是跳特定页面的时候，前端人员可以根据这个URL来解析出路由路径。声音+震动：默认就可以。##### 特定通知这类通知是某些样式特殊，如图片新闻通知，某些action特殊，比如点击跳转到特定页面，再比如微信的视频通话通知提醒，会不停的震动响铃一段时间等。此类通知我们暂无相关业务，可暂时不管。#### 响应 { “message”: “居然被你查询成功了”, “code”: 200, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/notify”, “data”: { “title”: “摩尔”, “content”: “摩尔”, “when”: “”, “smallIcon”: “”, “largeIcon”: “”, “priority”: “”, “lights”: “”, “vibrate”: “”, “sound”: “”, “channel”: “” }}12345678910111213141516171819202122232425|key | 类型 | 描述 || - | -| -||title | String | 通知标题 ||content | String | 通知的长文内容 ||when | String | 通知时间戳，（可以不用管，因为Android默认都是用系统时间） ||smallIcon | String | 通知的右下角小图标（不用管，传个空就行了） ||largeIcon | String | 通知的左边大图标（不用管，传个空就行了） ||priority | String | 通知展示的优先级（不用管，传个空就行了,我这边统一用最大的） ||lights | String | 控制呼吸灯颜色和闪烁行为（不用管，传个空就行了） ||vibrate | String | 控制震动行为（不用管，传个空就行了） ||sound | String | 控制声音（不用管，传个空就行了） ||channel | String | 针对Android 8.0的 |前端就可以利用这些数据生成一个自定义的本地通知显示在手机上。这样的话当用户的长连接存在的时候就可以不依赖第三方平台的推送厂商了。对于推送这一块，未来会有一个专门的消息中心模块来显示记录。### 广告活动#### 介绍这部分是用于某些时刻主动给用户推送弹窗广告或者活动的，客户端会预先设计好四种弹窗模板：- Web图片弹窗，即一个弹窗里装在一个WebView，直接显示即可，这类弹窗只是显示，没有交互（不会有点击跳转）。- Web交互弹窗，即一个弹窗里装在一个WebView，直接显示网页内容，并且点击后可以跳转其他网页，当然这个跳转仍然在该弹窗内。- native图片弹窗，即一个弹窗里装载一个显示图片的控件，直接显示即可，无其他交互。- native交互弹窗，即一个特定的设计的弹窗，类似现在的挖矿每天第一次挖到第一笔MOL币时的弹窗，这个弹窗就是一个特殊的native交互式的弹窗，点击就跳转到了海报页面。#### 响应 { “message”: “弹广告了”, “code”: 200, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/advertise”, “data”: { “type”: “web”, “url”: “https://www.baidu.com/&quot;, …… }}123456789101112131415|key | 类型 | 描述 || - | - | - ||type | String | web表示web弹窗，native表示native弹窗 ||url | String | type为web是，url表示连接，为native时，如果是native图片弹框就表示图片的url |强调：由于考虑到后期的扩展，比如熊老师做了一个调查的H5，推送到用户，参加完调查的用户在提交后可以得到摩尔奖励，这个就必须依赖到token了，因此我们在打开这个url对应的WebView/UIWebView的时候，默认将token传过去，就通过拼在url后面传过去就可以了，如下：&gt; 接收到的是： https://www.baidu.com/ ，拼参后：https://www.baidu.com/?token=1r13rqwr132r1r### 登出/注销考虑到账户的安全性和开发的便利性（比如原生与H5交互时，有这个功能则可避免在Web里token失效时还要弹出登录界面）需要这个功能来提示用户。#### 响应 { “message”: “您的账号于15:31在其他设备上登录”, “code”: 200, “uid”: “A3BA3BA3BA3BC”, “uri”: “v1/logout”}` 前端统一处理1.类似QQ弹框提示已在其他地方登录，如图所示： 2.用户点击“朕知道了”，则什么也不做，用户点击“重新登录”则弹出登录界面走登录流程。 安全加密对于传输的内容进行加解密，加密时机为传输数据前，解密时机为获取数据后，同时还要考虑随时可以去掉加解密，或者部分需要加密，部分不需要加密，因此前后端要采取相应的设计模式来做到充分易用。 要求秘钥是后台分发，可以考虑一连接成功就在那里返回 验签参考 4.参考一下nano的websoket内容]]></content>
  </entry>
  <entry>
    <title><![CDATA[重构接口]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2F%E9%87%8D%E6%9E%84%E6%8E%A5%E5%8F%A3%2F%E9%87%8D%E6%9E%84%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[重构接口 Author：Leguang E-Mail：langmanleguang@qq.com 设备信息此接口目的是为了向后台提交设备的信息、App信息、用户信息，以便后台运用。 地址：https://api.xxx.com/path/v1/devices 请求头123456POST /path/v1/devicesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数123456789101112131415161718192021222324252627282930313233&#123; &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;token&quot;: &quot;token_13121241rf31rf13f&quot;, &quot;data&quot;: &#123; &quot;app&quot;: &#123; &quot;debug&quot;: &quot;false&quot;, &quot;versionCode&quot;: &quot;5&quot;, &quot;versionName&quot;: &quot;1.0.5&quot; &#125;, &quot;device&quot;: &#123; &quot;brand&quot;: &quot;google&quot;, &quot;display&quot;: &quot;OPD3.170816.012&quot;, &quot;displayHeight&quot;: &quot;1920&quot;, &quot;displayWidth&quot;: &quot;1080&quot;, &quot;fingerprint&quot;: &quot;google/walleye/walleye:8.0.0/OPD3.170816.012/4343094:user/release-keys&quot;, &quot;manufacturer&quot;: &quot;Google&quot;, &quot;model&quot;: &quot;Pixel 2&quot;, &quot;product&quot;: &quot;walleye&quot; &#125;, &quot;os&quot;: &#123; &quot;host&quot;: &quot;fe80::ccaf:c6ff:fe19:57a6%dummy0&quot;, &quot;root&quot;: &quot;false&quot;, &quot;rom&quot;: &quot;xiaomi&quot;, &quot;version&quot;: &quot;26&quot; &#125;, &quot;location&quot;: &#123; &quot;longitude&quot;: &quot;333&quot;, &quot;latitude&quot;: &quot;565&quot;, &quot;address&quot;:&quot;中国深圳龙岗&quot; &#125;, &quot;deviceID&quot;: &quot;1313512r123rd12r12r12re&quot; &#125;&#125; params 类型 描述 message String 可选（可当做扩展字段） token String 未来考虑放到请求头里 data Object data.deviceID String 根据综合信息生成的一个设备唯一ID，依托于阿里云、华为、小米等推送生成的，其中阿里云的如果App被删掉重新下载可能会得到不通设备唯一ID data.app Object 有关App信息对象 data.app.versionName String 版本名称（iOS中称为版本号），例如1.0.1 data.app.versionCode String 版本号 data.app.debug String 是否为debug版本 data.device Object 设备信息对象 data.device.brand String 品牌信息，如小米、华为 data.device.model String 型号信息，如 data.device.product String G750-T01 data.device.manufacturer String 生产厂商信息 data.device.fingerprint String 设备指纹，一个综合的，唯一的关于设备的描述 data.device.displayWidth String 屏幕像素宽度 data.device.displayHeight String 屏幕像素高度 data.device.display String 系统屏幕信息 data.os Object 系统信息对象 data.os.version String 系统版本号，如19代表4.4 data.os.isRoot String 手机系统是否有Root过 data.os.rom String 该字段用于Android平台，iOS传空即可。该字段用于标记ROM，但事实上我们用来标记推送类别，Android会根据系统ROM信息上传不同的值，MIUI值为xiaomi，如果EMUI值为huawei，其他的统一值为aliyun。默认不传后台也当做aliyun推送。 data.os.host String 本机ip地址，这个是内网地址，所以没有命名为ip，ip表示外网地址，由服务器端在请求头里获取 data.location.longitude String 地球上的经度，这个用高德地图或者百度地图获取即可 data.location.latitude String 地球上的维度，这个用高德地图或者百度地图获取即可 data.location.address String 详细地址 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234&#123; &quot;message&quot;: &quot;居然被你提交成功了&quot;, &quot;code&quot;: 200&#125; key 类型 描述 message String 返回信息 code int 标识 删除设备信息该接口用于用户登出时调用，因为用户如果注销了，就不应该再发推送给用户了。至于后台是不是真的删除这些数据要酌情考虑，个人建议是不要删除，只是做出一个删除标志就好。 地址：https://api.xxx.com/path/v1/devices 请求头123456DELETE /path/v1/deliveriesAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数1234&#123; &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;token&quot;: &quot;token_13121241rf31rf13f&quot;&#125; params 类型 描述 message String 可选（可当做扩展字段） token String 未来考虑放到请求头里 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200&#125; params 类型 描述 message String 后台返回的提示语 code int 状态码 调用时机：传递过去的数据如果有token则存储起来与用户关联（暂时还无需做到类似今日头条那样抽象强大）， 每次启动都会传。 登录成功后。 策略依托于这些信息，可以做出精准分析，但是仅仅利用这些数据配合某种逻辑处理还是无法查出谁是刷子的，因此还需要结合时间这一维度，在使用时只需要利用ip和id这个参数做两个维度的分析即可。分析如下： 对于一般的刷子，在同一时刻，同一ip（外网IP地址，由服务器端获取）下如果存在多个id同时挖矿，则可认定该ip下的所有id对应的用户是刷子通过模拟器、设备、多开等形式在挖矿，建议加入到黑名单中。 2. 对于高级刷子（技术内行），他可能会采取动态ip，高手能针对多个App（App多开形式或者其他真机、模拟器）代理多个外网ip，此时就可以利用host这个参数来分析，因为外网代理的ip无论你怎么换，你内网的地址也总只有少数几个（比如172.16.2.15），因此同一个内网地址host对应了多个id即可认为这个些id对应的用户为刷子，但是又由于绝大多数人的内网ip都差不多，都是172.168.xx.xx，因此这个只能作为一个补充辅助策略。 根据手机的品牌、型号、屏幕分辨率等得知手机的廉价性（一般是指真机），来判断是否是刷子在利用廉价手机在刷。 新增经纬度的辅助判断，对于同一经纬度的，那必然是在一个矿区了。 发现模块该接口设计为发现模块的导航接口，用于配置发现页中的banner和功能item，还有其他的类似挖矿等功能。 地址：https://api.xxx.com/path/v1/discovery 请求头123456GET /path/v1/discoveryAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&#123; &quot;code&quot;: 200, &quot;message&quot;: &quot;居然让你发现了&quot;, &quot;data&quot;: &#123; &quot;header&quot;: [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;QR32R3R23R&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/banner/discovery/banner_mol_wallet1528272298.png&quot;, &quot;title&quot;: &quot;快来注册领红包啊&quot;, &quot;uid&quot;: &quot;banner0&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;browser&quot;, &quot;uid&quot;: &quot;QR32R3R23R&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/banner/discovery/banner_mol_wallet1528272298.png&quot;, &quot;title&quot;: &quot;空投666了&quot;, &quot;uid&quot;: &quot;banner1&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;QR32R3R23R&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/banner/discovery/banner_mol_wallet1528272298.png&quot;, &quot;title&quot;: &quot;与XXX合作了&quot;, &quot;uid&quot;: &quot;banner2&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ], &quot;items&quot;: [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;摩尔红包&quot;, &quot;uid&quot;: &quot;banner&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;锁仓利息&quot;, &quot;uid&quot;: &quot;luckyMoney&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;答题挖矿&quot;, &quot;uid&quot;: &quot;stake&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ], &quot;footer&quot;: &#123; &quot;badge&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;&quot;, &quot;title&quot;: &quot;手机挖矿&quot;, &quot;uid&quot;: &quot;mining&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; &#125;&#125; key 类型 描述 data JSON对象 该接口的有效数据都来自该对象 data.header JSON数组 发现页中的banner数据来自该对象 data.items JSON数组 发现页中的功能item数据来自该对象 data.footer JSON数组 发现页中的底部挖矿数据来自该对象 badge String 该字段用于标记是否阅读过，或者显示消息数，具体看设计图要求，如果设计图要求显示具体消息数，则返回数字即可，都已读则返回空字符串即可表示全部消息已读，比如有两个红包未领取，就可以返回一个2显示在界面上，如果没有红包领取可以返回””，如果设计图要求只需要一个红点表示为未读状态，则返回为非空即可，已读则返回”” description String 对于该item的描述信息，暂时未使用到 image String 如果是banner则表示banner图，如果是中间的每一条item则表示icon图 title String 该item描述的功能名称 uid String 该功能对应的item的唯一标识 visible String 该item是否显示，visible标识显示，invisible标识不显示 actions JSON数组 描述该item的交互动作，第0个表示点击，第1个表示长按，第2个表示侧滑，如果还有后续定义增加在后面 actions.action.uid String 该动作的唯一标识 actions.action.key String 该动作可能需要的提示语，在该接口中没有用到 actions.action.value String 该动作执行所需参数，如果是跳转内嵌WebView或者跳转外部浏览器则返回的是url actions.action.type String web表示跳转内嵌WebView，browser表示跳转到浏览器，native表示跳转原生 行为记录该接口用于告诉后台，我点执行过某个操作，比如发现页中的某个item，在第一次上线的时候，会有一个标记提示用户有新功能，可以点进去试试，然后用户点击后就通过该接口告诉后台用户已经点击过了，之后再请求带有badge的标记字段的接口时，可以把这个标记字段标记为空字符串。注意：这里是PUT请求。 地址：https://api.xxx.com/path/v1/actions 请求头123456PUT /path/v1/actionsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数123&#123; &quot;uid&quot;: &quot;4T234T24T2442T&quot;&#125; params 类型 描述 uid String 对应的某个操作的唯一标识，如发现页中的每一个item都有actions数组，每一个action里的uid都对应为这里的参数 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567&#123; &quot;message&quot;: &quot;居然被你更新成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;:&#123; &quot;uid&quot;: &quot;4T234T24T2442T&quot; &#125;&#125; params 类型 描述 message String 后台返回的提示语 code int 状态码 data.uid String 对应的操作的uid，就是传过去的uid “我的”模块这个模块的接口稍作修改，以后这种配置的接口都统一设置一种格式。 地址：https://api.xxx.com/path/v2/mine 请求头123456GET /path/v1/mineAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&#123; &quot;code&quot;: 200, &quot;data&quot;: [ [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;真人认证&quot;, &quot;uid&quot;: &quot;zhenrenrenzheng&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;使用帮助&quot;, &quot;uid&quot;: &quot;shiyongbangzhu&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ], [ &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;安全&quot;, &quot;uid&quot;: &quot;anquan&quot;, &quot;visible&quot;: &quot;visible&quot; &#125;, &#123; &quot;actions&quot;: [ &#123; &quot;key&quot;: &quot;&quot;, &quot;type&quot;: &quot;web&quot;, &quot;uid&quot;: &quot;RG334T2T24T2&quot;, &quot;value&quot;: &quot;https://www.kancloud.cn/luojielun123/mol/646624&quot; &#125; ], &quot;badge&quot;: &quot;5&quot;, &quot;description&quot;: &quot;&quot;, &quot;image&quot;: &quot;https://miaoyoujuan.com/mol_wallet/icon/help_center.png&quot;, &quot;title&quot;: &quot;社区服务&quot;, &quot;uid&quot;: &quot;shequfuwu&quot;, &quot;visible&quot;: &quot;visible&quot; &#125; ] ]&#125; key 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 该接口的有效数据都来自该对象 badge String 是 该字段用于标记是否阅读过，或者显示消息数，具体看设计图要求，如果设计图要求显示具体消息数，则返回数字即可，都已读则返回空字符串即可表示全部消息已读，比如有两个红包未领取，就可以返回一个2显示在界面上，如果没有红包领取可以返回””，如果设计图要求只需要一个红点表示为未读状态，则返回为非空即可，已读则返回”” description String 是 对于该item的描述信息，暂时未使用到 image String 是 如果是banner则表示banner图，如果是中间的每一条item则表示icon图 title String 是 该item描述的功能名称 uid String 是 该功能对应的item的唯一标识 visible String 是 该item是否显示，visible标识显示，invisible标识不显示 actions JSON数组 是 描述该item的交互动作，第0个表示点击，第1个表示长按，第2个表示侧滑，如果还有后续定义增加在后面 actions.action.uid String 是 该动作的唯一标识 actions.action.key String 是 该动作可能需要的提示语，在该接口中没有用到 actions.action.value String 是 该动作执行所需参数，如果是跳转内嵌WebView或者跳转外部浏览器则返回的是url actions.action.type String 是 web表示跳转内嵌WebView，browser表示跳转到浏览器，native表示跳转原生 App更新考虑到我们的App是未上应用商店的，只能靠自身提示更新，因此需要一个完善的更新系统，但由于暂时没有后台管理系统，所以只能靠手工上传发布（未来会有可视化的后台来管理）。同时要考虑指定某个版本升级到最新版本这一需求。 地址：https://api.xxx.com/path/v1/version 请求头123456GET /path/v1/versionAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567891011121314151617&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: &#123; &quot;time&quot;: &quot;2018-04-28 23:57:12&quot;, &quot;size&quot;: &quot;50M&quot;, &quot;fileName&quot;: &quot;xxx.apk&quot;, &quot;force&quot;: true, &quot;versionCode&quot;: 1, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;link&quot;: &quot;https://miaoyoujuan.com/both.apk&quot;, &quot;description&quot;: &quot;摩尔钱包&quot;, &quot;title&quot;: &quot;摩尔钱包&quot;, &quot;ignore&quot;: true, &quot;md&quot;: &quot;234T243T2T&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.time String 是 该条更新记录的上传时间 data.size String 是 下载包的大小 data.fileName String 是 下载的文件的名称 data.force boolean 是 是否强制升值 data.versionCode int 是 针对安卓版本的版本号，安卓是根据整个版本号比大小来比较版本的新旧 data.versionName String 是 版本的名称，比如1.0.2 data.link String 是 下载连接地址 data.description String 是 显示在界面上的更新日志 data.title String 是 显示在界面上的更新标题 data.ignore boolean 是 是否可以忽略该版本 data.md String 是 考虑到包有可能被篡改，应该针对下载的包进行检测。 iOS客户端检测考虑到之前淘宝上的签名卖家恶意代码注入，因此决定在App进入之后进行包信息的自检。 地址：https://api.xxx.com/path/v1/apphash 请求头123456GET /path/v1/apphashAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用名称:版本号Platform: Android 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应12345678910&#123; &quot;code&quot;: &quot;200&quot;, &quot;message&quot;: &quot;上传啦啦啦&quot;, &quot;data&quot;: &#123; &quot;md&quot;: &quot;234T243T2T&quot;, &quot;hash&quot;: &quot;24T24T2T424T24T&quot;, &quot;versionName&quot;: &quot;1.0.0&quot;, &quot;time&quot;: &quot;2018-04-28 23:57:12&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.time String 是 该条更新记录的上传时间 data.versionName String 是 版本的名称，比如1.0.2 data.hash boolean 是 iOS客户端的资源hash data.md String 是 iOS客户端的数字摘要信息 时间戳该接口用于一些需要服务器端时间为标准的业务，暂时只用于密码输入次数过多被禁止6小时再试。 地址：https://api.xxx.com/path/v1/timestamp 请求头123GET /path/v1/timestamp Accept: application/jsonContent-Type: application/json;charset=UTF-8 参数1无 响应头12Content-Type:application/json; charset=utf-8Status:200 OK 响应1234567&#123; &quot;message&quot;: &quot;居然被你删除成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;time&quot;: &quot;1534903480654&quot; &#125;&#125; params 类型 是否必要 描述 message String 是 同上 code int 是 同上 data JSON对象 是 同上 data.time String 是 当前服务器的时间戳]]></content>
  </entry>
  <entry>
    <title><![CDATA[运营导航]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2F%E5%AF%BC%E8%88%AA%E5%B7%A5%E5%85%B7%2F%E5%AF%BC%E8%88%AA%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[运营导航 Author：Leguang E-Mail：langmanleguang@qq.com 由于业务扩展，涉及的内容越来越多，运营的业务对应的工具网址也越来越多，给运营人员徒增管理负担，为了给运营人员提供统一入口，开发该网址导航器，并给出一个简单易记的域名网址。 需求大致样式如下图所示： 样式随便选一种即可，大如图中描述，把公司的一些工具或者管理后台的地址记录显示出来。 要求如下： 有自定义增加功能，增加的网址存本地即可 由于管理的网址较多，因此需要分类显示，暂时分类为：摩尔、镰刀、工具、一声笑 需适配移动端 功能提供默认和自定义两种方式管理网址，默认部分是公司一些自有的工具或管理后台页面，自定义的是用户自己添加并保存在本地的网址。默认需要的管理网址如下表所示： 分类 名称 地址 描述 摩尔 摩尔钱包审核打币（国内版） http://192.168.1.18:1234/audit-mining.html 摩尔 摩尔钱包审核打币（国际版） http://192.168.1.18:3456/audit-mining.html 摩尔 量化交易 http://192.168.1.168:9000 摩尔 摩尔钱包Web版 https://vault.mol.one 摩尔 摩尔官网 https://mol.one 摩尔 摩尔白皮书 https://mol.one/static/assets/Whitepaper.pdf 摩尔 摩尔钱包（各种版本）下载地址 https://mol.one/wallet.html 摩尔 摩尔主网浏览器 https://explorer.mol.one 摩尔 Fcoin的摩尔交易对 https://exchange.fcoin.com/ex/spot/bitangel/mol/usdt 摩尔 BitZ的摩尔交易对 https://www.bitz.com/exchange/mol_eth 摩尔 玩客家摩尔交易对 http://www.wkj.link/trade/index/market/mol_cny 摩尔 开放平台 https://open.mol.one 镰刀 镰刀官网 https://www.liandao.ai 镰刀 镰刀管理后台 http://backstage.imfmf.com 工具 周报生成器 工具 图片压缩 https://tinypng.com 一声笑 一声笑官网 https://asmile.net]]></content>
  </entry>
  <entry>
    <title><![CDATA[钱包二维码功能体系设计]]></title>
    <url>%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%2F%E6%91%A9%E5%B0%94%E9%92%B1%E5%8C%85%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[钱包二维码功能体系设计 Author：Leguang E-Mail：langmanleguang@qq.com 前言二维码本质上是一串字符的图形化展示，由于考虑到二维码的尺寸大小有限，其能容纳的字节数也有限，同时考虑到容错性，二维码点阵大小等能影响扫描结果、效率、准确性的因素，二维码包含的字符数不宜过多，参考微信和支付宝等项目和实践发现，字符串保证在40左右最佳，60以内比较合理。 业务简介由于考虑到钱包的支付概念，因此应当具备类似微信支付、支付宝支付等生成二维码、扫描二维码等基本功能。具体业务如下图所示： 业务分析整体按功能分类为：生成二维码和扫描二维码。 生成二维码根据最初设计的业务，钱包里的二维码体系无非就两种形式，一种是只有地址信息的，这样扫到之后就跳转到转账页面，一种是二维码中带有地址+金额参数的吗，这样就直接跳转到某一结果展示页面，然后确认支付。 生成只带地址参数的二维码，由于之前的版本中的收款二维码略微粗糙，只是单纯将摩尔的64位地址生成二维码而已，当摩尔钱包App去扫描后，单纯的跳转到转账页面，并把地址填入到地址输入框内。现在考虑到更多的交互场景，就要考虑到兼容以前的版本了。 生成带地址参数+金额参数，这个是以前版本没有的，直接按后面的讲解生成即可。 扫描二维码扫描功能的入口已经提到首页右上角，扫描的结果分析应该考虑以下两种情况： 扫描到以前的mol_开头的单纯地址的二维码，则跳转到支付界面，将地址填入输入框内。（与之前一样） 扫描到新版的（后面会讲协议）带地址参数的二维码，则跳转到支付界面，将地址填入输入框内。（与之前一样） 扫描到新版的（后面会讲协议）带地址参数+金额参数的二维码，则跳转到新设计的结果展示页中。 实现方案按照生成二维码和扫描二位码的分来详细讲解。 生成二维码以地址：为例。123456之前版本生成的二维码仅仅是将地址作为二维码内容，并没有其他协议规约，如下图所示：![之前地址二维码](https://i.imgur.com/NyDnGXV.png) 扫描出来的结果就是：```mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 但是这样设计有一个缺点就是当用户用第三方App，比如微信或者支付宝扫描后，只看到一个mol_开头的字符串，对于一个新用户来讲是懵逼的，也不利于我们导流。现在的用户一看到二维码第一反应应该是用微信扫一下，因此用户用微信扫到了结果后，可能直接就返回了，没有在意那么多，这一次扫描就浪费了。而理想的状态是分两种： 非摩尔用户 他不知道这个是什么，用第三方App（比如微信或者支付宝）扫一扫，或者在微信群里看到这个二维码就长按一下识别其中的内容，然后跳转到某个Web页面，该最好是产品的下载地址或者官网，里面附带一些介绍，这样的话就比单纯的字符串显示出来要有力得多。 摩尔用户 他手机里安装了摩尔钱包App，当他看到二维码是来自摩尔体系的，用摩尔钱包里的扫一扫，然后跳转到相应的结果界面来响应。或者用第三方App（比如微信或者支付宝）扫描，引导到浏览器里能调起摩尔App。 他手机里没有安装摩尔钱包App，他看到二维码后，用第三方App（比如微信或者支付宝）扫描后跳转到产品下载下面，或者官网。 总上所述，考虑到带有“扫一扫”功能的App，一般只要扫到的内容是url就会跳转到web，其他协议的uri就看本应用有没有相应的匹配处理，如果没有就直接显示出该字符串。所以利用这一点，我们尽量把协议涉及成url形式，即scheme为http协议的uri。 生成只带地址参数的二维码以地址：mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 为例。a是address的缩写。http和https都可以，协议设计如下： http://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 或者： https://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 如下图所示： 此时用第三方App扫描则会跳转到我们指定的url，在该url，我们就可以根据User Agent来做相应的跳转或者显示。 生成带地址参数+金额参数的二维码以地址：mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec ，金额：10MOL 为例。考虑到未来会有智能合约进行ICO，因此出现金额则必带币种参数。a是address的缩写，s是sum的缩写，c是currency的缩写。http和https都可以，协议设计如下： http://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;s=10&amp;c=mol 或者： https://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;s=10&amp;c=mol 如下图所示： 生成带地址参数+类型参数根据需求，需要一种二维码是标识为随机金额行为，即摩尔钱包App扫描后会生成随机金额显示在界面上（0&lt; 金额 &lt; 20），因此需要一个类型标识。以地址：mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 为例。a是address的缩写，t是type的缩写。http和https都可以，协议设计如下： http://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;t=random 或者： https://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;t=random 如下图所示： 扫描二维码摩尔钱包App扫描扫描后的结果要进行严格的检测和解析处理，利用正则和url解析来确保程序的鲁棒性，不允许出现无响应结果、甚至是程序崩溃。考虑到兼容性，在摩尔钱包App内，对于扫描结果以及相应处理如下表所示： 扫描类型 扫描示例 相应处理 单纯地址 mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 直接跳转到转账地址页面，并把地址填入到地址输入框中 带地址参数 https://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec 直接跳转到转账地址页面，并把地址填入到地址输入框中 带地址+金额 https://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;s=10&amp;c=mol 直接跳转到新设计的展示页面，点击确定后就走支付流程 带地址+类型 https://qr.mol.one?a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;t=random 直接跳转到新设计的展示页面,并生成大于0，小于20的随机数显示，点击确定后就走支付流程 其他url 比如HTTPS://QR.ALIPAY.COM/FKX03220E6XSYYDVDVYK16 直接跳转到WebView打开就不管了 其他任意数据 比如wxp://f2f0EzisVnmgig6_R1MqIY_Uqr8j1FwhGLT3或者861256413232 直接显示（需商讨怎么显示） 草稿：对于扫描结果这块，考虑到有可能加了新的协议，而老的版本的App没有相应的功能，因此，有一个默认的结果展示页，跳转到一个连接，然后在连接中展示，是该提示升级还是直接展示扫描结果，同时要考虑到网络异常问题，如果异常就直接展示扫描出来的字符结果。 第三方App扫描我们的二维码由于我们的二维码都是url，因此最终都会集中访问到 http://qr.mol.one 这个地址下，到时候熊老师会在这个地址下通过js根据请求跳转到不同的页面，如下表所示： 请求 扫描示例 微信 引导用浏览器打开（有一层遮罩提示） Android浏览器 跳转到Android下载页面 iPhone浏览器 跳转到iOS下载页面 PC 跳转到官网主页，这种情况一般是某些技术人员把二维码扫出来后，用PC浏览器打开 优化考虑到二维码所能容纳的字符数有限，同时字符数越多，点阵越密集，扫描体验越差，因此应当尽量缩短字符，又由于二维码中必须包含地址参数，而光一个地址就有64个字符，导致无论怎么设计字符数都难以降低，因此考虑压缩一下，争取时间换取空间。 在经过一些列的斗争后，发现自创的压缩算法不行，会出现很多符号，这样对传播不利，因此暂时不考虑该路径优化。 扩展对于优化部分的无力，只能借助网络来弥补，可以通过网络传输来传递更多的字符，适应更复杂的场景。思路如下： 准备好本该封装到二维码中的参数，如a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;t=10&amp;c=mol 由于字符太多，二维码不方便显示，转而上传到数据库中，并返回一个唯一ID，如：123456789， 然后将唯一ID配合 https://qr.mol.one 拼成一个字符，如： https://qr.mol.one?123456789 ，生成的二维码如下图所示： 当其他用户用摩尔钱包App扫描后，解析取出ID作为参数123456789， 访问数据库得到对应ID的本该封装到二维码中的参数，如：a=mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&amp;t=10&amp;c=mol，然后做相应的处理。 流程如下： 这样一来就可以很好的扩展，二维码只是一个中间传播参数的介质。]]></content>
  </entry>
  <entry>
    <title><![CDATA[打币系统]]></title>
    <url>%2F%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%2F%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%2F%E6%94%AF%E4%BB%98%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[打币系统 Author：Leguang E-Mail：langmanleguang@qq.com 商家支付sdk概述第三方应用可以通过接入支付sdk的方式，使用虚拟货币进行充值，提现功能。进一步活跃社区，赋能商户，丰富生态。为了提高数据的安全性，降低中途被截获篡改的风险，强烈建议由发起调用的应用对应的服务端按照要求对数据进行二次封装加密后，再调用支付中心服务。 阅读对象产品经理，开发人员，测试人员，区块链工程师，其他有关人员。 主要流程为提供一套安全，高性能，可伸缩的商户支付服务，经过多轮讨论之后，需要由以下几套主体流程结合完成。 支付交互流程 服务端确认订单流程以上是与链交互的主体流程。 数据库设计 merchant_t商户信息，应用接入开放平台时，首先需要注册成为平台商户。包括商户编号，商户名称(不能重名)，邮箱地址，商户描述信息，是否有效，创建时间，修改时间。无效的商户不能再对接开放平台，不能调用接口。未来需要开放商户注册服务，从安全和功能丰富性角度考虑，建议完善手机注册认证等功能。 merchant_account_t商户账户，一个商户可以有多个商户账号，一币一账，支持多币种。包括商户账号ID，应用ID，商户ID，币种，商户账号地址，可提现额度，累计提现额度，是否有效，创建时间，修改时间。累计提现额度用于记录该币种账户上历史累计提现总数；可提现额度用于记录该币种账户当前可以提现的额度，订单完成后，金额存储在中转账户上，商户需要发起提现，才能将交易所得转到商户账户上。 merchant_secret_t商户加密配置，为了保证交易的安全性，支付中心采用商户秘钥和平台私钥两对秘钥进行加签，确保数据不被篡改，保证数据安全性。包括应用加密配置ID，应用编号，商户编号，商户私钥，商户公钥，平台公钥，平台私钥，是否有效，创建时间，修改时间。为了保证秘钥对本身的安全性，建议在存储上做一些改进，比如公司公私钥分开存储。 product_t产品信息，用于存储产品的基本信息。包括产品编号，产品名称，产品名称，产品描述，是否有效，创建见时间，修改时间。产品信息和单品信息，建议由商户接入应用自身维护，中心只维护一些特殊商品，比如授权销售商品等。 product_item_t单品信息，SKU，用于存储商品唯一性信息。包括单品ID，产品ID，币种，价格，是否有效，创建时间，修改时间。 trade_t订单信息，存储订单的基本信息。包括统一订单号(建议采用格式如yyyyMMdd+10位流水累计，如201801020000000001，由于时间原因，暂时按uuid方式进行存储的)，应用ID，商户ID，币种，额度，扩展信息(可以用于描述交易的具体商品，此处的作用与trade_item_t相同，只有详细和具体的区别)，用户编号(若买家为系统统一用户，则完善填入本值)，买家信息(json结构，用于存储三方应用的用户信息)，支付账户(记录用户用于支付的钱包地址)，订单完成时间，订单状态，是否有效，创建时间，修改时间，中转块哈希。 trade_item_t交易单品信息，存储一些需要平台特殊处理的商品(比如授权销售商品)。包括订单单品条目，单品编号，数量，币种，额度，创建时间，修改时间，是否有效。 refund_t退款单，记录退款的概要信息。包括退货单编号，订单编号，币种，退款金额，扩展信息(描述为什么退款)，退货单状态，是否有效，创建时间，修改时间，退款块哈希。失去了退款等业务，就失去了一个商业系统的完整性。所以，未来我们也需要退款功能。 refund_item_t退款单品信息，存储一些需要平台特殊处理的商品(比如授权销售商品)。包括退款单品条目编号，单品编号，单品数量，币种，金额，是否有效，创建时间，修改时间。 withdraw_t提现表，记录商户的每一笔提现记录。交易从开始到完成，交易款项都是在用户账户和中转账户中进行。交易完成后，商户需要申请提现，才能将交易的收益打到自己的商户账户上。包括提现编号，商户账户ID，币种，提现金额，提现状态，是否有效，创建时间，修改时间，提现块哈希。 基础参数 参数 变量名 必填 类型 示例 描述 应用ID appID 是 String(32) 支付中心分配给开发者的应用ID，一个商户号可以拥有多个应用 2014072300007148 商户ID merchantID 是 String(32) 1230000109 支付中心分配的商户号 编码格式 charset 是 String(10) utf-8 请求使用的编码格式，如utf-8,gbk,gb2312等 签名类型 signType 是 String(10) RSA2 商户生成签名字符串所使用的签名算法类型，目前支持RSA2和RSA，推荐使用RSA2 签名 sign 是 String xxxxx 采用应用私钥对对参数进行非签名外的其他参数进行加密的到的签名数据 请求时间戳 timestamp 是 String(19) 2014-07-24 03:07:50 发送请求的时间，格式”yyyy-MM-dd HH:mm:ss” 回调通知链接 notifyUrl 否 String(256) https://api.xx.com/receive_notify.htm 支付中心主动通知商户服务器里指定的页面http/https路径，建议商户使用https 接口定义支付中心主要提供以下几个接口 接口 地址 方法 描述 使用对象 加签 统一下单 https://api.xxx.com/pay/unifiedorder POST 创建预支付订单 商户服务端 是 获取统一订单 https://api.xxx.com/pay/unifiedorder GET 根据prepay_id获取预支付订单信息 钱包应用 是 中转支付 https://api.xxx.com/pay/transfer POST 向中转账户打款 钱包应用 否 查询订单 https://api.xxx.com/pay/orderquery GET 查询单笔订单信息 商户应用 否 关闭订单 https://api.xxx.com/pay/closeorder PATCH 支付失败或支付超时需要关闭原订单 商户应用 是 完成订单确认 https://api.xxx.com/pay/confirmorder POST 用户收到商品，确认无误后可以调用本接口进行确认完成，或者在系统指定时间内自动确认 商户服务端 是 商户提现 https://api.xxx.com/pay/withdraw POST 交易确认完成之后，商户可以将商户平台账户上的金额提现到商户账户上 商户服务端 是 申请退款 — — — — — 退款处理 https://api.xxx.com/pay/refund POST 商户退款给用户 商户应用 是 查询退款 — — — — — 下载对账单 — — — — — 创建预支付应用场景商户应用发起交易后，首先在商户服务端创建商户订单，然后在支付中心创建预支付交易订单。 返回预支付交易会话标识prepayId和对应的签名给商户服务端。 状态机支付状态转变如下： 接口连接POST https://api.xxx.com/pay/unifiedorder 请求参数123456789101112131415161718192021222324252627282930&#123; &quot;appID&quot;:&quot;2014072300007148&quot;, &quot;merchantID&quot;:&quot;1230000109&quot;, &quot;charset&quot;:&quot;UTF-8&quot;, &quot;signType&quot;:&quot;RSA2&quot;, &quot;timestamp&quot;:&quot;1540266193&quot;, &quot;merchantTrade&quot;:&quot;20150806125346&quot;, &quot;current&quot;:&quot;MOL&quot;, &quot;amount&quot;:&quot;300&quot;, &quot;tradeIp&quot;:&quot;127.0.0.1&quot;, &quot;startAt&quot;:&quot;20091225091010&quot;, &quot;expireAt&quot;:&quot;20091225091010&quot;, &quot;userID&quot;:&quot;8d331065d34211e89b0b00163e007a48&quot;, &quot;buyer&quot;:&#123; &quot;name&quot;:&quot;李大嘴&quot;, &quot;countryCode&quot;:&quot;0086&quot;, &quot;phoneNumber&quot;:&quot;13888888888&quot; &#125; &quot;external&quot;:&quot;订阅&quot;, &quot;products&quot;:[ &#123; &quot;productID&quot;:&quot;11r23&quot;, &quot;price&quot;:&quot;100&quot;, &quot;current&quot;:&quot;MOL&quot;, &quot;quantity&quot;:&quot;3&quot;, &quot;amount&quot;:&quot;300&quot; &#125; ], &quot;sign&quot;:&quot;xxxxxxx&quot;&#125; 参数 变量名 必填 类型 示例 描述 应用ID appID 是 String(32) 2014072300007148 支付中心分配给开发者的应用ID，一个商户号可以拥有多个应用 商户ID merchantID 是 String(32) 1230000109 支付中心分配的商户号 编码格式 charset 是 String(10) utf-8 请求使用的编码格式，如utf-8,gbk,gb2312等 签名类型 signType 是 String(10) RSA2 商户生成签名字符串所使用的签名算法类型，目前支持RSA2和RSA，推荐使用RSA2 请求时间戳 timestamp 是 String(19) 1540266193 发送请求的时间，格式”yyyy-MM-dd HH:mm:ss” 商户订单号 merchantTrade 是 String(32) 20150806125346 商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-且在同一个商户号下唯一 币种 currency 是 String(16) MOL 支付币种，默认为mol 金额 amount 是 Decimal(15,3) 10 支付额度，与币种对应 终端IP tradeIp 是 String(39) 127.0.0.1 交易ip，支持ipv4和ipv6 交易开始时间 startAt 是 String(14) 20091225091010 订单生成时间，格式为yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。 交易失效时间 expireAt 是 String(14) 20091225091010 订单失效时间，格式为yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。订单失效时间是针对订单号而言的，由于在请求支付的时候有一个必传参数prepayId只有两小时的有效期，所以在重入时间超过2小时的时候需要重新请求下单接口获取新的prepayId。 用户标识 userID 是 String(32) 8d331065d34211e89b0b00163e007a48 发起支付的用户id 商品信息 products 否 jsonArray [{“productID”:”11r23”,”price”:”100”,”currency”:”MOL”,”quantity”:”3”,”sum”:”300”}] 商品信息列表 签名 sign 是 String xxxxx 采用应用私钥对对参数进行非签名外的其他参数进行加密的到的签名数据 签名算法参数明按照字典序进行排序，使用URL键值对的格式(即key1=value1&amp;key2=value2…)拼接成字符串请按如下规则进行处理： 排除不加入签名的属性 如果参数值为空则不参与签名 参数名字典序排序 参数名区分大小写 具体步骤如下： 传入原始参数 12345678910111213141516171819202122232425&#123; &quot;amount&quot;: &quot;1&quot;, &quot;appID&quot;: &quot;6dd50bbfdc3711e898a000163e002b60&quot;, &quot;buyer&quot;: &#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;name&quot;: &quot;Oxford&quot;, &quot;phoneNumber&quot;: &quot;13828770003&quot; &#125;, &quot;charset&quot;: &quot;UTF-8&quot;, &quot;currency&quot;: &quot;mol&quot;, &quot;external&quot;: &quot;下订单&quot;, &quot;items&quot;: [ &#123; &quot;amount&quot;: &quot;1&quot;, &quot;currency&quot;: &quot;mol&quot;, &quot;price&quot;: &quot;1&quot;, &quot;productID&quot;: &quot;00001&quot;, &quot;productItemID&quot;: &quot;11111&quot;, &quot;quantity&quot;: &quot;1&quot; &#125; ], &quot;merchantID&quot;: &quot;5ae0d007dc3711e898a000163e002b60&quot;, &quot;merchantTrade&quot;: &quot;1100113&quot;, &quot;signType&quot;: &quot;RSA2&quot; &#125; 将原始参数中值为json块的数据进行属性名按字典序unicde编码buyer: 1%7B%22countryCode%22%3A%220086%22%2C%22name%22%3A%22Oxford%22%2C%22phoneNumber%22%3A%2213828770003%22%7D items:1%5B%7B%22amount%22%3A%221%22%2C%22currency%22%3A%22mol%22%2C%22price%22%3A%221%22%2C%22productID%22%3A%2200001%22%2C%22productItemID%22%3A%2211111%22%2C%22quantity%22%3A%221%22%7D%5D 然后将最外层的属性值按key=value的组合后，属性名按字典序用&amp;进行拼接 1amount=1&amp;appID=6dd50bbfdc3711e898a000163e002b60&amp;buyer=%257B%2522countryCode%2522%253A%25220086%2522%252C%2522name%2522%253A%2522Oxford%2522%252C%2522phoneNumber%2522%253A%252213828770003%2522%257D&amp;charset=UTF-8&amp;currency=mol&amp;external=%E4%B8%8B%E8%AE%A2%E5%8D%95&amp;items=%255B%257B%2522amount%2522%253A%25221%2522%252C%2522currency%2522%253A%2522mol%2522%252C%2522price%2522%253A%25221%2522%252C%2522productID%2522%253A%252200001%2522%252C%2522productItemID%2522%253A%252211111%2522%252C%2522quantity%2522%253A%25221%2522%257D%255D&amp;merchantID=5ae0d007dc3711e898a000163e002b60&amp;merchantTrade=1100113&amp;signType=RSA2 用商户私钥对上述拼接好的字符串进行RSA签名 1EtMYFy5LYZBMXD9lCdYq+i0NwpHUOYL+OjWiwm3hJTLcOFaI+EKYZHUUyusP9LTFCd3V3oZpnU85pY/WiVH1isgWgaGCBtAeZqOrKfG+O9rhLRU6opWdIg/Ckv/Jqb3GXdiP4VrFZmawQFgh0T7eqNQj6y30w7YmkHaBhCl07N/c3G7MQaU4W+5xV6YgsEIRAzdX28bGFcOujOnCPF7IsjUnVv4uG8gLAzHg9BLLNUpjC0PzIBU8mgJnYBXUyeSs3z1eHBUPVfB2YuYdRjm9O2hMqmlJR3JbrsPyJnIi8Eet/2Y+JQndgo6UMQghETxK0Dy4mgVyx9feMlMws0NPbA== 重新分装请求参数 1234567891011121314151617181920212223242526&#123; &quot;amount&quot;: &quot;1&quot;, &quot;appID&quot;: &quot;6dd50bbfdc3711e898a000163e002b60&quot;, &quot;buyer&quot;: &#123; &quot;countryCode&quot;: &quot;0086&quot;, &quot;name&quot;: &quot;Oxford&quot;, &quot;phoneNumber&quot;: &quot;13828770003&quot; &#125;, &quot;charset&quot;: &quot;UTF-8&quot;, &quot;currency&quot;: &quot;mol&quot;, &quot;external&quot;: &quot;下订单&quot;, &quot;items&quot;: [ &#123; &quot;amount&quot;: &quot;1&quot;, &quot;currency&quot;: &quot;mol&quot;, &quot;price&quot;: &quot;1&quot;, &quot;productID&quot;: &quot;00001&quot;, &quot;productItemID&quot;: &quot;11111&quot;, &quot;quantity&quot;: &quot;1&quot; &#125; ], &quot;merchantID&quot;: &quot;5ae0d007dc3711e898a000163e002b60&quot;, &quot;merchantTrade&quot;: &quot;1100113&quot;, &quot;signType&quot;: &quot;RSA2&quot;, &quot;sign&quot;: &quot;EtMYFy5LYZBMXD9lCdYq+i0NwpHUOYL+OjWiwm3hJTLcOFaI+EKYZHUUyusP9LTFCd3V3oZpnU85pY/WiVH1isgWgaGCBtAeZqOrKfG+O9rhLRU6opWdIg/Ckv/Jqb3GXdiP4VrFZmawQFgh0T7eqNQj6y30w7YmkHaBhCl07N/c3G7MQaU4W+5xV6YgsEIRAzdX28bGFcOujOnCPF7IsjUnVv4uG8gLAzHg9BLLNUpjC0PzIBU8mgJnYBXUyeSs3z1eHBUPVfB2YuYdRjm9O2hMqmlJR3JbrsPyJnIi8Eet/2Y+JQndgo6UMQghETxK0Dy4mgVyx9feMlMws0NPbA==&quot; &#125; 返回结果成功返回值1234567891011&#123; &quot;code&quot;:200000, &quot;message&quot;:&quot;OK&quot;, &quot;data&quot;:&#123; &quot;prepayID&quot;:&quot;2014072300007148&quot;, &quot;appID&quot;:&quot;2014072300007148&quot;, &quot;merchantID&quot;:&quot;1230000109&quot;, &quot;paylink&quot;:&quot;mol://pay?prepayID=$&#123;prepayID&#125;&amp;appID=$&#123;appID&#125;&amp;merchantID=$&#123;merchantID&#125;&amp;sign=$&#123;sign&#125;&quot;, &quot;sign&quot;:&quot;C380BEC2BFD727A4B6845133519F3AD6&quot; &#125;&#125; 失败返回值1234&#123; &quot;code&quot;:400001, &quot;message&quot;:&quot;缺少prepayID参数&quot;&#125; 字段名 变量名 必填 类型 示例 描述 返回状态码 code 是 Integer(6) 200000 200000,500000等 此字段是通信标识，非交易标识，交易是否成功需要查看code来判断 返回信息 message 是 String(128) OK 当code为200000时返回OK，否则返回信息为错误原因 ，例如签名失败 参数格式校验错误 结果数据 data 是 json {} code为200000时，本参数书才有值，无返回值或者非200000时，本参数为null或者没有data返回 当code为200000时，data结构 字段名 变量名 必填 类型 示例 描述 预支付ID prepayID 是 String(32) 2014072300007148 交易会话的预支付ID 应用ID appID 是 String(32) 2014072300007148 调用接口提交的应用ID 商户ID merchantID 否 String(32) 1230000109 支付中心分配的商户号 签名 sign 是 String(32) C380BEC2BFD727A4B6845133519F3AD6 支付中心返回的签名值 错误码 名称 描述 原因 解决方案 NO_AUTH 商户无此接口权限 商户未开通此接口权限 请商户前往申请此接口权限 NOT_ENOUGH 余额不足 用户帐号余额不足 用户帐号余额不足，请用户充值或更换支付卡后再支付 ORDER_PAID 商户订单已支付 商户订单已支付，无需重复操作 商户订单已支付，无需更多操作 ORDER_CLOSED 订单已关闭 当前订单已关闭，无法支付 当前订单已关闭，请重新下单 SYSTEM_ERROR 系统错误 系统超时 系统异常，请用相同参数重新调用 APPID_NOT_EXIST APPID不存在 参数中缺少APPID 请检查APPID是否正确 MCHID_NOT_EXIST MCHID不存在 参数中缺少MCHID 请检查MCHID是否正确 APPID_MCHID_NOT_MATCH appid和mch_id不匹配 appid和mch_id不匹配 请确认appid和mch_id是否匹配 LACK_PARAMS 缺少参数 缺少必要的请求参数 请检查参数是否齐全 OUT_TRADE_NO_USED 商户订单号重复 同一笔交易不能多次提交 请核实商户订单号是否重复提交 SIGN_ERROR 签名错误 参数签名结果不正确 请检查签名参数和方法是否都符合签名算法要求 REQUIRE_POST_METHOD 请使用post方法 未使用post传递参数 请检查请求参数是否通过post方法提交 POST_DATA_EMPTY post数据为空 post数据不能为空 请检查post数据是否为空 NOT_UTF8 编码格式错误 未使用指定编码格式 请使用UTF-8编码格式 获取统一订单应用场景商户应用调起钱包后，钱包应用将传递过来的prepayID，appID，调用本接口发送至支付中心，获取统一订单信息 接口连接GET https://api.xxx.com/pay/unifiedorder 请求参数1prepayID=014072300007148&amp;appID=2014072300007148&amp;merchantID=134352&amp;sign=adae13isg 参数 变量名 必填 类型 示例 描述 预支付ID prepayID 是 String(32) 2014072300007148 交易会话的预支付ID 应用ID appID 是 String(32) 2014072300007148 支付中心分配给开发者的应用ID，一个商户号可以拥有多个应用 返回结果成功返回值123456789101112131415161718192021222324&#123; &quot;code&quot;:200000, &quot;message&quot;:&quot;OK&quot;, &quot;data&quot;:&#123; &quot;prepayID&quot;:&quot;2014072300007148&quot;, &quot;sender&quot;:&quot;mol_1mrj9xomsiaykauks9f731ux651g8yk35sg6nzt6dwqfkrbs5ygirw1hq5kn&quot;, &quot;userID&quot;:&quot;8d331065d34211e89b0b00163e007a48&quot;, &quot;buyer&quot;:&#123; &quot;name&quot;:&quot;李大嘴&quot;, &quot;countryCode&quot;:&quot;0086&quot;, &quot;phoneNumber&quot;:&quot;13888888888&quot; &#125;, &quot;current&quot;:&quot;mol&quot;, &quot;amount&quot;:&quot;300&quot;, &quot;merchant&quot;: &#123; &quot;merchantID&quot;:&quot;merchantID&quot;, &quot;merchantName&quot;:&quot;电器之家&quot; &#125;, &quot;app&quot;:&#123; &quot;appID&quot;:&quot;2014072300007148&quot;, &quot;appName&quot;:&quot;镰刀&quot; &#125; &#125;&#125; 失败返回值1234&#123; &quot;code&quot;:400001, &quot;message&quot;:&quot;缺少prepayID参数&quot;&#125; 字段名 变量名 必填 类型 示例 描述 返回状态码 code 是 Integer(6) 200000 200000,500000等 此字段是通信标识，非交易标识，交易是否成功需要查看code来判断 返回信息 message 是 String(128) OK 当code为200000时返回OK，否则返回信息为错误原因 ，例如签名失败 参数格式校验错误 结果数据 data 是 json {} code为200000时，本参数书才有值，无返回值或者非200000时，本参数为null或者没有data返回 当code为200000时，data结构 字段名 变量名 必填 类型 示例 描述 预支付ID prepayID 是 String(32) 2014072300007148 交易会话的预支付ID 中转账户 sender 是 String(64) mol_1mrj9xomsiaykauks9f731ux651g8yk35sg6nzt6dwqfkrbs5ygirw1hq5kn 支付中心发布出来供商户中转用的区块链地址 用户标识 userID 是 String(32) 8d331065d34211e89b0b00163e007a48 发起支付的用户id 币种 currency 是 String(16) MOL 支付币种，默认为mol 金额 amount 是 Decimal(15,3) 300 支付额度，与币种对应 商户信息 merchant 是 json 123456789101112131415|应用信息 | app | 是 | json |```&#123;&quot;appID&quot;:&quot;2014072300007148&quot;,&quot;appName&quot;:&quot;镰刀&quot;&#125;```|应用信息，需要包括应用ID和应用名称，用来后台服务确认，及前端展现 |##### 错误码#### 中转支付##### 应用场景钱包应用封装process块信息。然后将块信息，预支付ID，调用中转支付接口，从用户账户往中转账户上打指定额度的款项。##### 状态机##### 接口连接POST https://api.xxx.com/pay/transfer##### 请求参数| 参数 | 变量名 | 必填 | 类型 | 示例 | 描述 || --- | --- | --- | --- | --- | --- ||预支付ID|prepayID | 是 | String(32) | 2014072300007148|交易会话的预支付ID||process块信息| block | 是 | String(500) |详见process块参数介绍|支付中心调用process rpc|process块参数 { “action”: “process”, “block”: “{ \”type\”: \”state\”, \”account\”: \”xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\”, \”previous\”: \”6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\”, \”representative\”: \”xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\”, \”balance\”: \”40200000001000000000000000000000000\”, \”link\”: \”87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\”, \”link_as_account\”: \”xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\”, \”signature\”: \”A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\” }”}1完整参数 { “prepayID”:”1235235”, “appID”:”2014072300007148”, “merchantID”:”1230000109”, “action”: “process”, “block”: “{ \”type\”: \”state\”, \”account\”: \”xrb_1qato4k7z3spc8gq1zyd8xeqfbzsoxwo36a45ozbrxcatut7up8ohyardu1z\”, \”previous\”: \”6CDDA48608C7843A0AC1122BDD46D9E20E21190986B19EAC23E7F33F2E6A6766\”, \”representative\”: \”xrb_3pczxuorp48td8645bs3m6c3xotxd3idskrenmi65rbrga5zmkemzhwkaznh\”, \”balance\”: \”40200000001000000000000000000000000\”, \”link\”: \”87434F8041869A01C8F6F263B87972D7BA443A72E0A97D7A3FD0CCC2358FD6F9\”, \”link_as_account\”: \”xrb_33t5by1653nt196hfwm5q3wq7oxtaix97r7bhox5zn8eratrzoqsny49ftsd\”, \”signature\”: \”A5DB164F6B81648F914E49CAB533900C389FAAD64FBB24F6902F9261312B29F730D07E9BCCD21D918301419B4E05B181637CF8419ED4DCBF8EF2539EB2467F07\” }”}123##### 返回结果成功返回值 { “code”:200000, “message”:”OK”}1失败返回值 { “code”:400001, “message”:”缺少prepayID参数”}123456789101112131415161718192021222324252627282930313233|字段名| 变量名| 必填| 类型| 示例|描述|| --- | --- | --- | --- | --- | --- ||返回状态码| code| 是| Integer(6)|200000|200000,500000等 此字段是通信标识，非交易标识，交易是否成功需要查看code来判断||返回信息 |message |是|String(128)|OK|当code为200000时返回OK，否则返回信息为错误原因 ，例如签名失败 参数格式校验错误|若调用中转接口成功，支付中心将从中转账户向商户账户打款，并将余款返回给用户账户。##### 错误码| 名称 | 描述 | 原因 | 解决方案|| --- | --- | --- | --- || NOT_ENOUGH | 余额不足 | 用户帐号余额不足|用户帐号余额不足，请用户充值或更换支付卡后再支付 || ORDER_PAID | 商户订单已支付|商户订单已支付，无需重复操作|商户订单已支付，无需更多操作 || ORDER_CLOSED | 订单已关闭 |当前订单已关闭，无法支付|当前订单已关闭，请重新下单 || SYSTEM_ERROR | 系统错误 |系统超时|系统异常，请用相同参数重新调用|| APPID_NOT_EXIST | APPID不存在|参数中缺少APPID|请检查APPID是否正确|| PREPAYID_NOT_EXIST | PrepayID不存在|参数中缺少PrepayID|请检查PrepayID是否正确|| PREPAYID_SENDER_NOT_MATCH | sender和交易会话中的中转账户不匹配|sender和交易会话中的中转账户不匹配| 请确认sender是否正确|| LACK_PARAMS | 缺少参数 | 缺少必要的请求参数|请检查参数是否齐全|| OUT_TRADE_NO_USED | 商户订单号重复|同一笔交易不能多次提交|请核实商户订单号是否重复提交 || REQUIRE_POST_METHOD | 请使用post方法|未使用post传递参数 |请检查请求参数是否通过post方法提交 || POST_DATA_EMPTY | post数据为空|post数据不能为空|请检查post数据是否为空|#### 查询订单##### 应用场景该接口提供所有的订单查询，商户可以通过查询订单接口主动查询订单状态，完成进一步的业务逻辑。需要调用查询接口的情况：* 当商户服务端、网络、服务器等出现异常，商户系统未收到支付通知* 调用支付接口后，返回系统错误或未知交易窗台* 调用关单或撤销接口API之前，需要确认支付状态##### 状态机请查阅统一下单接口。##### 接口连接GET https://api.xxx.com/pay/orderquery##### 请求参数 appID=014072300007148&amp;merchantID=1230000109&amp;charset=UTF-8&amp;signType=RSA2&amp;transactionID=1009660380201506130728806387&amp;merchantTrade=20150806125346&amp;sign=xxxxxxx1234567891011| 参数 | 变量名 | 必填 | 类型 | 示例 | 描述 || --- | --- | --- | --- | --- | --- ||应用ID| appID | 是 | String(32) |2014072300007148|支付中心分配给开发者的应用ID，一个商户号可以拥有多个应用||商户ID|merchantID|是|String(32)|1230000109|支付中心分配的商户号||编码格式|charset|是|String(10)|utf-8|请求使用的编码格式，如utf-8,gbk,gb2312等||签名类型|signType | 是 | String(10) | RSA2 | 商户生成签名字符串所使用的签名算法类型，目前支持RSA2和RSA，推荐使用RSA2 || 支付中心订单号 | transactionID | 是 | String(32) | 1009660380201506130728806387 | 支付中心订单号，查询时，可以与商户订单号进行二选一，建议优先使用支付中心订单号 || 商户订单号 | merchantTrade | 是 | String(32) | 20150806125346 | 商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-且在同一个商户号下唯一 ||签名|sign | 是 | String | xxxxx | 采用应用私钥对对参数进行非签名外的其他参数进行加密的到的签名数据 |##### 返回结果成功返回值 { “code”:200000, “message”:”OK”, “data”:{ “appID”:”2014072300007148”, “merchantID”:”1230000109”, “transactionID”:”1009660380201506130728806387”, “merchantTrade”:”20150806125346”, “tradeState”:”SUCCESS” “userID”:”8d331065d34211e89b0b00163e007a48”, “current”:”MOL”, “amount”:”300”, “tradeIp”:”127.0.0.1”, “startAt”:”20091225091010”, “finishAt”:”20091225091010”, “buyer”:{ “name”:”李大嘴”, “countryCode”:”0086”, “phoneNumber”:”13888888888” } “external”:”订阅”, “products”:[ { “productID”:”11r23”, “price”:”100”, “current”:”MOL”, “quantity”:”3”, “amount”:”300” } ], “sign”:”23olkfaieoaj” }}1失败返回值 { “code”:400001, “message”:”缺少merchantID参数”}` 字段名 变量名 必填 类型 示例 描述 返回状态码 code 是 Integer(6) 200000 200000,500000等 此字段是通信标识，非交易标识，交易是否成功需要查看code来判断 返回信息 message 是 String(128) OK 当code为200000时返回OK，否则返回信息为错误原因 ，例如签名失败 参数格式校验错误 结果数据 data 是 json {} code为200000时，本参数书才有值，无返回值或者非200000时，本参数为null或者没有data返回 当code为200000时，data结构 字段名 变量名 必填 类型 示例 描述 应用ID appID 是 String(32) 2014072300007148 调用接口提交的应用ID 商户ID merchantID 否 String(32) 1230000109 支付中心分配的商户号 支付中心订单号 transactionID 是 String(32) 1009660380201506130728806387 支付中心订单号，查询时，可以与商户订单号进行二选一，建议优先使用支付中心订单号 商户订单号 merchantTrade 是 String(32) 20150806125346 商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-且在同一个商户号下唯一 交易状态 tradeState 是 String(32) SUCCESS SUCCESS——支付成功`REFUND——转入退款NO_TPAY——未支付CLOSED——已关闭USER_PAYING——用户支付中PAY_ERROR——支付失败(其他原因，如块返回失败)` 用户标识 userID 是 String(32) 8d331065d34211e89b0b00163e007a48 发起支付的用户id 交易开始时间 startAt 是 String(14) 20091225091010 订单生成时间，格式为yyyyMMddHHmmss，如2009年12月25日9点10分10秒表示为20091225091010。 交易完成时间 finishAt 是 String(14) 20091225091010 订单失效时间，格式为yyyyMMddHHmmss，如2009年12月27日9点10分10秒表示为20091227091010。 币种 currency 是 String(16) MOL 支付币种，默认为mol 金额 amount 是 Decimal(15,3) 10 支付额度，与币种对应 商品信息 products 是 jsonArray [{“productID”:”11r23”,”price”:”100”,”currency”:”MOL”,”quantity”:”3”,”sum”:”300”}] 商品信息列表 签名 sign 是 String(32) C380BEC2BFD727A4B6845133519F3AD6 微信返回的签名值 错误码参考上述的错误描述]]></content>
  </entry>
  <entry>
    <title><![CDATA[镰刀数据爬虫系统]]></title>
    <url>%2F%E9%95%B0%E5%88%80%E9%A1%B9%E7%9B%AE%2F%E9%95%B0%E5%88%80%E7%88%AC%E8%99%AB%E7%B3%BB%E7%BB%9F%2F%E9%95%B0%E5%88%80%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[镰刀数据爬虫系统 Author：Leguang E-Mail：langmanleguang@qq.com 整体框架 程序设计及运行程序代码： 运行环境：python3.6 centos7进程管理：supervisor运行：服务器克隆代码后安装python依赖库（虚拟环境同）pip3 install -r requirements.txt把子进程配置文件拷贝到supervisor的配置文件路径下，通过supervisor管理程序 使用工具及数据库rabbitmqRabbitMQ是一个消息代理 - 一个消息系统的媒介。它可以为你的应用提供一个通用的消息发送和接收平台，并且保证消息在传输过程中的安全。RabbitMQ 中文文档python客户端使用 pika系统采用“发布/订阅”模式 —— 分发一个消息给多个消费者。图示说明： 镰刀mq系统的设计及参数如图：|注：红色路径表示爬虫源数据的流通；蓝色路径表示一般items数据的流通；绿色路径表示热点数据的流通。 supervisorsupervisor是用Python开发的一个client/server服务，是Linux/Unix系统下的一个进程管理工具。可以很方便的监听、启动、停止、重启一个或多个进程。用supervisor管理的进程，当一个进程意外被杀死，supervisor监听到进程死后，会自动将它重启，很方便的做到进程自动恢复的功能，不再需要自己写shell脚本来控制。参考文档：supervisor 文档安装好后在/etc/会生成一个supervisord.conf文件及一个supervisord.d文件目录，supervisord.conf是一些默认配置，代码里面supervisorIni路径下有修改后的supervisord.conf，可拷贝使用。supervisord.d目录用来存放用户自定义的进程配置，本系统暂时开启三个子进程，分别是爬取数据的sickle.ini，分析数据的newsparse.ini和提取热点数据的hotparse.ini。可拷贝至supervisord.d目录下进行管理。子进程配置：123456789[program:sickle]command=/usr/bin/python3 /home/nio/sickle/sickle/run_in.pydirectory=/home/nio/sickle/sickleautostart = trueautorestart = truestartsecs = 5priority = 1stopasgroup = truekillasgroup = true 具体文件路径根据实际拷贝的代码文件路径填写。注意因为爬虫部分要翻墙的原因，国内爬取数据运行run_in.py，国外运行run_out.py。 supervisor常用命令123456supervisorctl status：查看所有进程的状态supervisorctl stop sickle：停止sicklesupervisorctl start sickle：启动sicklesupervisorctl restart sickle: 重启sicklesupervisorctl update ：配置文件修改后可以使用该命令加载新的配置supervisorctl reload: 重新启动配置中的所有程序 日志logging使用logging模块。日志保存在log路径下，按天保存，只保存最近30天的日志。 日志分类调度器日志–scheduler.log爬虫日志–sickle.log数据日志–items.log分析源数据日志–parseItem.log 分析源数据出错日志–parseError.log 提取热点数据日志–hotItem.log 提取热点数据出错日志–hotError.log MySQL使用pymysql模块。使用数据标签信息及相关词：sickle_tag 币种分析匹配，分析数据时使用爬虫数据源：sickle_spider_source Twitter、微博等数据源，根据此数据爬取社交数据币种及交易所热度：sickle_spider_heat 提取热点数据时使用 MongoDB使用pymongo模块。MongoDB作为存储数据的数据库使用，所有新闻资讯都保存在MongoDB中。New_raw存储爬虫爬取的原始数据。New_push存储经过分析后的有效数据。News_hot存储热点数据。News_detail存储有详情页的内容详情数据。 redis使用redis模块。redis用来保存爬虫爬取网站数据的状态。使得已爬取的数据不会再处理，只获取新的数据。 OSS对象存储使用阿里云oss2模块。OSS对象存储主要保存一些多媒体资源，爬虫中主要是：1、微博视频；2、Twitter用户头像；3、Twitter图片及视频 翻译工具 Google url：http://translate.google.cn/translate_a/single 123456789params: &#123; &apos;q&apos;: text, &apos;sl&apos;: &apos;auto&apos;, &apos;tl&apos;: &apos;zh_Ch&apos;, &apos;client&apos;: &apos;gtx&apos;, &apos;dt&apos;: &apos;t&apos;, &apos;dj&apos;: 1, &apos;ie&apos;: &apos;UTF-8&apos;, &#125; 百度翻译平台 url: http://api.fanyi.baidu.com/api/trans/vip/translate 12345678params: &#123; &apos;q&apos;: q, &apos;from&apos;: &apos;auto&apos;, &apos;to&apos;: &apos;zh&apos;, &apos;appid&apos;: appid, &apos;salt&apos;: salt, &apos;sign&apos;: sign &#125; 网站爬虫spiders镰刀数据来源主要分两类：一是爬虫从各个网站爬取而来，二是人工编辑。暂时网站爬取的数据占有效数据的绝大多数，因各个网站数据来源或分类不同暂时把它们分三大类：快讯文章公告爬虫、社交资讯爬虫和转账监控爬虫。 快讯文章公告spiders API接口 币世界快讯获取是否有新数据： url：http://m.bishijie.com/api/app/getNewNum/?last_newsid=%smethod：get 12345headers：&#123;&apos;Host&apos;: &apos;m.bishijie.com&apos;, &apos;Connection&apos;: &apos;Keep-Alive&apos;, &apos;Referer&apos;: &apos;http://m.bishijie.com/kuaixun?fm=082411 &apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Mobile Safari/537.36&apos; &#125; 获取新数据： url：http://api.bishijie.com/news/?client=android&amp;size=20method：get12headers：&#123;&apos;Host&apos;: &apos;api.bishijie.com&apos;, &apos;User-Agent&apos;: &apos;okhttp/3.8.1&apos;&#125; 金色财经快讯获取新数据： url：https://api.jinse.com/v4/live/list?reading=false&amp;_source=m&amp;limit=10&amp;flag=up&amp;id=%smethod：get 1headers：&#123;&apos;User-Agent&apos;: 手机端浏览器&#125; 币响快讯获取新数据： url：http://tui.yingshe.com/live/infomethod：post 12345678910headers：&#123;&apos;Host&apos;: &apos;tui.yingshe.com&apos;, &apos;Connection&apos;: &apos;Keep-Alive&apos;, &apos;User-Agent&apos;: 手机端浏览器, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos; &#125;post data：&#123; &apos;p&apos;: &apos;1&apos;, &apos;type&apos;: &apos;1&apos;, &apos;unique&apos;: &apos;865166020927318&apos; &#125; 非小号交易所公告获取新数据： url：http://app.fxh.io/api/news/exchange?direction=before&amp;time=0method：get 1234headers：&#123;&apos;User-Agent&apos;: &apos;FeiXiaoHao/1.4.1 (iPhone; iOS 11.4.1; Scale/2.00)&apos;, &apos;Host&apos;: &apos;app.fxh.io&apos;, &apos;Referer&apos;: &apos;m.feixiaohao.com&apos; &#125; 获取detail数据： url：detailurl(http://m.feixiaohao.com/notice/3606214.html)method：get12345headers：&#123; &apos;User-Agent&apos;: 手机端浏览器, &apos;Host&apos;: &apos;m.feixiaohao.com&apos;, &apos;Referer&apos;: detailurl &#125; 币牛牛交易所公告获取新数据： url：https://api.coinbull.one/pc/web/announcement/list?limit=20method：get 12345headers：&#123; `User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&apos;, &apos;x-app-info&apos;: &apos;2.4.0/offical/web&apos;, &apos;origin&apos;: &apos;https://www.coinbull.one&apos; &#125; 获取detail数据： url：https://api.finbtc.net/app/announcement/detail?id=%smethod：get12345headers：&#123; &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36&apos;, &apos;x-app-info&apos;: &apos;2.4.0/offical/web&apos;, &apos;origin&apos;: &apos;https://www.coinbull.one&apos; &#125; 金色财经文章获取新数据： url：https://api.jinse.com/v6/information/list?catelogue_key=www&amp;limit=20&amp;information_id=0&amp;flag=down&amp;version=9.9.9&amp;_source=mmethod：get 1headers：&#123;&apos;User-Agent&apos;: 手机端浏览器&#125; 获取detail数据： url：detailurl(https://m.jinse.com/news/bitcoin/284031.html)method：get1headers：&#123;&apos;User-Agent&apos;: 手机端浏览器&#125; 巴比特文章获取新数据： url：https://app.blockmeta.com/news?&amp;num=20method：get 12345headers：&#123; &apos;User-Agent&apos;: &apos;8btc/1.2.3 (com.8btc.bbs; build:47; iOS 11.4.0) Alamofire/4.7.3&apos;, &apos;token&apos;: &apos;d7f48d5c2e9787d3cd6224d427f483453f5c4187&apos;, &apos;from&apos;: &apos;ios&apos; &#125; 获取detail数据： url：https://app.blockmeta.com/news?id=%smethod：get12345headers：&#123; &apos;User-Agent&apos;: &apos;8btc/1.2.3 (com.8btc.bbs; build:47; iOS 11.4.0) Alamofire/4.7.3&apos;, &apos;token&apos;: &apos;d7f48d5c2e9787d3cd6224d427f483453f5c4187&apos;, &apos;from&apos;: &apos;ios&apos; &#125; 火星财经文章获取新数据： url：http://www.huoxing24.com/info/news/shownewsmethod：get 1234headers：&#123; &apos;User-Agent&apos;: 手机端浏览器, &apos;sign-param&apos;: &apos;eyJwbGF0Zm9ybSI6ImlvcyIsIm5vbmNlIjoiYXNmYXNmZ2FxIiwidGltZXN0YW1wIjoiMTUzNzE3MDYyNDg0MyIsInNpZyI6IjYxMzczZjIxZjY3YmUwM2RhNjE3NWU2NzE5MTgzOGMyIn0=&apos; &#125; 获取detail数据： url：http://www.huoxing24.com/info/news/getbyid?id=%smethod：post1234headers：&#123; &apos;User-Agent&apos;: 手机端浏览器, &apos;sign-param&apos;: &apos;eyJwbGF0Zm9ybSI6ImlvcyIsIm5vbmNlIjoiYXNmYXNmZ2FxIiwidGltZXN0YW1wIjoiMTUzNzE3MDYyNDg0MyIsInNpZyI6IjYxMzczZjIxZjY3YmUwM2RhNjE3NWU2NzE5MTgzOGMyIn0=&apos; &#125; cointelegraph文章获取新数据： url：https://api.cointelegraph.com/api/v1/mobile/feed?&amp;language=CN&amp;withHtml=1method：get 1headers：&#123;&apos;User-Agent&apos;: 手机端浏览器&#125; newsnow文章获取新数据（HTML解析）： url：https://www.newsnow.co.uk/h/Business+&amp;+Finance/Cryptocurrenciesmethod：get 123headers：&#123; &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Mobile Safari/537.36&apos; &#125; 社交资讯social 币世界币圈项目获取新数据： url：http://iapi.bishijie.com/project/articleListmethod：get 123headers：&#123; &apos;User-Agent&apos;: 手机端浏览器&#125;`params: 具体加密步骤看代码 获取detail数据： url：http://iapi.bishijie.com/iarticle/detailmethod：get123headers：`&#123; &apos;User-Agent&apos;: 手机端浏览器&#125;`params: 具体加密步骤看代码 微博获取新数据： url：https://m.weibo.cn/api/container/getIndex?type=uid&amp;containerid=107603%smethod：get1headers：`&#123;&apos;User-Agent&apos;: 手机端浏览器&#125;` 获取detail数据： url：https://m.weibo.cn/statuses/show?id=%s（bid）method：get1headers：`&#123;&apos;User-Agent&apos;: 手机端浏览器&#125;` Twitter使用Twitter api获取更新，python库用tweepy。数据获取方法：注册Twitter开发者，获取开发api密钥和token，新建一个list，把要监控Twitter对象添加到list中（add_list_member），获取该list的更新数据（list_timeline）。 转账监控monitors比特币网络监控使用第三方库blockchain。 from blockchain import blockexplorer latest_block_hash = blockexplorer.get_latest_block().hash # 获取最近区块哈希 block = blockexplorer.get_block(latest_block_hash) # 获取区块信息 transactions = block.transactions # 获取区块交易信息 chainext监控获取数据： url：https://api.chainext.io/v1/largement_alertmethod：get 数据分析提取源数据要经过分析过滤提取得到有效数据再给服务器推送。以下整理了数据的分析推送策略。 NewsParse快讯内容去重——“币响、币世界、金色财经”关键字检测——标题关键字与tag相关词匹配检测文章标题关键字与tag相关词匹配检测——“币响、币世界、金色财经”关键字检测——内容去重交易所公告币牛牛爬取的交易所公告直接推送非小号爬取的需要检测标题关键字与tag相关词匹配转账交易chainext中以太坊交易数量小于19999，比特币交易数量小于1999的不推送，其他的都直接推送社交资讯直接推送 HotParse策略币牛牛爬取的交易所公告热度4其他交易所公告中币种上线类型的数据根据交易所热度设置快讯中监控关键词“主网”+“上线”根据币种热度设置社交资讯中监控关键词“主网”+“上线”根据币种热度设置其他的可在管理后台编辑热点]]></content>
  </entry>
  <entry>
    <title><![CDATA[MOL积分系统接口文档]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2FMOL%E7%A7%AF%E5%88%86%E7%B3%BB%E7%BB%9F%2FMOL%E7%A7%AF%E5%88%86%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[MOL积分系统接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 业务简介本模块设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用接口对数据进行增删改查。 项目url预览 站在数据的角度，若想满足各大模块的功能需求，可以将接口分成如下几类： base url：https://api.xxx.com/path/ 分类 接口地址 参数 新闻主题（分类）topics https://api.xxx.com/path/v1/topics 新闻列表+广告news https://api.xxx.com/path/v1/news topic的uid 收益profit https://api.xxx.com/path/v1/profit MOL（积分形式）收益记录profit/records https://api.xxx.com/path/v1/profit/records 摩尔币的记录mol/records https://api.xxx.com/path/v1/mol/record 收益profit这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口来查询余额状态。 地址：https://api.xxx.com/path/v1/profit 请求头123456GET /path/v1/profitAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;accumulation&quot;: &quot;11124525&quot;, &quot;balance&quot;: &quot;95885&quot;, &quot;currency&quot;: &quot;MOL&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.accumulation String 是 该账户历史累积收益，非raw类型的值 data.balance String 是 该账户上可用于提现的收益，非raw类型的值 data.currency String 是 对应的币种的单位 MOL（积分形式）收益记录profit/records这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口查询收益记录。 地址：https://api.xxx.com/path/v1/profit/records 请求头123456GET /path/v1/profit/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789101112131415161718192021222324252627282930&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该JSON对象承载 data.uid String 是 交易记录主键 data.title String 是 交易记录标题名称 data.description String 是 交易记录描述 data.amount String 是 交易记录金额 data.image String 是 交易记录图标 data.currency String 是 交易记录币种 data.time String 是 交易记录时间 提现（从MOL积分币到MOL链）withdraw这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口让用户提现，从MOL积分币换成MOL链上的真实币。 地址：https://api.xxx.com/path/v1/withdraw 请求头123456POST /path/v1/withdrawAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数1234&#123; &quot;amount&quot;: &quot;50&quot;, &quot;currency&quot;: &quot;MOL&quot;&#125; params 类型 是否必须 描述 amount String 否 提现额度，允许从积分币到MOL链上的币提现多少通过该参数控制，非raw类型，不传表示默认，默认表示全部提现 currency String 否 默认传MOL（大写） 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567&#123; &quot;message&quot;: &quot;居然被你提现成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;235235235&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.uid String 是 该次提现生成的提现记录uid，可通过这个查询到该条提现记录 MOL（积分形式）提现记录withdraw/records这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口查询提现记录。 地址：https://api.xxx.com/path/v1/withdraw/records 请求头123456GET /path/v1/withdraw/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910111213141516171819202122232425262728293031323334&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;content&quot;: &quot;提现到钱包&quot;, &quot;amount&quot;: &quot;+50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot;, &quot;state&quot;: &quot;申请中&quot;, &quot;address&quot;: &quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&quot;, &quot;type&quot;: &quot;applying&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;content&quot;: &quot;提现到钱包&quot;, &quot;amount&quot;: &quot;+50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot;, &quot;state&quot;: &quot;已到账&quot;, &quot;address&quot;: &quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&quot;, &quot;type&quot;: &quot;received&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该JSON对象承载 data.uid String 是 提现记录主键 data.content String 是 提现记录标题名称 data.amount String 是 提现记录总额 data.image String 否 提现记录图标，可以不用这个 data.currency String 是 提现记录币种标识 data.time String 是 提现记录时间 data.state String 是 提现记录状态，数据库改积分数值几乎的秒级的，而从积分到链上，会有一段确认时间，因此需要设计一个状态来给用户展示，两种状态：申请中，已到账 data.address String 是 提现地址（提现的收款地址） data.type String 是 提现记录状态判断值，根据这个参数来判断当前状态，值为applying表示申请中，值为received表示已到账]]></content>
  </entry>
  <entry>
    <title><![CDATA[MOL交易系统接口文档]]></title>
    <url>%2F%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86%2FMOL%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%2FMOL%E4%BA%A4%E6%98%93%E7%B3%BB%E7%BB%9F%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[MOL交易系统接口文档 Author：Leguang E-Mail：langmanleguang@qq.com 业务简介本模块设计成一个通用的、独立的模块，以后所有业务中与链进行交互都使用该模块完成，用户提现实际上是我们从链上某个地址打币给用户的地址，充值实际上是用户的地址打币到链上指定账户。 项目url预览 站在数据的角度，若想满足各大模块的功能需求，可以将接口分成如下几类： base url：https://api.xxx.com/path/ 分类 接口地址 参数 充值chain/deposit https://api.xxx.com/path/v1/c amount、fromAccount、toAccount、currency、block 提现chain/withdraw https://api.xxx.com/path/v1/chain/withdraw currency、amount MOL（积分）记录chain/records https://api.xxx.com/path/v1/chain/records type 充值chain/deposit（从MOL链到MOL积分）该接口用于告诉后台用户已经打币给官方指定地址了，让官方去确认，后台就可以利用hash这个参数结合blocks_info这个action去查询后对比。 之后大家一起商议后，认为该方案不合理，有双花风险，因为看了nano的链的代码逻辑：双花的块都会放到链上，但是最后有一个会失效，然后从链上删除。因为考虑到在短时间内是无法通过hash块来确定一定是支付成功的，所以还是得后台收账后，并且5分钟内无误则可认为是真实转账。因此相应界面也得更改：客户端存入成功界面得提示5分钟后确认等字样。 地址：https://api.xxx.com/path/v1/chain/deposit 请求头123456POST /path/v1/chain/depositAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数1234567&#123; &quot;amount&quot;: &quot;50&quot;, &quot;fromAccount&quot;: &quot;mol_114x611xyehnj767bmxia1d67m3kqrtukxtdxkcptf4mzj8sea4ru779i78h&quot;, &quot;toAccount&quot;: &quot;mol_34qdk454gaxhic3w3a9i7pzn3hhkhxpaqgqg7gp3syupyf5gp9mmdsqg5zca&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;block&quot;: &quot;&#123;\&quot;type\&quot;:\&quot;state\&quot;,\&quot;account\&quot;:\&quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec\&quot;,\&quot;previous\&quot;:\&quot;65FA210BF9578C8CA0C1F5BECAF2EAE70C2D6B8CFDC839F897E11C6DB6CAE8F3\&quot;,\&quot;representative\&quot;:\&quot;mol_3ytentj15q44he4c778317r868wdttwufp96fsccjux4tuqc59ojgrwn6d4w\&quot;,\&quot;balance\&quot;:\&quot;1731194500000000000000000000000\&quot;,\&quot;link\&quot;:\&quot;0F4A77FB3E380B2E3270394336E66F0E36F986E2C2125B274FC27EC4C7C26385\&quot;,\&quot;signature\&quot;:\&quot;7310F2E1C0BB32F668796C92CDD564CE88214F6C065615EC821CEE1CFA124A1CFBEE4F0584FD488CCF8AC0AC1EA0E5574FA4D137CB0E2A433956C7839EEB0B04\&quot;,\&quot;work\&quot;:\&quot;5bdbe26964c621d0\&quot;&#125;&quot;&#125; params 类型 描述 amount String 充值总额 from String 用户的打款地址 to String 官方的收款地址 currency String 单位或币种，暂时固定填MOL block String 就是平时转账时，使用process这个action来处理block块时所需要的参数 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;居然被你充值成功了&quot;, &quot;code&quot;: 200&#125; key 类型 描述 uid String 该条数据的唯一ID 提现chain/withdraw（从MOL积分币到MOL链）这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口让用户提现，从MOL积分币换成MOL链上的真实币。 地址：https://api.xxx.com/path/v1/chain/withdraw 请求头123456POST /path/v1/chain/withdrawAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数1234&#123; &quot;amount&quot;: &quot;50&quot;, &quot;currency&quot;: &quot;MOL&quot;&#125; params 类型 是否必须 描述 amount String 否 提现额度，允许从积分币到MOL链上的币提现多少通过该参数控制，非raw类型，不传表示默认，默认表示全部提现 currency String 否 默认传MOL（大写） 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567&#123; &quot;message&quot;: &quot;居然被你提现成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;235235235&quot; &#125;&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 data.uid String 是 该次提现生成的提现记录uid，可通过这个查询到该条提现记录 MOL（积分形式）提现记录chain/records这个接口可以被设计成一个通用的、独立的模块，以后所有业务中的撒给用户的币都以积分形式表达，用该接口查询提现记录。 地址：https://api.xxx.com/path/v1/chain/records 请求头123456GET /path/v1/chain/recordsAccept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5AppVersion: 1.1.1Platform: Android 参数?type=deposit&amp;keyword=热点&amp;sort=des&amp;page=0&amp;pageSize=20 此处type这个参数，本来想定义值为send和receive，但是发现这两个词意表达是具有相对方向性的，并无法表达到底是固定哪一方给哪一方打款，因此改用deposit和withdraw。 params 类型 是否必须 描述 keyword String 否 同上 sort String 否 同上 page int 否 同上 pageSize int 否 同上 type String 否 用于区分记录类型，不传表示默认，默认表示获取全部类型的记录，值为deposit表示充值记录（用户地址打款给官方指定地址），值为withdraw表示提现记录（官方指定地址打款给用户地址）。 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910111213141516171819202122232425262728293031323334&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;content&quot;: &quot;提现到钱包&quot;, &quot;amount&quot;: &quot;+50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot;, &quot;state&quot;: &quot;申请中&quot;, &quot;address&quot;: &quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&quot;, &quot;type&quot;: &quot;applying&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;content&quot;: &quot;提现到钱包&quot;, &quot;amount&quot;: &quot;+50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot;, &quot;state&quot;: &quot;已到账&quot;, &quot;address&quot;: &quot;mol_15tcgzxmwg1d7rs91gc58um8y5jpz85g7iikdemnzimyrm5w6rw7krpeuxec&quot;, &quot;type&quot;: &quot;received&quot; &#125; ]&#125; key 类型 是否必须 描述 message String 是 同上 code int 是 同上 page int 否 同上 pageSize int 否 同上 first String 否 同上 next String 否 同上 previous String 否 同上 last String 否 同上 data object 是 当前接口的具体数据由该JSON对象承载 data.uid String 是 提现记录主键 data.content String 是 提现记录标题名称 data.amount String 是 提现记录总额 data.image String 否 提现记录图标，可以不用这个 data.currency String 是 提现记录币种标识 data.time String 是 提现记录时间 data.state String 是 提现记录状态，数据库改积分数值几乎的秒级的，而从积分到链上，会有一段确认时间，因此需要设计一个状态来给用户展示，两种状态：申请中，已到账 data.address String 是 提现地址（提现的收款地址） data.type String 是 提现记录状态判断值，根据这个参数来判断当前状态，值为applying表示申请中，值为received表示已到账]]></content>
  </entry>
  <entry>
    <title><![CDATA[币圈接口设计]]></title>
    <url>%2F%E5%B8%81%E5%9C%88%E9%A1%B9%E7%9B%AE%2F%E5%B8%81%E5%9C%88%E6%8E%A5%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[币圈接口设计 Author：Leguang E-Mail：langmanleguang@qq.com 要求目标 接口“粒度”争取设计得足够小，争取在业务发生变化后，后台接口不需要增减，只需要前端组合接口仍然能满足新的业务需求。 任何一个接口都可以获取到数据，哪怕没传参数。 命名规范一名二姓三风水，四积阴德五读书，名不正则言不顺，言不顺则事难成。软件开发其实就是门命名的艺术，所以首先定义一些规范，提出一些硬性要求，大家在命名的时候尽量多花点心思，多参考优秀的命名风格。 强烈推荐参考：阿里巴巴Java开发手册，iOS开发手册。 一个单词尽量选择5–7个字母的，这样才最优美。 首字母缩写的单词尽量每个字母都用大写，例如ID。用个小写，人家还以为是一个单词。当然uri、url、urn这种除外，因为大家都知道这个是什么。 规范并统一公司的基础包名与项目的关系。 前后端的某些名称概念要统一用某一个单词，比如支付的统一订单，支付宝用的是order，微信用的是unifiedorder，那我们统一对订单这个概念用order这个词。再比如主机：后台用gateway，现在我们统一用host。这单词不统一很容易分裂。 URI规范URI 表示资源，资源一般对应服务器端领域模型中的实体类，要求如下： 不用大写 尽量不用横杠分隔符，万一要用，请使用中杠-不用下杠_ 参数列表要encode URI中的名词表示资源集合，使用复数形式 路径仅表示资源的路径（位置），以及一些特殊的actions操作。 以复数（名词）进行命名资源，不管返回单个或者多个资源。 资源的路径从父到子依次如：/{resource}/{resource_id}/{sub_resource}/{sub_resource_id}/{sub_resource_property}。 使用?来进行资源的过滤、搜索以及分页等。 使用版本号，且版本号在资源路径之前。 优先使用内容协商来区分表述格式，而不是使用后缀来区分表述格式。 url最好越简短越好，结果过滤，排序，搜索相关的功能都应该通过参数实现。 url失效则返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 JSON规范暂时只考虑json的数据格式，要求如下： 不要使用缩写 统一用驼峰命名法 不要使用_或者- 用名词复数表示集合类型 为了方便以后的扩展兼容，如果返回的是数组，强烈建议用一个包含如items属性的对象进行包裹。如：{“items”:[{},{}]} 建议对每个字段设置默认值（数组型可设置为[],字符串型可设置为””，数值可设置为0，对象可设置为{}）,这一条是为了方便前端/客户端进行判断字段存不存在操作。 建议资源使用UUID最为唯一标识。同时建议命名为id或者uid。 采用UTF-8编码。 数据应该拿来就能用，不应该还要进行转换操作。 草稿：json返回的格式是分门别类按对象来划分，还是铺大饼的形式铺开，两者利弊各异，比如url，可能一个接口中返回多个url，如果分json对象装的话，则key都可以叫url，否则的话key就得命名成xxxUrl。这个有待商议 业务简介本项目是在Telegram上的二次开发，新增了部分业务，竞品对象是币用。 业务模块总体功能模块划分如下图所示： Http部分使用场景 App的初始化数据尽量都用http协议获取。 页面的初始化数据尽量都用http协议获取。 URL结构1https://&#123;serviceRoot&#125;/&#123;collection&#125;/&#123;id&#125; {serviceRoot} – 域名+端口号 (site URL) + 根目录 {collection} – 要访问的资源 {id} – 要访问的资源的唯一编号 公共请求头通过Content-Type指定请求与返回的数据格式有json和xml,暂时我们只管json的。其中请求数据还要指定Accept。12Accept: application/jsonContent-Type: application/json;charset=UTF-8 公共参数公共参数是指每一个接口应该传的参数，同时后端要指定公共参数的默认值，且要保证没有传公共参数不会报错，所以需要一定的容错性，比如priceDes这个参数值，如果是用的是全部小写的，只要是不冲突，则可认为是准确的参数并且表达了按价格降序排列这个语意。我个人建议公共参数放到请求头里，但最终商议结果是放在请求参数里面，因此定义固定格式如下：12345678910&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_523523523&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23523523523523&quot; 其他个性参数…… &#125;&#125; params 类型 描述 extra String 额外扩展字段 token String 检测权限、标识登录状态 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Json对象 需要传的具体个性参数 个性参数个性参数就是除了公共参数之外的，看能否考虑统一用json将公共参数和个性参数浓缩成一个参数，把想要表达的参数通过json中的key-value形式传递。例如： https://api.xxx.com/both/v1/search/products?params={&quot;extra&quot;:&quot;你想填什么呢&quot;,&quot;token&quot;:&quot;token_523523523&quot;,&quot;data&quot;:{&quot;uid&quot;:&quot;23523523523523&quot;}}或者考虑与业务相关的参数就用json形式包装，而与业务无关的个性参数就还是用传统的方式另立一个参数。例如：https://api.xxx.com/both/v1/search/products?limit=10&amp;offset=10&amp;params={&quot;keyword&quot;:&quot;方便面&quot;,&quot;sort&quot;:&quot;des&quot;} 公共响应头12Content-Type:application/json; charset=utf-8Status:200 OK 其中状态码要与公共响应体里的json中的code字段一样。 公共响应体默认会有以下字段，不需要全部都有。12345678910111213&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;6565656565665&quot; &#125;&#125; key 类型 描述 message String 返回给接口调用者的描述，有可能用于显示到界面上，需要进行国际化处理 code int 这个与请求头中的状态码一致，是为了满足部分开发者的习惯 page int 分页请求中请求的当前页的页码 pageSize int 分页请求中一页的个数，默认为20 first String 分页请求中第一页的url ，如果没有则返回空字符串 next String 分页请求中下一页的url，如果没有则返回空字符串 previous String 分页请求中上一页的url，如果没有则返回空字符串 last String 分页请求中最后一页的url，如果没有则返回空字符串 data object 当前接口的具体数据由该json对象承载 uid String 对于每一个资源对象，在返回的时候，都应该返回操作这个资源对象的唯一码 HTTP动词表示操作。常用的HTTP动词有下面五个（括号里是对应的SQL命令）。 GET（SELECT）：从服务器取出资源（一项或多项）。例如:GET /zoos：列出所有动物园。 POST（CREATE）：在服务器新建一个资源。例如:POST /zoos：新建一个动物园。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。例如:PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）。 DELETE（DELETE）：从服务器删除资源。例如:DELETE /zoos/ID：删除某个动物园。 状态码作为 API 的设计者，正确的将 API 执行结果和失败原因用清晰简洁的方式传达给客户程序是十分关键的一步。 我们确实可以在 HTTP 的相应内容中描述是否成功，如果出错是因为什么，然而，这就意味着用户需要进行内容解析，才知道执行结果和错误原因。因此，HTTP响应代码可以保证客户端在第一时间用最高效的方式获知 API 运行结果，并采取相应动作。下表列出了比较常用的响应代码。常用的http状态码及使用场景： 响应代码 代码含义 200 已创建，请求成功且服务器已创建了新的资源。 201 是否只显示处于警告状态的应用实例。 301 重定向 , 请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。 302 重定向 , 请求的网页临时移动到新位置，但求者应继续使用原有位置来进行以后的请求。302 会自动将请求者转到不同的临时位置。 304 未修改，自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。 400 错误请求 , 服务器不理解请求的语法。 401 未授权 , 请求要求进行身份验证。 403 已禁止 , 服务器拒绝请求。 404 未找到 , 服务器找不到请求的网页。 405 方法禁用 , 禁用请求中所指定的方法。 406 不接受 , 无法使用请求的内容特性来响应请求的网页。 408 请求超时 , 服务器等候请求时超时。 410 已删除 , 如果请求的资源已被永久删除，那么，服务器会返回此响应。 412 未满足前提条件 , 服务器未满足请求者在请求中设置的其中一个前提条件。 415 不支持的媒体类型 , 请求的格式不受请求页面的支持。 500 内部服务器错误。 分页分页适用于GET类型且返回集合数据的请求，根据如下参数进行分页操作。分页返回的数据见公共响应体。123456&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_523523523&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20,&#125; params 类型 描述 page int 页码 pageSize int 分页请求中一页的个数，该值固定,默认为20 项目url预览 站在数据的角度，若想满足各大模块的功能需求，可以将接口分成如下几类： base url：https://api.xxx.com/both/v1/ 分类 接口 参数 注册、用户/个人信息users 地址：https://api.xxx.com/both/v1/users keyword、sort等 鉴权、登录、登出等tokens 地址：https://api.xxx.com/both/v1/tokens keyword、category等 密码管理passwords 地址：https://api.xxx.com/both/v1/passwords password、authcode等 验证码grantCodes 地址：https://api.xxx.com/both/v1/grantCodes type等 类型types 地址：https://api.xxx.com/both/v1/types sort、uid、keyword等 资讯news 地址：https://api.xxx.com/both/v1/news uid、keyword、sort等 群groups 地址：https://api.xxx.com/both/v1/groups uid、recommend、newest、sort等 规则rules 地址：https://api.xxx.com/both/v1/rules uid、type、keyword、sort等 交易记录trades 地址：https://api.xxx.com/both/v1/trades uid、keyword、type等 发现discovery 地址：https://api.xxx.com/both/v1/discovery 钱包wallets 地址：https://api.xxx.com/both/v1/wallets uid、keyword等 登录部分接口创建token（登录）、删除token（登出）、刷新token和获取token状态（鉴权）。 登录地址：https://api.xxx.com/both/v1/tokens 请求头123POST /both/v1/tokensAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数 密码创建token 1234567891011&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: &#123; &quot;account&quot;: 18012345678, &quot;password&quot;: 123456, &quot;grantType&quot;: &quot;password&quot; &#125;&#125; key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Json对象 需要传的具体个性参数 data.account String 账号 data.password String 密码 data.grantType String 授权类型，OAuth 2.0中的授权方式，此处填password 短信验证码创建token 1234567891011&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;data&quot;: &#123; &quot;account&quot;: 18012345678, &quot;grantCode&quot;: 123456, &quot;grantType&quot;: &quot;smsCode&quot; &#125;&#125; key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Json对象 需要传的具体个性参数 data.account String 账号 data.password String 密码 data.grantType String 授权类型，OAuth 2.0中的授权方式，此处填smsCode 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: 30, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data.token String 获取的token data.expires int 期限 登出地址：https://api.xxx.com/both/v1/tokens 请求头123DELETE /both/v1/tokensAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数123456&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_3523235&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20,&#125; key 类型 描述 token String 用户现在使用的token 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567&#123; &quot;message&quot;: &quot;居然被你删除成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot; &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data.token String 这一次请求成功被删除掉的token 刷新token对token的期限进行刷新等地址：https://api.xxx.com/both/v1/tokens 请求头123PUT /both/v1/tokensAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数123456&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_3523235&quot;, &quot;page&quot;: 0, &quot;pageSize&quot;: 20,&#125; key 类型 描述 token String 用户现在使用的token 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: 30, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data.token String 获取的token data.expires int 期限 查询token状态地址：https://api.xxx.com/both/v1/tokens/token_255235235 请求头123GET /both/v1/tokens/token_255235235Accept: application/jsonContent-Type: application/json;charset=UTF-8 参数无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应123456789&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;token&quot;: &quot;token_1224124124&quot;, &quot;expires&quot;: 30, &quot;user&quot;: &quot;这个user信息需不需要在这里给，可以商量&quot; &#125;&#125; data对象不为空则表示该token是合法的。 key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data.token String 获取的token data.expires int 期限 用户部分接口注册（新增或者创建用户）、查询用户信息和修改用户信息。 注册/修改用户由于该项目业务的特殊性，将注册和修改用一个接口，后台对前端传过来的数据，先从数据库中查询，如果有该用户就是修改，如果没有该用户就新增（即注册）。地址：https://api.xxx.com/both/v1/users 请求头123POST /both/v1/usersAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数12345678910&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;&quot;, &quot;data&quot;: &#123; &quot;nickname&quot;: &quot;一声笑&quot;, &quot;userID&quot;: &quot;123456&quot;, &quot;firstname&quot;: &quot;一&quot;, &quot;lastname&quot;: &quot;声笑&quot; &#125;&#125; 参数都不是必传的 key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 data Json对象 需要传的具体个性参数 data.nickname String 用户昵称 data.userID String 用户唯一ID data.firstname String 用户姓 data.lastname String 用户名 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应1234567&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;23523525235&quot; &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 uid String 新增/或者修改的这条用户的主键 查询用户信息地址：https://api.xxx.com/both/v1/users/324553534534 请求头123GET /both/v1/users/324553534534Accept: application/jsonContent-Type: application/json;charset=UTF-8 参数无 响应头1234HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8Cache-Control: no-storePragma: no-cache 响应12345678910&#123; &quot;message&quot;: &quot;居然被你创建了token&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;nickname&quot;: &quot;一声笑&quot;, &quot;userID&quot;: &quot;123456&quot;, &quot;firstname&quot;: &quot;一&quot;, &quot;lastname&quot;: &quot;声笑&quot; &#125;&#125; key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 data Json对象 需要传的具体个性参数 data.nickname String 用户昵称 data.userID String 用户唯一ID data.firstname String 用户姓 data.lastname String 用户名 密码管理部分接口该接口对用户的密码进行管理，包括修改账户密码和支付密码,由于密码与用户是一对一的关系，新增密码和更新密码是一个语义，因此需要一个接口即可，也就是创建于修改统一用POST。地址：https://api.xxx.com/both/v1/passwords 请求头123POST /both/v1/passwordsAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数12345678910&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_235235235&quot;, &quot;data&quot;: &#123; &quot;password&quot;: &quot;123456&quot;, &quot;type&quot;: &quot;payment&quot;, &quot;grantType&quot;: &quot;sms&quot;, &quot;grantCode&quot;: &quot;1234&quot; &#125;&#125; key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 data Json对象 需要传的具体个性参数 data.password String 新密码 data.type 枚举 密码类型，payment：支付密码，user：用户登录密码，我们暂时只有支付密码，此处填payment即可 data.grantType 枚举 sms：短信验证，password：密码验证 data.grantCode String 短信验证填短信验证码，密码验证填旧密码 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;居然被你修改成功&quot;, &quot;code&quot;: 200&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 验证码/授权码该接口用于获取验证码，如短信验证码，邮箱验证码，在接口设计上并未做地址：https://api.xxx.com/both/v1/grantCodes 请求头123POST /both/v1/grantCodesAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数12345678&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;&quot;, &quot;data&quot;: &#123; &quot;type&quot;: &quot;sms&quot;, &quot;receiver&quot;: &quot;13812345678&quot; &#125;&#125; key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 data Json对象 需要传的具体个性参数 data.type 枚举 验证码类型，sms：短信验证码，email：邮箱验证码 data.receiver String 接收方，可以是短信或者邮件地址等 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234&#123; &quot;message&quot;: &quot;居然被你修改成功&quot;, &quot;code&quot;: 200&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 规则该接口用于描述邀请好友奖励等规则，由于只有获取规则，所以只列举了GET。地址：https://api.xxx.com/both/v1/rules 请求头123GET /both/v1/rulesAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数1234567&#123; &quot;extra&quot;: &quot;你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_2432344&quot;, &quot;data&quot;: &#123; &quot;type&quot;: &quot;invitation&quot; &#125;&#125; key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 data Json对象 需要传的具体个性参数 data.type 枚举 规则类型，invitation：表示邀请好友奖励的规则，暂时只有这一个 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应1234567891011121314&#123; &quot;message&quot;: &quot;居然被你修改成功&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;key&quot;: &quot;邀请好友&quot;, &quot;value&quot;: &quot;5%&quot; &#125;, &#123; &quot;key&quot;: &quot;登录&quot;, &quot;value&quot;: &quot;5%&quot; &#125; ]&#125; 之所以设计成这样是为了方便扩展，其实全部用date里的key也可以，value可以不用管。 key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data Json对象 需要传的具体个性参数 data.key String 奖励类目 data.value String 奖励值 类型部分接口该接口用于描述一些分类字段，比如新闻资讯的分类；奖励类型等，由于是只获取，所以只列举了GET。地址：https://api.xxx.com/both/v1/types 请求头123GET /both/v1/typesAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数?params={“extra”:”你想填什么就填什么”,”token”:”token_2432344”,”keyword”:”group”,”sort”:”des”,”page”:0,”pageSize”:20} key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 keyword string 用于过滤的关键字，news:资讯的分类，group:群组分类 sort 枚举 排序，des：降序，asc升序 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;type&quot;: &quot;课程&quot;, &quot;uid&quot;: &quot;2342423233&quot; &#125;, &#123; &quot;type&quot;: &quot;区块链知识&quot;, &quot;uid&quot;: &quot;3646346434&quot; &#125;, &#123; &quot;type&quot;: &quot;新闻资讯&quot;, &quot;uid&quot;: &quot;3634634633&quot; &#125; ]&#125; 之所以设计成这样是为了方便扩展，其实全部用date里的key也可以，value可以不用管。 key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data Json对象 需要传的具体个性参数 data.type String 该分类的具体意义名称 data.uid String 该分类的主键 资讯部分接口该接口用于描述一些分类字段，比如新闻资讯的分类；奖励类型等，由于是只获取，所以只列举了GET。 获取资讯列表地址：https://api.xxx.com/both/v1/news 请求头123GET /both/v1/newsAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数?params={“extra”:”你想填什么就填什么”,”token”:”token_2432344”,”keyword”:”方便面”,”sort”:”des”,”page”:0,”pageSize”:20,”data”:{“type”:”235523532”}} key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 keyword string 用于过滤的关键字 sort 枚举 排序，des：降序，asc:升序 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Object 请求参数Json对象 data.type String 请求咨询类型，默认或者不传则表示获取全部，根据类型接口返回的内容中的uid来传这个参数 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;description&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;source&quot;: &quot;币世界&quot;, &quot;author&quot;: &quot;币老爷&quot;, &quot;time&quot;: &quot;2018-04-23 20:00&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, &quot;type&quot;: &quot;课程&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot; &#125;, &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;description&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;source&quot;: &quot;币世界&quot;, &quot;author&quot;: &quot;币老爷&quot;, &quot;time&quot;: &quot;2018-04-23 20:00&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, &quot;type&quot;: &quot;课程&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot; &#125;, &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;description&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;source&quot;: &quot;币世界&quot;, &quot;author&quot;: &quot;币老爷&quot;, &quot;time&quot;: &quot;2018-04-23 20:00&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, &quot;type&quot;: &quot;课程&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot; &#125; ]&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 page int 分页请求中请求的当前页的页码 pageSize int 分页请求中一页的个数，默认为20 first String 分页请求中第一页的url ，如果没有则返回空字符串 next String 分页请求中下一页的url，如果没有则返回空字符串 previous String 分页请求中上一页的url，如果没有则返回空字符串 last String 分页请求中最后一页的url，如果没有则返回空字符串 data object 当前接口的具体数据由该json对象承载 data.uid String 该条资讯的唯一标示，可用于获取详情 data.title String 文章标题 data.description String 文章描述 data.source String 文章来源 data.author String 文章作者 data.time String 时间 data.url String 该条资讯web连接 data.type String 所属的类型名称，对应着类型接口中的名称 data.image String 文章配图 获取资讯详情地址：https://api.xxx.com/both/v1/news/34636436 请求头123GET /both/v1/news/34636436Accept: application/jsonContent-Type: application/json;charset=UTF-8 参数无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;title&quot;: &quot;牛市要来了，赶紧上车&quot;, &quot;description&quot;: &quot;牛牛牛，你牛什么牛，牛牛牛，你牛什么牛，牛牛牛，你牛什么牛&quot;, &quot;source&quot;: &quot;币世界&quot;, &quot;author&quot;: &quot;币老爷&quot;, &quot;time&quot;: &quot;2018-04-23 20:00&quot;, &quot;url&quot;: &quot;https://www.baidu.com/&quot;, &quot;type&quot;: &quot;课程&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot; &#125;&#125; 之所以设计成这样是为了方便扩展，其实全部用date里的key也可以，value可以不用管。 key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data object 当前接口的具体数据由该json对象承载 data.uid String 该条资讯的唯一标示，可用于获取详情 data.title String 文章标题 data.description String 文章描述 data.source String 文章来源 data.author String 文章作者 data.time String 时间 data.url String 该条资讯web连接 data.type String 所属的类型名称，对应着类型接口中的名称 data.image String 文章配图 群组部分接口获取群列表地址：https://api.xxx.com/both/v1/groups 请求头123GET /both/v1/groupsAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数?params={“extra”:”你想填什么就填什么”,”token”:”token_2432344”,”keyword”:”方便面”,”sort”:”recommend”,”page”:0,”pageSize”:20,”data”:{“type”:”recommend”}} key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 keyword string 用于过滤的关键字 sort 枚举 排序，des：降序，asc:升序 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Object 请求参数Json对象 data.type String recommend：热度，newest：新旧 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;type&quot;: &quot;recommend&quot;, &quot;weight&quot;: &quot;9999&quot;, &quot;time&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;name&quot;: &quot;MOL链官方群&quot;, &quot;description&quot;: &quot;MOL链官方群是个牛B哄哄的群&quot;, &quot;memberAmount&quot;: &quot;1000&quot;, &quot;state&quot;: &quot;已删除&quot;, &quot;groupLink&quot;: &quot;t.me/molmol&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;group&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125;, &quot;reward&quot;: &#123; &quot;isReward&quot;: true, &quot;remainder&quot;: &quot;56322&quot;, &quot;deadline&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;reward&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;mol&quot; &#125; &#125;, &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;type&quot;: &quot;recommend&quot;, &quot;weight&quot;: &quot;9999&quot;, &quot;time&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;name&quot;: &quot;MOL链官方群&quot;, &quot;description&quot;: &quot;MOL链官方群是个牛B哄哄的群&quot;, &quot;memberAmount&quot;: &quot;1000&quot;, &quot;state&quot;: &quot;已删除&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;group&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125;, &quot;reward&quot;: &#123; &quot;isReward&quot;: true, &quot;remainder&quot;: &quot;56322&quot;, &quot;deadline&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;reward&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;mol&quot; &#125; &#125; ]&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 page int 分页请求中请求的当前页的页码 pageSize int 分页请求中一页的个数，默认为20 first String 分页请求中第一页的url ，如果没有则返回空字符串 next String 分页请求中下一页的url，如果没有则返回空字符串 previous String 分页请求中上一页的url，如果没有则返回空字符串 last String 分页请求中最后一页的url，如果没有则返回空字符串 data object 当前接口的具体数据由该json对象承载 data.uid String 该群组的主键 data.type 枚举 recommend：热度，newest：新旧 data.weight String 权重 data.time String 申请时间 data.image String 群头像 data.name String 群名称 data.description String 群描述 data.memberAmount String 群成员总数 data.state 枚举 deleted：已删除 data.action Object 跳转动作 data.action.type String 跳转类型，group：加群，web：跳转到网页 data.action.param String 跳转所需参数，如加群连接，web连接 data.reward.isReward String 是否奖励 data.reward.remainder String 剩余奖励总数 data.reward.deadline String 奖励截止时间 data.reward.reward String 单个奖励币数量 data.reward.currency String 奖励币种 获取群详情地址：https://api.xxx.com/both/v1/groups/23532523后面省略 申请（上传）推荐群（允许批量操作）地址：https://api.xxx.com/both/v1/groups 请求头123POST /both/v1/groupsAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数1234567891011121314151617181920212223242526272829303132&#123; &quot;extra&quot;: &quot;扩展字段，你想填什么就填什么&quot;, &quot;token&quot;: &quot;token_312331&quot;, &quot;data&quot;: [ &#123; &quot;time&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;name&quot;: &quot;MOL链官方群&quot;, &quot;groupLink&quot;: &quot;t.me/molmol&quot;, &quot;memberAmount&quot;: &quot;1000&quot;, &quot;reward&quot;: &#123; &quot;remainder&quot;: &quot;56322&quot;, &quot;deadline&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;reward&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;mol&quot; &#125; &#125;, &#123; &quot;time&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;name&quot;: &quot;MOL链官方群&quot;, &quot;groupLink&quot;: &quot;t.me/molmol&quot;, &quot;memberAmount&quot;: &quot;1000&quot;, &quot;reward&quot;: &#123; &quot;remainder&quot;: &quot;56322&quot;, &quot;deadline&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;reward&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;mol&quot; &#125; &#125; ]&#125; key 类型 描述 extra String 扩展字段 token String 权限标志 data object 当前接口的具体数据由该json对象承载 data.uid String 该群组的主键 data.time String 申请时间 data.image String 群头像 data.name String 群名称 data.memberAmount String 群成员总数 data.groupLink String 文章配图 data.reward.remainder String 剩余奖励总数 data.reward.deadline String 奖励截止时间 data.reward.reward String 单个奖励币数量 data.reward.currency String 奖励币种 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112&#123; &quot;message&quot;: &quot;居然被你上传成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;2342423233&quot; &#125;, &#123; &quot;uid&quot;: &quot;2342423233&quot; &#125; ]&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data object 当前接口的具体数据由该json对象承载 data.uid String 上传成功的群组的主键 钱包部分接口获取钱包列表地址：https://api.xxx.com/both/v1/wallets 请求头123GET /both/v1/walletsAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数?params={“extra”:”你想填什么就填什么”,”token”:”token_2432344”,”keyword”:”摩尔币”,”sort”:”des”,”page”:0,”pageSize”:20,”data”:{“currency”:”CNY”}} key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 keyword string 用于过滤的关键字 sort 枚举 排序，des：降序，asc:升序 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Object 请求参数Json对象 data.currency String 请求折算的币种 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;name&quot;: &quot;MOL币钱包&quot;, &quot;amount&quot;: &quot;565.0989&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;worth&quot;: &#123; &quot;price&quot;: &quot;0.12&quot;, &quot;value&quot;: &quot;0.24&quot;, &quot;currency&quot;: &quot;￥ &quot; &#125; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;name&quot;: &quot;以太币钱包&quot;, &quot;amount&quot;: &quot;565.0989&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;worth&quot;: &#123; &quot;price&quot;: &quot;0.12&quot;, &quot;value&quot;: &quot;0.24&quot;, &quot;currency&quot;: &quot;￥ &quot; &#125; &#125; ]&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 page int 分页请求中请求的当前页的页码 pageSize int 分页请求中一页的个数，默认为20 first String 分页请求中第一页的url ，如果没有则返回空字符串 next String 分页请求中下一页的url，如果没有则返回空字符串 previous String 分页请求中上一页的url，如果没有则返回空字符串 last String 分页请求中最后一页的url，如果没有则返回空字符串 data object 当前接口的具体数据由该json对象承载 data.uid String 钱包主键 data.name String 该币钱包名称 data.amount String 该币总数 data.currency String 该币符号 data.image String 该币图标 data.worth.price String 该币单价 data.worth.value String 用户所拥有总价值 data.worth.currency 枚举 对应的币种符号 获取钱包详情地址：https://api.xxx.com/both/v1/wallets/23423423后面省略 交易部分接口获取交易记录列表地址：https://api.xxx.com/both/v1/trades 请求头123GET /both/v1/tradesAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数?params={“extra”:”你想填什么就填什么”,”token”:”token_2432344”,”keyword”:”摩尔币”,”sort”:”des”,”page”:0,”pageSize”:20,”data”:{“category”:”invitation”}} key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 keyword string 用于过滤的关键字 sort 枚举 排序，des：降序，asc:升序 page int 页码，不传则默认为0 pageSize int 要求每一页返回最大个数，不传则默认为20 data Object 请求参数Json对象 data.category String 交易记录的类型，默认或者不传则表示获取全部，invitation0：邀请好友的奖励（其中0表示自己这一级，同理1表示自己的好友邀请好友注册的奖励），register：自己注册奖励，signin：自己签到奖励 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125;, &#123; &quot;uid&quot;: &quot;235235235&quot;, &quot;title&quot;: &quot;邀请好友&quot;, &quot;description&quot;: &quot;二级好友邀请好友一根韭菜&quot;, &quot;amount&quot;: &quot;-50&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;currency&quot;: &quot;MOL&quot;, &quot;time&quot;: &quot;2018-04-23 17:38:44&quot; &#125; ]&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 page int 分页请求中请求的当前页的页码 pageSize int 分页请求中一页的个数，默认为20 first String 分页请求中第一页的url ，如果没有则返回空字符串 next String 分页请求中下一页的url，如果没有则返回空字符串 previous String 分页请求中上一页的url，如果没有则返回空字符串 last String 分页请求中最后一页的url，如果没有则返回空字符串 data object 当前接口的具体数据由该json对象承载 data.uid String 该条交易主键 data.title String 交易标题名称 data.description String 交易描述 data.amount String 该笔交易金额 data.image String 交易图标 data.currency String 交易币种 data.time String 交易时间 获取交易记录详情地址：https://api.xxx.com/both/v1/trades/234324后面省略 发现页部分接口本来该接口是不需要的，可以通过多个接口拼凑出我们想要的数据，但是考虑到性能问题，设计出一个集合接口来。地址：https://api.xxx.com/both/v1/discovery 请求头123GET /both/v1/discoveryAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数无 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;data&quot;: &#123; &quot;ads&quot;: [ &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125; &#125;, &#123; &quot;image&quot;: &quot;http://ww3.sinaimg.cn/large/0060lm7Tly1fo6vt0p500j30af0ad758.jpg&quot;, &quot;title&quot;: &quot;安防小卫士&quot;, &quot;uid&quot;: &quot;13212133313&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125; &#125; ], &quot;recommendations&quot;: &#123; &quot;title&quot;: &quot;热门推荐群&quot;, &quot;groups&quot;: [ &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;type&quot;: &quot;recommend&quot;, &quot;weight&quot;: &quot;9999&quot;, &quot;time&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;name&quot;: &quot;MOL链官方群&quot;, &quot;description&quot;: &quot;MOL链官方群是个牛B哄哄的群&quot;, &quot;memberAmount&quot;: &quot;1000&quot;, &quot;state&quot;: &quot;已删除&quot;, &quot;reward&quot;: &#123; &quot;isReward&quot;: true, &quot;remainder&quot;: &quot;56322&quot;, &quot;deadline&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;reward&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;mol&quot; &#125;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;t.me/molmol&quot; &#125; &#125;, &#123; &quot;uid&quot;: &quot;2342423233&quot;, &quot;type&quot;: &quot;recommend&quot;, &quot;weight&quot;: &quot;9999&quot;, &quot;time&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;name&quot;: &quot;MOL链官方群&quot;, &quot;description&quot;: &quot;MOL链官方群是个牛B哄哄的群&quot;, &quot;memberAmount&quot;: &quot;1000&quot;, &quot;state&quot;: &quot;已删除&quot;, &quot;reward&quot;: &#123; &quot;isReward&quot;: true, &quot;remainder&quot;: &quot;56322&quot;, &quot;deadline&quot;: &quot;2018-04-23 15:12:05&quot;, &quot;reward&quot;: &quot;10&quot;, &quot;currency&quot;: &quot;mol&quot; &#125;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;t.me/molmol&quot; &#125; &#125; ] &#125;, &quot;discoverys&quot;: [ &#123; &quot;uid&quot;: &quot;32523523&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;title&quot;: &quot;币圈咨询&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125; &#125;, &#123; &quot;uid&quot;: &quot;32523523&quot;, &quot;image&quot;: &quot;http://a3.peoplecdn.cn/fbcba40035ae5f2ad90c19abe58560a2.jpg&quot;, &quot;title&quot;: &quot;币圈咨询&quot;, &quot;action&quot;: &#123; &quot;type&quot;: &quot;web&quot;, &quot;param&quot;: &quot;https://www.baidu.com/&quot; &#125; &#125; ] &#125;&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 data object 当前接口的具体数据由该json对象承载 data.ads Object数组 广告对象 data.ads.image String 轮播图图片链接 data.ads.title String 轮播图描述 data.ads.uid String 该广告主键 data.ads.action Object 动作对象，用于描述跳转这类的动作 data.ads.action.type String 动作类型，web：跳转到web data.ads.action.param String 执行该动作所需要的参数，例如跳转web的链接 data.recommendations Object 广告对象 data.recommendations.title String 该分类的标题，比如此处的“热门群推荐” data.recommendations.groups Object数组 描述推荐的群列表 data.recommendations.groups.uid String 该群组的主键 data.recommendations.groups.type 枚举 recommend：热度，newest：新旧 data.recommendations.groups.weight String 权重 data.recommendations.groups.time String 申请时间 data.recommendations.groups.image String 群头像 data.recommendations.groups.name String 群名称 data.recommendations.groups.description String 群描述 data.recommendations.groups.memberAmount String 群成员总数 data.recommendations.groups.state 枚举 deleted：已删除 data.recommendations.groups.action Object 跳转动作 data.recommendations.groups.action.type String 跳转类型，group：加群，web：跳转到网页 data.recommendations.groups.action.param String 跳转所需参数，如加群连接，web连接 data.recommendations.groups.reward.isReward String 是否奖励 data.recommendations.groups.reward.remainder String 剩余奖励总数 data.recommendations.groups.reward.deadline String 奖励截止时间 data.recommendations.groups.reward.reward String 单个奖励币数量 data.recommendations.groups.reward.currency String 奖励币种 data.items Object数组 功能项数组 data.items.uid String 该功能项的主键 data.items.image String 该功能项的图标 data.items.title String 该功能项的标题 data.items.groups.action Object 跳转动作 data.items.groups.action.type String 跳转类型，group：加群，web：跳转到网页 data.items.groups.action.param String 跳转所需参数，如加群连接，web连接 代理服务器部分接口该接口用于获取sokcs5服务器列表地址：https://api.xxx.com/both/v1/servers 请求头123GET /both/v1/serversAccept: application/jsonContent-Type: application/json;charset=UTF-8 参数?params={“extra”:”你想填什么就填什么”,”token”:”token_2432344”} key 类型 描述 extra String 额外扩展字段 token String 此处传空或者不传 响应头12HTTP/1.1 200 OKContent-Type:application/json; charset=utf-8 响应123456789101112131415161718192021222324252627282930&#123; &quot;message&quot;: &quot;居然被你查询成功了&quot;, &quot;code&quot;: 200, &quot;page&quot;: 0, &quot;pageSize&quot;: 20, &quot;first&quot;: &quot;https://...&quot;, &quot;next&quot;: &quot;https://...&quot;, &quot;previous&quot;: &quot;https://...&quot;, &quot;last&quot;: &quot;https://...&quot;, &quot;data&quot;: [ &#123; &quot;password&quot;: &quot;&quot;, &quot;port&quot;: &quot;10497&quot;, &quot;ip&quot;: &quot;13.251.28.110&quot;, &quot;username&quot;: &quot;&quot; &#125;, &#123; &quot;password&quot;: &quot;&quot;, &quot;port&quot;: &quot;10497&quot;, &quot;ip&quot;: &quot;13.251.28.110&quot;, &quot;username&quot;: &quot;&quot; &#125;, &#123; &quot;password&quot;: &quot;&quot;, &quot;port&quot;: &quot;10497&quot;, &quot;ip&quot;: &quot;13.251.28.110&quot;, &quot;username&quot;: &quot;&quot; &#125; ]&#125; key 类型 描述 message String 随便写，也可以作为服务器给前端固定提示的内容 code int 与响应头里的Status一样 page int 分页请求中请求的当前页的页码 pageSize int 分页请求中一页的个数，默认为20 first String 分页请求中第一页的url ，如果没有则返回空字符串 next String 分页请求中下一页的url，如果没有则返回空字符串 previous String 分页请求中上一页的url，如果没有则返回空字符串 last String 分页请求中最后一页的url，如果没有则返回空字符串 data object 当前接口的具体数据由该json对象承载 data.password String 代理服务器密码 data.port String 代理服务器端口号 data.ip String 代理服务器IP地址 data.user String 代理服务器用户名 错误/异常处理 不要发生了错误但给2XX响应，客户端可能会缓存成功的http请求； 正确设置http状态码，不要自定义； Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。 对第三点的实现稍微多说一点： Java 服务器端一般用异常表示 RESTful API 的错误。API 可能抛出两类异常：业务异常和非业务异常。业务异常由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。非业务类异常表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。 业务类异常必须提供2种信息： 如果抛出该类异常，HTTP 响应状态码应该设成什么； 异常的文本描述； 1234567891011121314151617181920212223错误描述&#123; &quot;message&quot;: &quot;又特么错了&quot;, &quot;code&quot;: 500, &quot;document&quot;: &quot;https://developer.xxx.com/v1/errors/500&quot;, &quot;exception&quot;: [ &#123; &quot;code&quot;: &quot;NullValue&quot;, &quot;target&quot;: &quot;PhoneNumber&quot;, &quot;message&quot;: &quot;Phone number must not be null&quot; &#125;, &#123; &quot;code&quot;: &quot;NullValue&quot;, &quot;target&quot;: &quot;LastName&quot;, &quot;message&quot;: &quot;Last name must not be null&quot; &#125;, &#123; &quot;code&quot;: &quot;MalformedValue&quot;, &quot;target&quot;: &quot;Address&quot;, &quot;message&quot;: &quot;Address is not valid&quot; &#125; ]&#125; 12345678错误请求头&#123; &quot;date&quot;: &quot;Mon, 08 Jan 2018 03:07:08 GMT&quot;, &quot;server&quot;: &quot;nginx/1.10.3 (Ubuntu)&quot;, &quot;connection&quot;: &quot;keep-alive&quot;, &quot;content-length&quot;: &quot;237&quot;, &quot;content-type&quot;: &quot;application/json&quot;&#125; 接口版本（Versioning）个人倾向于将版本号放在HTTP头信息中，虽然不如放入URL中更直观，但是不方便我们统一管理，因为在前端URL是拼出来的String，请求头是统一个对象去设置，除非有特殊情况，某一个接口需1.0版本，某一个接口需2.0版本，这就另当别论，到时候统一商量，在拼这个URL的时候，放到固定目录（位置），如：api.xxx.com:8080/both/版本（一般用v1、v2）/user 统一放在一级目录，这样的前端在拼接的时候，统一放到某个位置，也就方便管理了。 URL失效随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 对于后台文档的要求文档要求描述详尽，尽可能的引导接口使用者理解接口设计，这样才能减少接口的改动，又能适应多变的业务。 安全待定 统计、历史记录等埋点业务待定]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android端架构与技术选型]]></title>
    <url>%2F%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%2FAndroid%2FAndroid%E7%AB%AF%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[Android端架构与技术选型 Author：Leguang E-Mail：langmanleguang@qq.com 前言由于我司目前处于项目探索阶段，会有较多的项目和迭代，因此快速开发是主旋律，可维护是基调，这就要求代码高可复用、灵活拆分、便于调试，基于这些原因我将根据经验对Android开发架构和技术选型进行梳理。这份文档可看做我司Android部分项目简介和技术简介。由于时间紧凑，若有遗漏可通过QQ/微信666233联系我询问。 开发环境IDE使用Android Studio3.0及以上版本，Android Studio在3.0这一版本改动比较大，功能上增强了不少，起码可以原生使用Lambda，也可以使用Stream流操作集合，这些在数据处理上都是很好的。 工具插件工欲善其事必先利其器，配合好插件事半功倍，以下是几个最常用的，需要安装一下。 GsonFormat Translation CodeGlance Android Drawable Importer folding-plugin Android Studio Prettify 更多详情请参考：Android 开发者工具。 规范一名二姓三风水，四积阴德五读书，名不正则言不顺，言不顺则事难成。软件开发其实就是门命名的艺术，所以首先定义一些规范，提出一些硬性要求，大家在命名的时候尽量多花点心思，多参考优秀的命名风格（强烈推荐参考：阿里巴巴Java开发手册），以利于项目维护、增强代码可读性、提升 Code Review 效率以及规范团队协作开发，让我们按照规范自成方圆，具体请参考：Android开发规范。同时开源配合阿里巴巴开源的java代码规范检测插件，尽量做到各个维度的规范。 一个单词尽量选择5–7个字母的，这样才最优美。 首字母缩写的单词尽量每个字母都用大写，例如ID。用个小写，人家还以为是一个单词。当然uri、url、urn这种除外，因为大家都知道这个是什么。 前后端的某些名称概念要统一用某一个单词，比如支付的统一订单，支付宝用的是order，微信用的是unifiedorder，那我们统一对订单这个概念用order这个词。再比如主机：后台用gateway，现在我们统一用host。这单词不统一很容易分裂。 Android技术栈Gradle构建对Gradle的配置要求： 对于编译版本和依赖版本等进行统一管理。 尽量分为debug版本和release版本。 能自动处理版本号。 配置多渠道打包。 自定义输出各类Apk文件名称。 尽量通过配置Gradle的形式配置第三方Key。 通过productFlavors构建不同的渠的App（应用场景有很多，比如应用商店的加壳）。 组件化组件是指项目开发中能作为一个独立功能的部分。我们平时开发中尽量将独立功能的部分（例如某一个自定义View，或者某个工具类等）抽取出来做成组件，然后发布到jcenter、jitpack或者私有服务器上，平时开发的时候就直接在Gradle里配置依赖即可，目的也是为了快速开发和充分复用。 模块化首先模块化的目的除了为了快速开发和复用代码外，更为了在项目逐渐庞大起来后能灵活协作开发和单独调试，耦合度降低便于拆分组合。根据以往经验，我将整体架构分为5层（并不一定要分这么多层），其关系应该是如下图所示： 整体架构从上依赖至下，下层为上层提供服务。架构的设计主要是为了应对我们公司自身业务探索时快速开发，在不断的开发过程中汲取可用部分抽象整理成独立的模块以方便后续使用。同时模块的划分也根据不同的功能和业务划分到不同的层级中。理论上来说可以有一个集成代码库，然后从这一套代码中通过差异化的构建，编译出不同的App，缺点是代码库会越来越大，组件越来越多，模块也越来越多。如果单独根据项目来集成又会出现多套相同代码需要维护的问题，这个得根据业务需求和是否需要长期维护等因素适当取舍才行。根据Android项目的目录特点，每一个项目在创建出来会有一个App module，这个module我们当做一个空壳，单独依赖main层，只根据需求写Gradle配置而已。模块之间的通讯通过ARouter进行，或者可以自己在ACommon层定义接口的方式进行通讯。 MVP模式MVC/MVP/MVVM模式有很多，这里所说的也不是纯粹的MVP，应该是MVP和MVVM混合体的改造版，目的还是为了充分解耦和方便调试。同时为了方便调试，各层之间完全依赖接口，如下图所示： 同时由于我们强调组件化、模块化，可以总结为按业务分模块，按功能分组件，按MVP分层。 UI框架为了取得更好的性能，页面更好的管理，整体UI框架以多Activity+多Fragment的形式搭建，界面经历优先选择使用Fragment，Activity只做Fragment的容器，同时Fragment做为MVP模式中的View层。使用了Fragmentation这个框架来操作Fragment，这样合理的控制Activity个数，也使得界面更轻量级。 依赖公共依赖配置在abse module的build.gradle里，其他特殊需求的依赖配置在main module的build.gradle中，可自行到Github上查看学习。 网络访问框架：OkHttp、Retrofit配合RxJava2。 图片加载框架：Glide、Fresco、Picasso。 缓存框架：DiskLruCache、 Robospice。 Json解析框架：Gson、Fastjson、Jackson。 事件总线：EventBus。 ORM框架：Litepal、Room。 数据统计：友盟统计，百度统计。 奔溃搜集：腾讯Bugly、Bugtags。 云存储：七牛。 即使通讯：环信、融云、阿里百川。 推送：小米推送、华为推送、腾讯推送、阿里云推送。 安全加固：360加固宝、爱加密。 还有其他各种各样开源的自定义控件、动画等。除了以上提到的开源框架，也包括一些不开源的SDK。 需要注意的是在引入第三方库的时候应做好充分调查。 代码管理统一使用git进行管理。 前后端分离理论上在立项之后，由于前面的充分准备，加上模块化的开发，前期在UI图还没拿到手之前，就能将一个App最初期的任务如项目搭建、闪屏页、欢迎页、注册登录、个人信息、设置等常规模块通过引人的方式快速完成。之后再根据接口约束开发，不需要等着后台接口做好再动手。 建议 作为一个有追求的程序员，应尽量使用最新的技术。 现在Android 4.4以下的手机已经越来越少，几乎可以不用考虑，因此可以把minSdkVersion设置成21。 在使用icon的时候，尽量使用矢量图。 数据操作可以考虑使用RxJava或者Stream。 建议平时养成写备忘录的习惯，想到点什么与产品有关的就快速记下来，开会的时候就一起讨论。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android模板代码规范——效率为王]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FAndroid%2FAndroid%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%2FAndroid%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[Android模板代码规范——效率为王 Author：Leguang E-Mail：langmanleguang@qq.com 前言 没有对错，只有习惯 Android 开发本身是遵循 MVC 模式模式的，已经具备一定的模板性，但是由于人与人的习惯问题，对代码的细节会有一定的差异性，为了减少这种差异性，我们规定一套模板出来，同一个小组、部分甚至公司都可以按照这么一套最佳实践出来的模板抄，这样未来其他人员接手时会很容易明白你的套路，找到亲切感以减少不必要的心理负担。同时，我们在写某一个模块的功能的时候，都会或多或少地利用到之前写的代码，这里我说的“利用”而非“复用”，即复制粘贴。而简单粗暴的复制粘贴，却又想改动最小，出错最小，那么如何做到这一点呢？那就得要求之前的代码都模板代码，比如之前的Toolbar控件变量都叫toolbar，之前的RecyclerView控件变量都叫recyclerView，之前的方法都叫initData();，这样一来复制粘贴过来你基本不用改动什么。接下来们就以提现记录这么一个简单的MVP模式来发的功能为例，完整的约定一下MVP各层的模板代码。 公共要求0. 空格和冗余不要随意空行，也不要出现多余的东西。写代码时勤快按 Ctrl+Alt+L 和 Ctrl+Alt+O ，这样会格式化代码同时删除不必要的引用，让代码美观。同时不要随意空格，现在Android Studio是用的谷歌的 Java 模板 Style ，都有相关规定。XML文件中也是如此，写完代码后勤快格式化，删除多余空行。 1. 相关命名规范具体参考：http://doc.un75.com:5934/开发规范/Android开发规范.html 2. 文件头注释每一个文件都必须要有文件头注释，如下所示：12345678/** * @author: leguang * @e-mail: langmanleguang@qq.com * @version: v0.0.0 * @blog: https://github.com/leguang * @time: 2018/6/14 9:36 * @description: */ 3. 路由配置文件如果有 @Route 注解，那其值应该 /{module}/{class name} ，例如：1@Route(path = &quot;/mine/WithdrawRecordsFragment&quot;) 考虑到常量重复引用会出错，我们抽取到 RouterHelper 中，实际引用如下所示：1@Route(path = RouterHelper.WithdrawRecordsFragment) 4. 日志标签每一个类都要求有log tag，且写在第一行，Android Studio活动模板是logt就会出现log tag快速编辑。如下所示：1public static final String TAG=WithdrawRecordsFragment.class.getSimpleName(); 5. 注释 类注释写在文件头注释中。如下所示： 类的成员变量如果需要注释，则用单行注释写在末尾，如果较长一行写不下，考虑到美观问题则写在成员变量的上面。对于成员变量的注释尽量不要用多行注释。如下所示： 成员方法尽量写注释，如果实在不需要的，可不写。如下所示： 6. 方法出现的位置和顺序在方法从上至下的调用顺序就决定了方法从上至下书写的位置。如下所示： MVP中的模板MVP中的ViewActivity我们的页面是多Activity+多Fragment的结构，基本都是用Fragment来承载View这一层，对于Activity只起一个承载Fragment和一些公共代码作用。如下所示： 基本无其他代码，只有多个Fragment都用到的公共方法才写在Activity中，View层内容都集中在Fragment中。 Fragment除了上述公共要求外，创建Fragment使用了一个静态方法，如下所示： 如果需要传参则统一使用Bundle作为唯一参数，具体参数都丢进Bundle里，这样我们在复制粘贴的时候就不需要管参数类型问题了，统一都只有一种类型。如下所示： 有参数就要获取，而获取参数统一在onCreate方法里获取，如下所示： 统一使用模板代码，安全高效，同时注意获取的key是统一的一个，除非有两个，则再自行定义。 接下来是Fragment中的两个标准回调，也可以看成是View的入口，所有的代码都从这里开始，如下所示： 接下来就是定义的这些方法的具体实现。其中需要强调的是变量的命名，尽量都取一样的名字，如果该类中只有一个 RecyclerView 则命名为 recyclerView 即可，如果有多有 RecyclerView 则命名为 rvXXX ，这样一来复制到其他地方使用的时候基本不用改写什么，由于都是模板方法，就不一一列出了。对于配合RecyclerView使用的Adapter，如果代码不多就不需要独立出一个类来，只需要使用匿名内部类的形式即可，如下所示： 对于刷新和加载更多，建议也独立出一个方法来，因为有的时候会接收到别的广播后，需要刷新界面等。如下所示： 对于异常的处理，由于我们把非200和其他的异常都统一回调到View的 error(BaseResponse response) 方法中，因此需要根据 BaseResponse 中的错误码做不同的处理，当然也可以定义其他专属回调方法供P层调用。如下所示： MVP中的Presenter首先对类的命名统一命名为：XXXPresenter，一些基本的初始模板代码如下所示： 由于Presenter只是起一个调度作用，且数据都是封装在Modle层中，并且以 RxJava 中的Observable类型返回，因此Presenter拿到的都是Observable，所以做如下规定： 所有的数据是在异步线程中获取和处理，只有在回调到View层之前那一刻才切换回主线程，因此 1.observeOn(AndroidSchedulers.mainThread()) 固定写在Presenter中。 在 subscribe 时，我们在Presenter的父类中定义了好几种可使用的内嵌类（就是大家常说的非静态内部类）形式：BaseObserver 、BaseConsumer 、DefaultObserver 、 DefaultConsumer 等，这些都是根据 是否调用View的start方法（是否需要 loading 弹框） 是都将非200的错误码归类到View的error方法中（是否需要将非200错误传递到View层） 其他特殊类型需求的。比如 StringObserver 等 等来划分和实现的，因此可以实际需求来使用，比如在列表页面，由于顶部有下拉刷新动画，因此就不需要 loading 弹框，就可以不使用 BaseObserver ，而只需要 BaseConsumer ，同时自己调用 this::error 。 如果 subscribe 是使用的Consumer，那必须要添加到 mRxManager 中，Observer 则不需要，如下所示： 为避免内存泄露，Context 对象尽量不要传递到 Presenter 层，在 Presenter 中如果要使用 Context 尽量使用 BaseApp 中定义的静态全局变量 mContext ，如果万一真要传递过来，则考虑只在函数作用域内。 MVP中的Model分包Model层是数据相关层，对于不同类型的模型分类放置在不同的包下，模型统一放在entity包下，entity包下又分bean和db，bean统一为网络映射文件，db统一为数据库ORM映射文件。 对于 Model 层，相当于数据 Repository ，网络获取、数据库、缓存等数据来源都写在这一层，并且最好封装成 RxJava 的 Observable 形式返回给 Presenter 层调用，同时记得放到异步线程中，如下所示： MVP中的Contract我们的MVP三角色之间的依赖全是依赖的接口，因此会有很多接口类，为防止类爆炸，我们用一个接口类包含其他小的接口类，所以使用 Contract 这个概念来承载，将三层需要用到接口都定义来 Contract 接口类中，并作出如下规定： 所有接口定义时，参数统一传 Params 对象，将参数定义并装载在 Params 类中，这一样做的目的也是方便复制粘贴时改动最少，同时也方便统一管理，因为一个项目中能使用到的不同名称的参数了不起也就几十个，其实大多数只是类型不同而已，而接口中定义的参数对应的 key 是 Retrofit 定义接口时就已经写好的，所以三层之间只是传递一个不通类型的值而已。对于 post 请求传递 json 对象时，也只需要传递 Params 对象过去，同时由于我们已经设置了空值过滤，Params 里的字段都是用的包装类型，因此你没设置值的参数是不会传递到后台的。 相应到 View 的接口中的参数，尽量是 BaseResponse 类型的，因为你不知道 View 需要用到哪些东西，同时也方便复制粘贴改动量小。 如下所示： 包按模块以MVP各层分包，其中如果有Activity的话，则放模块根包里。如下所示： 总结之所以定义这样的模板代码，主要是为了规范编码范式，使每个模块都“长得一样”，一套好的模板代码可以让开发者受益，也可以让后来接手的人很快找到套路并理解融入进去。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Android开发规范]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FAndroid%2FAndroid%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%2FAndroid%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[Android开发规范 Author：Leguang E-Mail：langmanleguang@qq.com 摘要 1 前言 2 AS 规范 3 命名规范 4 代码样式规范 5 资源文件规范 6 版本统一规范 7 第三方库规范 8 注释规范 9 测试规范 10 其他的一些规范 1 前言为了有利于项目维护、增强代码可读性、提升 Code Review 效率以及规范团队安卓开发，故提出以下安卓开发规范，该规范结合本人多年的开发经验并吸取多家之精华，可谓是本人的呕心沥血之作，称其为当前最完善的安卓开发规范一点也不为过，如有更好建议，欢迎到 GitHub 提 issue，原文地址：[Android 开发规范（完结版）][Android 开发规范（完结版）]。相关 Demo，可以查看我的 Android 开发工具类集合项目：[Android 开发人员不得不收集的代码][Android 开发人员不得不收集的代码]。后续可能会根据该规范出一个 CheckStyle 插件来检查是否规范，当然也支持在 CI 上运行。 2 AS 规范工欲善其事，必先利其器。 尽量使用最新的稳定版的 IDE 进行开发； 编码格式统一为 UTF-8； 编辑完 .java、.xml 等文件后一定要 格式化，格式化，格式化（如果团队有公共的样式包，那就遵循它，否则统一使用 AS 默认模板即可）； 删除多余的 import，减少警告出现，可利用 AS 的 Optimize Imports（Settings -&gt; Keymap -&gt; Optimize Imports）快捷键； Android 开发者工具可以参考这里：[Android 开发者工具][Android 开发者工具]； 3 命名规范代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。正确的英文拼写和语法可以让阅读者易于理解，避免歧义。 注意：即使纯拼音命名方式也要避免采用。但 alibaba、taobao、youku、hangzhou 等国际通用的名称，可视同英文。 3.1 包名包名全部小写，连续的单词只是简单地连接起来，不使用下划线，采用反域名命名规则，全部使用小写字母。一级包名是顶级域名，通常为 com、edu、gov、net、org 等，二级包名为公司名，三级包名根据应用进行命名，后面就是对包名的划分了，关于包名的划分，推荐采用 PBF（按功能分包 Package By Feature），一开始我们采用的也是 PBL（按层分包 Package By Layer），很坑爹。PBF 可能不是很好区分在哪个功能中，不过也比 PBL 要好找很多，且 PBF 与 PBL 相比较有如下优势： package 内高内聚，package 间低耦合 哪块要添新功能，只改某一个 package 下的东西。 PBL 降低了代码耦合，但带来了 package 耦合，要添新功能，需要改 model、dbHelper、view、service 等等，需要改动好几个 package 下的代码，改动的地方越多，越容易产生新问题，不是吗？ PBF 的话 featureA 相关的所有东西都在 featureA 包，feature 内高内聚、高度模块化，不同 feature 之间低耦合，相关的东西都放在一起，还好找。 package 有私有作用域（package-private scope） 你负责开发这块功能，这个目录下所有东西都是你的。 PBL 的方式是把所有工具方法都放在 util 包下，小张开发新功能时候发现需要一个 xxUtil，但它又不是通用的，那应该放在哪里？没办法，按照分层原则，我们还得放在 util 包下，好像不太合适，但放在其它包更不合适，功能越来越多，util 类也越定义越多。后来小李负责开发一块功能时发现需要一个 xxUtil，同样不通用，去 util 包一看，怎么已经有了，而且还没法复用，只好放弃 xx 这个名字，改为 xxxUtil……，因为 PBL 的 package 没有私有作用域，每一个包都是 public（跨包方法调用是很平常的事情，每一个包对其它包来说都是可访问的）；如果是 PBF，小张的 xxUtil 自然放在 featureA 下，小李的 xxUtil 在 featureB 下，如果觉得 util 好像是通用的，就去 util 包看看要不要把工具方法添进 xxUtil, class 命名冲突没有了。 PBF 的 package 有私有作用域，featureA 不应该访问 featureB 下的任何东西（如果非访问不可，那就说明接口定义有问题）。 很容易删除功能 统计发现新功能没人用，这个版本那块功能得去掉。 如果是 PBL，得从功能入口到整个业务流程把受到牵连的所有能删的代码和 class 都揪出来删掉，一不小心就完蛋。 如果是 PBF，好说，先删掉对应包，再删掉功能入口（删掉包后入口肯定报错了），完事。 高度抽象 解决问题的一般方法是从抽象到具体，PBF 包名是对功能模块的抽象，包内的 class 是实现细节，符合从抽象到具体，而 PBL 弄反了。 PBF 从确定 AppName 开始，根据功能模块划分 package，再考虑每块的具体实现细节，而 PBL 从一开始就要考虑要不要 dao 层，要不要 com 层等等。 只通过 class 来分离逻辑代码 PBL 既分离 class 又分离 package，而 PBF 只通过 class 来分离逻辑代码。 没有必要通过 package 分离，因为 PBL 中也可能出现尴尬的情况： 12├── service ├── MainService.java 按照 PBL, service 包下的所有东西都是 Service，应该不需要 Service 后缀，但实际上通常为了方便，直接 import service 包，Service 后缀是为了避免引入的 class 和当前包下的 class 命名冲突，当然，不用后缀也可以，得写清楚包路径，比如 new com.domain.service.MainService()，麻烦；而 PBF 就很方便，无需 import，直接 new MainService() 即可。 package 的大小有意义了 PBL 中包的大小无限增长是合理的，因为功能越添越多，而 PBF 中包太大（包里 class 太多）表示这块需要重构（划分子包）。 如要知道更多好处，可以查看这篇博文：[Package by features, not layers][Package by features, not layers]，当然，我们大谷歌也有相应的 Sample：[todo-mvp][todo-mvp]，其结构如下所示，很值得学习。 123456789101112131415161718192021222324252627282930313233343536373839404142434445com└── example └── android └── architecture └── blueprints └── todoapp ├── BasePresenter.java ├── BaseView.java ├── addedittask │ ├── AddEditTaskActivity.java │ ├── AddEditTaskContract.java │ ├── AddEditTaskFragment.java │ └── AddEditTaskPresenter.java ├── data │ ├── Task.java │ └── source │ ├── TasksDataSource.java │ ├── TasksRepository.java │ ├── local │ │ ├── TasksDbHelper.java │ │ ├── TasksLocalDataSource.java │ │ └── TasksPersistenceContract.java │ └── remote │ └── TasksRemoteDataSource.java ├── statistics │ ├── StatisticsActivity.java │ ├── StatisticsContract.java │ ├── StatisticsFragment.java │ └── StatisticsPresenter.java ├── taskdetail │ ├── TaskDetailActivity.java │ ├── TaskDetailContract.java │ ├── TaskDetailFragment.java │ └── TaskDetailPresenter.java ├── tasks │ ├── ScrollChildSwipeRefreshLayout.java │ ├── TasksActivity.java │ ├── TasksContract.java │ ├── TasksFilterType.java │ ├── TasksFragment.java │ └── TasksPresenter.java └── util ├── ActivityUtils.java ├── EspressoIdlingResource.java └── SimpleCountingIdlingResource.java 参考以上的代码结构，按功能分包具体可以这样做： 12345678910111213141516171819202122com└── domain └── app ├── App.java 定义 Application 类 ├── Config.java 定义配置数据（常量） ├── base 基础组件 ├── custom_view 自定义视图 ├── data 数据处理 │ ├── DataManager.java 数据管理器， │ ├── local 来源于本地的数据，比如 SP，Database，File │ ├── model 定义 model（数据结构以及 getter/setter、compareTo、equals 等等，不含复杂操作） │ └── remote 来源于远端的数据 ├── feature 功能 │ ├── feature0 功能 0 │ │ ├── feature0Activity.java │ │ ├── feature0Fragment.java │ │ ├── xxAdapter.java │ │ └── ... 其他 class │ └── ...其他功能 ├── injection 依赖注入 ├── util 工具类 └── widget 小部件 3.2 类名类名都以 UpperCamelCase 风格编写。 类名通常是名词或名词短语，接口名称有时可能是形容词或形容词短语。现在还没有特定的规则或行之有效的约定来命名注解类型。 名词，采用大驼峰命名法，尽量避免缩写，除非该缩写是众所周知的， 比如 HTML、URL，如果类名称中包含单词缩写，则单词缩写的每个字母均应大写。 类 描述 例如 Activity 类 Activity 为后缀标识 欢迎页面类 WelcomeActivity Adapter 类 Adapter 为后缀标识 新闻详情适配器 NewsDetailAdapter 解析类 Parser 为后缀标识 首页解析类 HomePosterParser 工具方法类 Utils 或 Manager 为后缀标识 线程池管理类：ThreadPoolManager日志工具类：LogUtils（Logger 也可）打印工具类：PrinterUtils 数据库类 以 DBHelper 后缀标识 新闻数据库：NewsDBHelper Service 类 以 Service 为后缀标识 时间服务 TimeService BroadcastReceiver 类 以 Receiver 为后缀标识 推送接收 JPushReceiver ContentProvider 类 以 Provider 为后缀标识 ShareProvider 自定义的共享基础类 以 Base 开头 BaseActivity, BaseFragment 测试类的命名以它要测试的类的名称开始，以 Test 结束。例如：HashTest 或 HashIntegrationTest。 接口（interface）：命名规则与类一样采用大驼峰命名法，多以 able 或 ible 结尾，如 interface Runnable、interface Accessible。 注意：如果项目采用 MVP，所有 Model、View、Presenter 的接口都以 I 为前缀，不加后缀，其他的接口采用上述命名规则。 3.3 方法名方法名都以 lowerCamelCase 风格编写。 方法名通常是动词或动词短语。 方法 说明 initXX() 初始化相关方法，使用 init 为前缀标识，如初始化布局 initView() isXX(), checkXX() 方法返回值为 boolean 型的请使用 is/check 为前缀标识 getXX() 返回某个值的方法，使用 get 为前缀标识 setXX() 设置某个属性值 handleXX(), processXX() 对数据进行处理的方法 displayXX(), showXX() 弹出提示框和提示信息，使用 display/show 为前缀标识 updateXX() 更新数据 saveXX(), insertXX() 保存或插入数据 resetXX() 重置数据 clearXX() 清除数据 removeXX(), deleteXX() 移除数据或者视图等，如 removeView() drawXX() 绘制数据或效果相关的，使用 draw 前缀标识 3.4 常量名常量名命名模式为 CONSTANT_CASE，全部字母大写，用下划线分隔单词。那到底什么算是一个常量？ 每个常量都是一个 static final 字段，但不是所有 static final 字段都是常量。在决定一个字段是否是一个常量时，得考虑它是否真的感觉像是一个常量。例如，如果观测任何一个该实例的状态是可变的，则它几乎肯定不会是一个常量。只是永远不打算改变的对象一般是不够的，它要真的一直不变才能将它示为常量。 1234567891011121314// Constantsstatic final int NUMBER = 5;static final ImmutableListNAMES = ImmutableList.of("Ed", "Ann");static final Joiner COMMA_JOINER = Joiner.on(','); // because Joiner is immutablestatic final SomeMutableType[] EMPTY_ARRAY = &#123;&#125;;enum SomeEnum &#123; ENUM_CONSTANT &#125;// Not constantsstatic String nonFinal = "non-final";final String nonStatic = "non-static";static final SetmutableCollection = new HashSet();static final ImmutableSetmutableElements = ImmutableSet.of(mutable);static final Logger logger = Logger.getLogger(MyClass.getName());static final String[] nonEmptyArray = &#123;"these", "can", "change"&#125;; 3.5 非常量字段名非常量字段名以 lowerCamelCase 风格的基础上改造为如下风格：基本结构为 scope{Type0}VariableName{Type1}、type0VariableName{Type1}、variableName{Type1}。 说明：{} 中的内容为可选。 注意：所有的 VO（值对象）统一采用标准的 lowerCamelCase 风格编写，所有的 DTO（数据传输对象）就按照接口文档中定义的字段名编写。 3.5.1 scope（范围）非公有，非静态字段命名以 m 开头。 静态字段命名以 s 开头。 其他字段以小写字母开头。 例如： 1234567public class MyClass &#123; public int publicField; private static MyClass sSingleton; int mPackagePrivate; private int mPrivate; protected int mProtected;&#125; 使用 1 个字符前缀来表示作用范围，1 个字符的前缀必须小写，前缀后面是由表意性强的一个单词或多个单词组成的名字，而且每个单词的首写字母大写，其它字母小写，这样保证了对变量名能够进行正确的断句。 3.5.2 Type0（控件类型）考虑到 Android 众多的 UI 控件，为避免控件和普通成员变量混淆以及更好地表达意思，所有用来表示控件的成员变量统一加上控件缩写作为前缀（具体见附录 UI 控件缩写表）。 例如：mIvAvatar、rvBooks、flContainer。 3.5.3 VariableName（变量名）变量名中可能会出现量词，我们需要创建统一的量词，它们更容易理解，也更容易搜索。 例如：mFirstBook、mPreBook、curBook。 量词列表 量词后缀说明 First 一组变量中的第一个 Last 一组变量中的最后一个 Next 一组变量中的下一个 Pre 一组变量中的上一个 Cur 一组变量中的当前变量 3.5.4 Type1（数据类型）对于表示集合或者数组的非常量字段名，我们可以添加后缀来增强字段的可读性，比如： 集合添加如下后缀：List、Map、Set。 数组添加如下后缀：Arr。 例如：mIvAvatarList、userArr、firstNameSet。 注意：如果数据类型不确定的话，比如表示的是很多书，那么使用其复数形式来表示也可，例如 mBooks。 3.6 参数名参数名以 lowerCamelCase 风格编写，参数应该避免用单个字符命名。 3.7 局部变量名局部变量名以 lowerCamelCase 风格编写，比起其它类型的名称，局部变量名可以有更为宽松的缩写。 虽然缩写更宽松，但还是要避免用单字符进行命名，除了临时变量和循环变量。 即使局部变量是 final 和不可改变的，也不应该把它示为常量，自然也不能用常量的规则去命名它。 3.8 临时变量临时变量通常被取名为 i、j、k、m 和 n，它们一般用于整型；c、d、e，它们一般用于字符型。 如：for (int i = 0; i &lt; len; i++)。 3.9 类型变量名类型变量可用以下两种风格之一进行命名： 单个的大写字母，后面可以跟一个数字（如：E, T, X, T2）。 以类命名方式（参考3.2 类名），后面加个大写的 T（如：RequestT, FooBarT）。 更多还可参考：[阿里巴巴 Java 开发手册][阿里巴巴 Java 开发手册] 4 代码样式规范4.1 使用标准大括号样式左大括号不单独占一行，与其前面的代码位于同一行： 1234567891011class MyClass &#123; int func() &#123; if (something) &#123; // ... &#125; else if (somethingElse) &#123; // ... &#125; else &#123; // ... &#125; &#125;&#125; 我们需要在条件语句周围添加大括号。例外情况：如果整个条件语句（条件和主体）适合放在同一行，那么您可以（但不是必须）将其全部放在一行上。例如，我们接受以下样式： 123if (condition) &#123; body();&#125; 同样也接受以下样式： 1if (condition) body(); 但不接受以下样式： 12if (condition) body(); // bad! 4.2 编写简短方法在可行的情况下，尽量编写短小精炼的方法。我们了解，有些情况下较长的方法是恰当的，因此对方法的代码长度没有做出硬性限制。如果某个方法的代码超出 40 行，请考虑是否可以在不破坏程序结构的前提下对其拆解。 4.3 类成员的顺序这并没有唯一的正确解决方案，但如果都使用一致的顺序将会提高代码的可读性，推荐使用如下排序： 常量 字段 构造函数 重写函数和回调 公有函数 私有函数 内部类或接口 例如： 123456789101112131415161718192021222324public class MainActivity extends Activity &#123; private static final String TAG = MainActivity.class.getSimpleName(); private String mTitle; private TextView mTextViewTitle; @Override public void onCreate() &#123; ... &#125; public void setTitle(String title) &#123; mTitle = title; &#125; private void setUpView() &#123; ... &#125; static class AnInnerClass &#123; &#125;&#125; 如果类继承于 Android 组件（例如 Activity 或 Fragment），那么把重写函数按照他们的生命周期进行排序是一个非常好的习惯，例如，Activity 实现了 onCreate()、onDestroy()、onPause()、onResume()，它的正确排序如下所示： 1234567891011121314public class MainActivity extends Activity &#123; //Order matches Activity lifecycle @Override public void onCreate() &#123;&#125; @Override public void onResume() &#123;&#125; @Override public void onPause() &#123;&#125; @Override public void onDestroy() &#123;&#125;&#125; 4.4 函数参数的排序在 Android 开发过程中，Context 在函数参数中是再常见不过的了，我们最好把 Context 作为其第一个参数。 正相反，我们把回调接口应该作为其最后一个参数。 例如： 12345// Context always goes firstpublic User loadUser(Context context, int userId);// Callbacks always go lastpublic void loadUserAsync(Context context, int userId, UserCallback callback); 4.5 字符串常量的命名和值Android SDK 中的很多类都用到了键值对函数，比如 SharedPreferences、Bundle、Intent，所以，即便是一个小应用，我们最终也不得不编写大量的字符串常量。 当时用到这些类的时候，我们 必须 将它们的键定义为 static final 字段，并遵循以下指示作为前缀。 类 字段名前缀 SharedPreferences PREF_ Bundle BUNDLE_ Fragment Arguments ARGUMENT_ Intent Extra EXTRA_ Intent Action ACTION_ 说明：虽然 Fragment.getArguments() 得到的也是 Bundle ，但因为这是 Bundle 的常用用法，所以特意为此定义一个不同的前缀。 例如： 12345678// 注意：字段的值与名称相同以避免重复问题static final String PREF_EMAIL = "PREF_EMAIL";static final String BUNDLE_AGE = "BUNDLE_AGE";static final String ARGUMENT_USER_ID = "ARGUMENT_USER_ID";// 与意图相关的项使用完整的包名作为值的前缀static final String EXTRA_SURNAME = "com.myapp.extras.EXTRA_SURNAME";static final String ACTION_OPEN_USER = "com.myapp.action.ACTION_OPEN_USER"; 4.6 Activities 和 Fragments 的传参当 Activity 或 Fragment 传递数据通过 Intent 或 Bundle 时，不同值的键须遵循上一条所提及到的。 当 Activity 或 Fragment 启动需要传递参数时，那么它需要提供一个 public static 的函数来帮助启动或创建它。 这方面，AS 已帮你写好了相关的 Live Templates，启动相关 Activity 的只需要在其内部输入 starter 即可生成它的启动器，如下所示： 12345public static void start(Context context, User user) &#123; Intent starter = new Intent(context, MainActivity.class); starter.putParcelableExtra(EXTRA_USER, user); context.startActivity(starter);&#125; 同理，启动相关 Fragment 在其内部输入 newInstance 即可，如下所示： 1234567public static MainFragment newInstance(User user) &#123; Bundle args = new Bundle(); args.putParcelable(ARGUMENT_USER, user); MainFragment fragment = new MainFragment(); fragment.setArguments(args); return fragment;&#125; 注意：这些函数需要放在 onCreate() 之前的类的顶部；如果我们使用了这种方式，那么 extras 和 arguments 的键应该是 private 的，因为它们不再需要暴露给其他类来使用。 4.7 行长限制代码中每一行文本的长度都应该不超过 100 个字符。虽然关于此规则存在很多争论，但最终决定仍是以 100 个字符为上限，如果行长超过了 100（AS 窗口右侧的竖线就是设置的行宽末尾 ），我们通常有两种方法来缩减行长。 提取一个局部变量或方法（最好）。 使用换行符将一行换成多行。 不过存在以下例外情况： 如果备注行包含长度超过 100 个字符的示例命令或文字网址，那么为了便于剪切和粘贴，该行可以超过 100 个字符。 导入语句行可以超出此限制，因为用户很少会看到它们（这也简化了工具编写流程）。 4.7.1 换行策略这没有一个准确的解决方案来决定如何换行，通常不同的解决方案都是有效的，但是有一些规则可以应用于常见的情况。 4.7.1.1 操作符的换行除赋值操作符之外，我们把换行符放在操作符之前，例如： 12int longName = anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne + theFinalOne; 赋值操作符的换行我们放在其后，例如： 12int longName = anotherVeryLongVariable + anEvenLongerOne - thisRidiculousLongOne + theFinalOne; 4.7.1.2 函数链的换行当同一行中调用多个函数时（比如使用构建器时），对每个函数的调用应该在新的一行中，我们把换行符插入在 . 之前。 例如： 1Picasso.with(context).load("https://blankj.com/images/avatar.jpg").into(ivAvatar); 我们应该使用如下规则： 123Picasso.with(context) .load("https://blankj.com/images/avatar.jpg") .into(ivAvatar); 4.7.1.3 多参数的换行当一个方法有很多参数或者参数很长的时候，我们应该在每个 , 后面进行换行。 比如： 1loadPicture(context, "https://blankj.com/images/avatar.jpg", ivAvatar, "Avatar of the user", clickListener); 我们应该使用如下规则： 12345loadPicture(context, "https://blankj.com/images/avatar.jpg", ivAvatar, "Avatar of the user", clickListener); 4.7.1.4 RxJava 链式的换行RxJava 的每个操作符都需要换新行，并且把换行符插入在 . 之前。 例如： 123456789101112131415public Observable&lt;Location&gt; syncLocations() &#123; return mDatabaseHelper.getAllLocations() .concatMap(new Func1&lt;Location, Observable&lt;? extends Location&gt;&gt;() &#123; @Override public Observable&lt;? extends Location&gt; call(Location location) &#123; return mRetrofitService.getLocation(location.id); &#125; &#125;) .retry(new Func2&lt;Integer, Throwable, Boolean&gt;() &#123; @Override public Boolean call(Integer numRetries, Throwable throwable) &#123; return throwable instanceof RetrofitError; &#125; &#125;);&#125; 5 资源文件规范资源文件命名为全部小写，采用下划线命名法。 如果是组件化开发，我们可以在组件和公共模块间创建一个 ui 模块来专门存放资源文件，然后让每个组件都依赖 ui 模块。这样做的好处是如果老项目要实现组件化的话，只需把资源文件都放入 ui 模块即可，如果想对资源文件进行分包，可以参考我这篇文章：[Android Studio 下对资源进行分包][Android Studio 下对资源进行分包]；还避免了多个模块间资源不能复用的问题。 如果是三方库开发，其使用到的资源文件及相关的 name 都应该使用库名作为前缀，这样做可以避免三方库资源和实际应用资源重名的冲突。 5.1 动画资源文件（anim/ 和 animator/）安卓主要包含属性动画和视图动画，其视图动画包括补间动画和逐帧动画。属性动画文件需要放在 res/animator/ 目录下，视图动画文件需放在 res/anim/ 目录下。 命名规则：{模块名_}逻辑名称。 说明：{} 中的内容为可选，逻辑名称 可由多个单词加下划线组成。 例如：refresh_progress.xml、market_cart_add.xml、market_cart_remove.xml。 如果是普通的补间动画或者属性动画，可采用：动画类型_方向 的命名方式。 例如： 名称 说明 fade_in 淡入 fade_out 淡出 push_down_in 从下方推入 push_down_out 从下方推出 push_left 推向左方 slide_in_from_top 从头部滑动进入 zoom_enter 变形进入 slide_in 滑动进入 shrink_to_middle 中间缩小 5.2 颜色资源文件（color/）专门存放颜色相关的资源文件。 命名规则：类型{_模块名}_逻辑名称。 说明：{} 中的内容为可选。 例如：sel_btn_font.xml。 颜色资源也可以放于 res/drawable/ 目录，引用时则用 @drawable 来引用，但不推荐这么做，最好还是把两者分开。 5.3 图片资源文件（drawable/ 和 mipmap/）res/drawable/ 目录下放的是位图文件（.png、.9.png、.jpg、.gif）或编译为可绘制对象资源子类型的 XML 文件，而 res/mipmap/ 目录下放的是不同密度的启动图标，所以 res/mipmap/ 只用于存放启动图标，其余图片资源文件都应该放到 res/drawable/ 目录下。 命名规则：类型{_模块名}_逻辑名称、类型{_模块名}_颜色。 说明：{} 中的内容为可选；类型 可以是可绘制对象资源类型，也可以是控件类型（具体见附录UI 控件缩写表）；最后可加后缀 _small 表示小图，_big 表示大图。 例如： 名称 说明 btn_main_about.png 主页关于按键 类型_模块名_逻辑名称 btn_back.png 返回按键 类型_逻辑名称 divider_maket_white.png 商城白色分割线 类型_模块名_颜色 ic_edit.png 编辑图标 类型_逻辑名称 bg_main.png 主页背景 类型_逻辑名称 btn_red.png 红色按键 类型_颜色 btn_red_big.png 红色大按键 类型_颜色 ic_head_small.png 小头像图标 类型_逻辑名称 bg_input.png 输入框背景 类型_逻辑名称 divider_white.png 白色分割线 类型_颜色 bg_main_head.png 主页头部背景 类型_模块名_逻辑名称 def_search_cell.png 搜索页面默认单元图片 类型_模块名_逻辑名称 ic_more_help.png 更多帮助图标 类型_逻辑名称 divider_list_line.png 列表分割线 类型_逻辑名称 sel_search_ok.xml 搜索界面确认选择器 类型_模块名_逻辑名称 shape_music_ring.xml 音乐界面环形形状 类型_模块名_逻辑名称 如果有多种形态，如按钮选择器：sel_btn_xx.xml，采用如下命名： 名称 说明 sel_btn_xx 作用在 btn_xx 上的 selector btn_xx_normal 默认状态效果 btn_xx_pressed state_pressed 点击效果 btn_xx_focused state_focused 聚焦效果 btn_xx_disabled state_enabled 不可用效果 btn_xx_checked state_checked 选中效果 btn_xx_selected state_selected 选中效果 btn_xx_hovered state_hovered 悬停效果 btn_xx_checkable state_checkable 可选效果 btn_xx_activated state_activated 激活效果 btn_xx_window_focused state_window_focused 窗口聚焦效果 注意：使用 Android Studio 的插件 SelectorChapek 可以快速生成 selector，前提是命名要规范。 5.4 布局资源文件（layout/）命名规则：类型_模块名、类型{_模块名}_逻辑名称。 说明：{} 中的内容为可选。 例如： 名称 说明 activity_main.xml 主窗体 类型_模块名 activity_main_head.xml 主窗体头部 类型_模块名_逻辑名称 fragment_music.xml 音乐片段 类型_模块名 fragment_music_player.xml 音乐片段的播放器 类型_模块名_逻辑名称 dialog_loading.xml 加载对话框 类型_逻辑名称 ppw_info.xml 信息弹窗（PopupWindow） 类型_逻辑名称 item_main_song.xml 主页歌曲列表项 类型_模块名_逻辑名称 5.5 菜单资源文件（menu/）菜单相关的资源文件应放在该目录下。 命名规则：{模块名_}逻辑名称 说明：{} 中的内容为可选。 例如：main_drawer.xml、navigation.xml。 5.6 values 资源文件（values/）values/ 资源文件下的文件都以 s 结尾，如 attrs.xml、colors.xml、dimens.xml，起作用的不是文件名称，而是 &lt;resources&gt; 标签下的各种标签，比如 &lt;style&gt; 决定样式，&lt;color&gt; 决定颜色，所以，可以把一个大的 xml 文件分割成多个小的文件，比如可以有多个 style 文件，如 styles.xml、styles_home.xml、styles_item_details.xml、styles_forms.xml。 5.6.1 colors.xml&lt;color&gt; 的 name 命名使用下划线命名法，在你的 colors.xml 文件中应该只是映射颜色的名称一个 ARGB 值，而没有其它的。不要使用它为不同的按钮来定义 ARGB 值。 例如，不要像下面这样做： 123456789&lt;resources&gt; &lt;color name="button_foreground"&gt;#FFFFFF&lt;/color&gt; &lt;color name="button_background"&gt;#2A91BD&lt;/color&gt; &lt;color name="comment_background_inactive"&gt;#5F5F5F&lt;/color&gt; &lt;color name="comment_background_active"&gt;#939393&lt;/color&gt; &lt;color name="comment_foreground"&gt;#FFFFFF&lt;/color&gt; &lt;color name="comment_foreground_important"&gt;#FF9D2F&lt;/color&gt; ... &lt;color name="comment_shadow"&gt;#323232&lt;/color&gt; 使用这种格式，会非常容易重复定义 ARGB 值，而且如果应用要改变基色的话会非常困难。同时，这些定义是跟一些环境关联起来的，如 button 或者 comment，应该放到一个按钮风格中，而不是在 colors.xml 文件中。 相反，应该这样做： 12345678910111213141516&lt;resources&gt; &lt;!-- grayscale --&gt; &lt;color name="white" &gt;#FFFFFF&lt;/color&gt; &lt;color name="gray_light"&gt;#DBDBDB&lt;/color&gt; &lt;color name="gray" &gt;#939393&lt;/color&gt; &lt;color name="gray_dark" &gt;#5F5F5F&lt;/color&gt; &lt;color name="black" &gt;#323232&lt;/color&gt; &lt;!-- basic colors --&gt; &lt;color name="green"&gt;#27D34D&lt;/color&gt; &lt;color name="blue"&gt;#2A91BD&lt;/color&gt; &lt;color name="orange"&gt;#FF9D2F&lt;/color&gt; &lt;color name="red"&gt;#FF432F&lt;/color&gt;&lt;/resources&gt; 向应用设计者那里要这个调色板，名称不需要跟 &quot;green&quot;、&quot;blue&quot; 等等相同。&quot;brand_primary&quot;、&quot;brand_secondary&quot;、&quot;brand_negative&quot; 这样的名字也是完全可以接受的。像这样规范的颜色很容易修改或重构，会使应用一共使用了多少种不同的颜色变得非常清晰。通常一个具有审美价值的 UI 来说，减少使用颜色的种类是非常重要的。 注意：如果某些颜色和主题有关，那就单独写一个 colors_theme.xml。 5.6.2 dimens.xml像对待 colors.xml 一样对待 dimens.xml 文件，与定义颜色调色板一样，你同时也应该定义一个空隙间隔和字体大小的“调色板”。 一个好的例子，如下所示： 123456789101112131415161718192021&lt;resources&gt; &lt;!-- font sizes --&gt; &lt;dimen name="font_22"&gt;22sp&lt;/dimen&gt; &lt;dimen name="font_18"&gt;18sp&lt;/dimen&gt; &lt;dimen name="font_15"&gt;15sp&lt;/dimen&gt; &lt;dimen name="font_12"&gt;12sp&lt;/dimen&gt; &lt;!-- typical spacing between two views --&gt; &lt;dimen name="spacing_40"&gt;40dp&lt;/dimen&gt; &lt;dimen name="spacing_24"&gt;24dp&lt;/dimen&gt; &lt;dimen name="spacing_14"&gt;14dp&lt;/dimen&gt; &lt;dimen name="spacing_10"&gt;10dp&lt;/dimen&gt; &lt;dimen name="spacing_4"&gt;4dp&lt;/dimen&gt; &lt;!-- typical sizes of views --&gt; &lt;dimen name="button_height_60"&gt;60dp&lt;/dimen&gt; &lt;dimen name="button_height_40"&gt;40dp&lt;/dimen&gt; &lt;dimen name="button_height_32"&gt;32dp&lt;/dimen&gt;&lt;/resources&gt; 布局时在写 margins 和 paddings 时，你应该使用 spacing_xx 尺寸格式来布局，而不是像对待 string 字符串一样直接写值，像这样规范的尺寸很容易修改或重构，会使应用所有用到的尺寸一目了然。 这样写会非常有感觉，会使组织和改变风格或布局非常容易。 5.6.3 strings.xml&lt;string&gt; 的 name 命名使用下划线命名法，采用以下规则：{模块名_}逻辑名称，这样方便同一个界面的所有 string 都放到一起，方便查找。 名称 说明 main_menu_about 主菜单按键文字 friend_title 好友模块标题栏 friend_dialog_del 好友删除提示 login_check_email 登录验证 dialog_title 弹出框标题 button_ok 确认键 loading 加载文字 5.6.4 styles.xml&lt;style&gt; 的 name 命名使用大驼峰命名法，几乎每个项目都需要适当的使用 styles.xml 文件，因为对于一个视图来说，有一个重复的外观是很常见的，将所有的外观细节属性（colors、padding、font）放在 styles.xml 文件中。 在应用中对于大多数文本内容，最起码你应该有一个通用的 styles.xml 文件，例如： 1234&lt;style name=&quot;ContentText&quot;&gt; &lt;item name=&quot;android:textSize&quot;&gt;@dimen/font_normal&lt;/item&gt; &lt;item name=&quot;android:textColor&quot;&gt;@color/basic_black&lt;/item&gt;&lt;/style&gt; 应用到 TextView 中： 123456&lt;TextView android:layout_width=&quot;wrap_content&quot; android:layout_height=&quot;wrap_content&quot; android:text=&quot;@string/price&quot; style=&quot;@style/ContentText&quot; /&gt; 或许你需要为按钮控件做同样的事情，不要停止在那里，将一组相关的和重复 android:xxxx 的属性放到一个通用的 &lt;style&gt; 中。 5.7 id 命名命名规则：view 缩写{_模块名}_逻辑名，例如： btn_main_search、btn_back。 如果在项目中有用黄油刀的话，使用 AS 的插件：ButterKnife Zelezny，可以非常方便帮助你生成注解；没用黄油刀的话可以使用 Android Code Generator 插件。 6 版本统一规范Android 开发存在着众多版本的不同，比如 compileSdkVersion、minSdkVersion、targetSdkVersion 以及项目中依赖第三方库的版本，不同的 module 及不同的开发人员都有不同的版本，所以需要一个统一版本规范的文件。 具体可以参考我写的这篇博文：[Android 开发之版本统一规范][Android 开发之版本统一规范]。 如果是开发多个系统级别的应用，当多个应用同时用到相同的 so 库时，一定要确保 so 库的版本一致，否则可能会引发应用崩溃。 7 第三方库规范别再闭门造车了，用用最新最火的技术吧，安利一波：[Android 流行框架查速表][Android 流行框架查速表]，顺便带上自己的干货：[Android 开发人员不得不收集的代码][Android 开发人员不得不收集的代码]。 希望 Team 能用时下较新的技术，对开源库的选取，一般都需要选择比较稳定的版本，作者在维护的项目，要考虑作者对 issue 的解决，以及开发者的知名度等各方面。选取之后，一定的封装是必要的。 个人推荐 Team 可使用如下优秀轮子： [Retrofit][Retrofit] [RxAndroid][RxAndroid] [OkHttp][OkHttp] [Glide][Glide]/[Fresco][Fresco] [Gson][Gson]/[Fastjson][Fastjson] [EventBus][EventBus]/[AndroidEventBus][AndroidEventBus] [GreenDao][GreenDao] [Dagger2][Dagger2]（选用） [Tinker][Tinker]（选用） 8 注释规范为了减少他人阅读你代码的痛苦值，请在关键地方做好注释。 8.1 类注释每个类完成后应该有作者姓名和联系方式的注释，对自己的代码负责。 123456789101112/** * &lt;pre&gt; * author : Blankj * e-mail : xxx@xx * time : 2017/03/07 * desc : xxxx 描述 * version: 1.0 * &lt;/pre&gt; */public class WelcomeActivity &#123; ...&#125; 具体可以在 AS 中自己配制，进入 Settings -&gt; Editor -&gt; File and Code Templates -&gt; Includes -&gt; File Header，输入 123456789/** * &lt;pre&gt; * author : $&#123;USER&#125; * e-mail : xxx@xx * time : $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125; * desc : * version: 1.0 * &lt;/pre&gt; */ 这样便可在每次新建类的时候自动加上该头注释。 8.2 方法注释每一个成员方法（包括自定义成员方法、覆盖方法、属性方法）的方法头都必须做方法头注释，在方法前一行输入 /** + 回车 或者设置 Fix doc comment（Settings -&gt; Keymap -&gt; Fix doc comment）快捷键，AS 便会帮你生成模板，我们只需要补全参数即可，如下所示。 12345678910111213/** * bitmap 转 byteArr * * @param bitmap bitmap 对象 * @param format 格式 * @return 字节数组 */public static byte[] bitmap2Bytes(Bitmap bitmap, CompressFormat format) &#123; if (bitmap == null) return null; ByteArrayOutputStream baos = new ByteArrayOutputStream(); bitmap.compress(format, 100, baos); return baos.toByteArray();&#125; 8.3 块注释块注释与其周围的代码在同一缩进级别。它们可以是 /* ... */ 风格，也可以是 // ... 风格（// 后最好带一个空格）。对于多行的 /* ... */ 注释，后续行必须从 * 开始， 并且与前一行的 * 对齐。以下示例注释都是 OK 的。 12345678910/* * This is * okay. */// And so// is this./* Or you can* even do this. */ 注释不要封闭在由星号或其它字符绘制的框架里。 Tip：在写多行注释时，如果你希望在必要时能重新换行（即注释像段落风格一样），那么使用 /* ... */。 8.4 其他一些注释AS 已帮你集成了一些注释模板，我们只需要直接使用即可，在代码中输入 todo、fixme 等这些注释模板，回车后便会出现如下注释。 12// TODO: 17/3/14 需要实现，但目前还未实现的功能的说明// FIXME: 17/3/14 需要修正，甚至代码是错误的，不能工作，需要修复的说明 9 测试规范业务开发完成之后，开发人员做单元测试，单元测试完成之后，保证单元测试全部通过，同时单元测试代码覆盖率达到一定程度（这个需要开发和测试约定，理论上越高越好），开发提测。 9.1 单元测试测试类的名称应该是所测试类的名称加 Test，我们创建 DatabaseHelper 的测试类，其名应该叫 DatabaseHelperTest。 测试函数被 @Test 所注解，函数名通常以被测试的方法为前缀，然后跟随是前提条件和预期的结果。 模板：void methodName 前提条件和预期结果() 例子：void signInWithEmptyEmailFails() 注意：如果函数足够清晰，那么前提条件和预期的结果是可以省略的。 有时一个类可能包含大量的方法，同时需要对每个方法进行几次测试。在这种情况下，建议将测试类分成多个类。例如，如果 DataManager 包含很多方法，我们可能要把它分成 DataManagerSignInTest、DataManagerLoadUsersTest 等等。 9.2 Espresso 测试每个 Espresso 测试通常是针对 Activity，所以其测试名就是其被测的 Activity 的名称加 Test，比如 SignInActivityTest。 10 其他的一些规范 合理布局，有效运用 &lt;merge&gt;、&lt;ViewStub&gt;、&lt;include&gt; 标签； Activity 和 Fragment 里面有许多重复的操作以及操作步骤，所以我们都需要提供一个 BaseActivity 和 BaseFragment，让所有的 Activity 和 Fragment 都继承这个基类。 方法基本上都按照调用的先后顺序在各自区块中排列； 相关功能作为小区块放在一起（或者封装掉）； 当一个类有多个构造函数，或是多个同名函数，这些函数应该按顺序出现在一起，中间不要放进其它函数； 数据提供统一的入口。无论是在 MVP、MVC 还是 MVVM 中，提供一个统一的数据入口，都可以让代码变得更加易于维护。比如可使用一个 DataManager，把 http、preference、eventpost、database 都放在 DataManager 里面进行操作，我们只需要与 DataManager 打交道； 多用组合，少用继承； 提取方法，去除重复代码。对于必要的工具类抽取也很重要，这在以后的项目中是可以重用的。 可引入 Dagger2 减少模块之间的耦合性。Dagger2 是一个依赖注入框架，使用代码自动生成创建依赖关系需要的代码。减少很多模板化的代码，更易于测试，降低耦合，创建可复用可互换的模块； 项目引入 RxAndroid 响应式编程，可以极大的减少逻辑代码； 通过引入事件总线，如：EventBus、AndroidEventBus、RxBus，它允许我们在 DataLayer 中发送事件，以便 ViewLayer 中的多个组件都能够订阅到这些事件，减少回调； 尽可能使用局部变量； 及时关闭流； 尽量减少对变量的重复计算； 如下面的操作： 123for (int i = 0; i &lt; list.size(); i++) &#123; ...&#125; 建议替换为： 123for (int i = 0, len = list.size(); i &lt; len; i++) &#123; ...&#125; 尽量采用懒加载的策略，即在需要的时候才创建； 例如： 1234String str = "aaa";if (i == 1) &#123; list.add(str);&#125; 建议替换为： 1234if (i == 1) &#123; String str = "aaa"; list.add(str);&#125; 不要在循环中使用 try…catch…，应该把其放在最外层； 使用带缓冲的输入输出流进行 IO 操作； 尽量使用 HashMap、ArrayList、StringBuilder，除非线程安全需要，否则不推荐使用 HashTable、Vector、StringBuffer，后三者由于使用同步机制而导致了性能开销； 尽量在合适的场合使用单例； 使用单例可以减轻加载的负担、缩短加载的时间、提高加载的效率，但并不是所有地方都适用于单例，简单来说，单例主要适用于以下三个方面： 控制资源的使用，通过线程同步来控制资源的并发访问。 控制实例的产生，以达到节约资源的目的。 控制数据的共享，在不建立直接关联的条件下，让多个不相关的进程或线程之间实现通信。 把一个基本数据类型转为字符串，基本数据类型.toString() 是最快的方式，String.valueOf(数据) 次之，数据 + &quot;&quot; 最慢； 使用 AS 自带的 Lint 来优化代码结构（什么，你不会？右键 module、目录或者文件，选择 Analyze -&gt; Inspect Code）； 最后不要忘了内存泄漏的检测； 最后啰嗦几句： 好的命名规则能够提高代码质量，使得新人加入项目的时候降低理解代码的难度； 规矩终究是死的，适合团队的才是最好的； 命名规范需要团队一起齐心协力来维护执行，在团队生活里，谁都不可能独善其身； 一开始可能会有些不习惯，持之以恒，总会成功的。 附录UI 控件缩写表 名称 缩写 Button btn CheckBox cb EditText et FrameLayout fl GridView gv ImageButton ib ImageView iv LinearLayout ll ListView lv ProgressBar pb RadioButtion rb RecyclerView rv RelativeLayout rl ScrollView sv SeekBar sb Spinner spn TextView tv ToggleButton tb VideoView vv WebView wv 常见的英文单词缩写表 名称 缩写 average avg background bg（主要用于布局和子布局的背景） buffer buf control ctrl current cur default def delete del document doc error err escape esc icon ic（主要用在 App 的图标） increment inc information info initial init image img Internationalization I18N length len library lib message msg password pwd position pos previous pre selector sel（主要用于某一 view 多种状态，不仅包括 ListView 中的 selector，还包括按钮的 selector） server srv string str temporary tmp window win 程序中使用单词缩写原则：不要用缩写，除非该缩写是约定俗成的。]]></content>
  </entry>
  <entry>
    <title><![CDATA[REST接口规范]]></title>
    <url>%2F%E8%A7%84%E8%8C%83%2FREST%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%2FREST%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[REST接口规范 Author：Leguang E-Mail：langmanleguang@qq.com 目标 接口“粒度”争取设计得足够小，争取在业务发生变化后，后台接口不需要增减，只需要前端组合接口仍然能满足新的业务需求。 任何一个接口都可以获取到数据，哪怕没传参数。 尽可能的缩小沟通的成本，开最少的会，确定最多的事。 统一了调试工具。 开发之前把涉及到的概念名词统一翻译。 要求命名规范一名二姓三风水，四积阴德五读书，名不正则言不顺，言不顺则事难成。软件开发其实就是门命名的艺术，所以首先定义一些规范，提出一些硬性要求，大家在命名的时候尽量多花点心思，多参考优秀的命名风格。 强烈推荐参考：参考阿里巴巴Java开发手册，Android开发规范，iOS开发手册。 一个单词尽量选择5–7个字母的，这样才最优美。 首字母缩写的单词尽量每个字母都用大写，例如ID。用个小写，人家还以为是一个单词。当然uri、url、urn这种除外，因为大家都知道这个是什么。 规范并统一公司的基础包名与项目的关系。 前后端的某些名称概念要统一用某一个单词，比如支付的统一订单，支付宝用的是order，微信用的是unifiedorder，那我们统一对订单这个概念用order这个词。再比如主机：后台用gateway，现在我们统一用host。这单词不统一很容易分裂。 uri规范uri 表示资源，资源一般对应服务器端领域模型中的实体类，要求如下： 不用大写。 尽量不用横杠分隔符，万一要用，请使用中杠“-”不用下杠“_”。 参数列表要encode。 uri中的名词表示资源集合，使用复数形式。 路径仅表示资源的路径（位置），以及一些特殊的actions操作。 以复数（名词）进行命名资源，不管返回单个或者多个资源。 资源的路径从父到子依次如：/{resource}/{resource_id}/{sub_resource}/{sub_resource_id}/{sub_resource_property}。 使用?来进行资源的过滤、搜索以及分页等。 使用版本号，且版本号在资源路径之前。 优先使用内容协商来区分表述格式，而不是使用后缀来区分表述格式。 url最好越简短越好，结果过滤，排序，搜索相关的功能都应该通过参数实现。 url失效则返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 JSON规范暂时只考虑json的数据格式，要求如下： 不要使用缩写。 统一用驼峰命名法。 不要使用“_”或者“-”。 用名词复数表示集合类型。 为了方便以后的扩展兼容，如果返回的是数组，强烈建议用一个包含如items属性的对象进行包裹。如：123456789101112131415- 建议对每个字段设置默认值（数组型可设置为[],字符串型可设置为””，数值可设置为0，对象可设置为&#123;&#125;）,这一条是为了方便前端/客户端进行判断字段存不存在操作。- 建议资源使用UUID最为唯一标识。同时建议命名为id或者uid。- 采用UTF-8编码。- 数据应该拿来就能用，不应该还要进行转换操作。&gt; **草稿：JSON返回的格式是分门别类按对象来划分，还是铺大饼的形式铺开，两者利弊各异，比如url，可能一个接口中返回多个url，如果分json对象装的话，则key都可以叫url，否则的话key就得命名成xxxUrl。这个有待商议**## HTTP部分### 使用场景- App的初始化数据尽量都用http协议获取。- 页面的初始化数据尽量都用http协议获取。### URL结构 https://{serviceRoot}/{module}/{collection}/{id}123456789- &#123;serviceRoot&#125; – 域名+端口号 (site URL) + 根目录- &#123;module&#125; – 模块名称- &#123;collection&#125; – 要访问的资源- &#123;id&#125; – 要访问的资源的唯一编号### 公共请求头通过Content-Type指定请求与返回的数据格式有JSON和XML,暂时我们只管json的。其中请求数据还要指定Accept。其中额外添加的请求头里的参数注意大小写。 Accept: application/jsonContent-Type: application/json;charset=UTF-8Token: token_G34G34G34G34G35G5Application: 应用:版本Platform: Android12345678910111213141516171819202122232425| params | 类型 | 是否必要 | 描述 || ----------- | ------ | -------- | ------------------------------------------------------------ || Token | String | 是 | 这个不用解释了吧？ || Application | String | 是 | App应用名称（名称有官方指定）与当前版本的版本名称，中间用半角冒号隔开 || Platform | String | 是 | Android表示Android平台，iOS表示iOS平台 |### 公共参数（部分公共参数建议公放到请求头里）公共参数是指每一个接口都可能有的，为了减少篇幅，我在这里统一定义，同时后端要指定公共参数的默认值，**且要保证没有传公共参数不会报错，所以需要一定的容错性，比如priceDes这个参数值，如果是用的是全部小写的，只要是不冲突，则可认为是准确的参数并且表达了按价格降序排列这个语意**。常用公共参数如下：| params | 类型 | 是否必须 | 描述 || -------- | ------ | -------- | ------------------------------------------------------------ || keyword | String | 否 | 用于检索，不传或者传空，表示默认，默认不检索该关键字 || sort | String | 否 | 用于对列表排序，不传则表示默认，默认按配置顺序，asc升序，desc降序 || page | int | 否 | 用于分页描述，不传则表示默认，默认是第1页 || pageSize | int | 否 | 表示该页显示的条数，不传则表示默认，默认为20条 |### 个性参数~~个性参数就是除了公共参数之外的，看能否考虑统一用JSON将公共参数和个性参数浓缩成一个参数，把想要表达的参数通过json中的key-value形式传递。例如：https://api.xxx.com/both/v1/search/products?params=&#123;&quot;extra&quot;:&quot;你想填什么呢&quot;,&quot;token&quot;:&quot;token_523523523&quot;,&quot;data&quot;:&#123;&quot;uid&quot;:&quot;23523523523523&quot;&#125;&#125; 或者考虑与业务相关的参数就用json形式包装，而与业务无关的个性参数就还是用传统的方式另立一个参数。例如：https://api.xxx.com/both/v1/search/products?limit=10&amp;offset=10&amp;params=&#123;&quot;keyword&quot;:&quot;方便面&quot;,&quot;sort&quot;:&quot;des&quot;&#125;~~通过商议将个性参数统一按原始的URL传参形式传递，不考虑上面所说的那种方式。### 公共响应头 Content-Type:application/json; charset=utf-8Status:200 OK123456其中状态码要与公共响应体里的json中的code字段一样。### 公共响应体默认会有以下字段，不需要全部都有。 { “message”: “居然被你查询成功了”, “code”: 200, “page”: 0, “pageSize”: 20, “first”: “https://…”, “next”: “https://…”, “previous”: “https://…”, “last”: “https://…”, “data”: { “uid”: “6565656565665” }}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354| key | 类型 | 是否必须 | 描述 || -------- | ------ | -------- | ------------------------------------------------------------ || message | String | 是 | 返回给接口调用者的描述，有可能用于显示到界面上，需要进行国际化处理 || code | int | 是 | 这个与请求头中的状态码一致，是为了满足部分开发者的习惯 || page | int | 否 | 分页请求中请求的当前页的页码 || pageSize | int | 否 | 分页请求中一页的个数，默认为20 || first | String | 否 | 分页请求中第一页的url ，如果没有则返回空字符串 || next | String | 否 | 分页请求中下一页的url，如果没有则返回空字符串 || previous | String | 否 | 分页请求中上一页的url，如果没有则返回空字符串 || last | String | 否 | 分页请求中最后一页的url，如果没有则返回空字符串 || data | object | 否 | 当前接口的具体数据由该json对象承载 || uid | String | 否 | **对于每一个资源对象，在返回的时候，都应该返回操作这个资源对象的唯一码** |### HTTP动词表示操作。常用的HTTP动词有下面五个（括号里是对应的SQL命令）。- GET（SELECT）：从服务器取出资源（一项或多项）。 例如:GET /zoos：列出所有动物园。- POST（CREATE）：在服务器新建一个资源。 例如:POST /zoos：新建一个动物园。- PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 例如:PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）。- DELETE（DELETE）：从服务器删除资源。 例如:DELETE /zoos/ID：删除某个动物园。### 状态码作为API的设计者，正确的将API执行结果和失败原因用清晰简洁的方式传达给客户程序是十分关键的一步。我们确实可以在HTTP的相应内容中描述是否成功，如果出错是因为什么，然而，这就意味着用户需要进行内容解析，才知道执行结果和错误原因。因此，HTTP响应代码可以保证客户端在第一时间用最高效的方式获知 API 运行结果，并采取相应动作。下表列出了比较常用的响应代码。常用的http状态码及使用场景：| 响应代码 | 代码含义 || -------- | ------------------------------------------------------------ || 200 | 已创建，请求成功且服务器已创建了新的资源。 || 201 | 是否只显示处于警告状态的应用实例。 || 301 | 重定向 , 请求的网页已被永久移动到新位置。服务器返回此响应时，会自动将请求者转到新位置。 || 302 | 重定向 , 请求的网页临时移动到新位置，但求者应继续使用原有位置来进行以后的请求。302 会自动将请求者转到不同的临时位置。 || 304 | 未修改，自从上次请求后，请求的网页未被修改过。服务器返回此响应时，不会返回网页内容。 || 400 | 错误请求 , 服务器不理解请求的语法。 || 401 | 未授权 , 请求要求进行身份验证。 || 403 | 已禁止 , 服务器拒绝请求。 || 404 | 未找到 , 服务器找不到请求的网页。 || 405 | 方法禁用 , 禁用请求中所指定的方法。 || 406 | 不接受 , 无法使用请求的内容特性来响应请求的网页。 || 408 | 请求超时 , 服务器等候请求时超时。 || 410 | 已删除 , 如果请求的资源已被永久删除，那么，服务器会返回此响应。 || 412 | 未满足前提条件 , 服务器未满足请求者在请求中设置的其中一个前提条件。 || 415 | 不支持的媒体类型 , 请求的格式不受请求页面的支持。 || 500 | 内部服务器错误。 |### 分页分页适用于GET类型且返回集合数据的请求，根据如下参数进行分页操作。分页返回的数据见公共响应体。 { “extra”: “你想填什么就填什么”, “page”: 0, “pageSize”: 20,}1234567891011121314151617181920| params | 类型 | 是否必须 | 描述 || -------- | ---- | -------- | ---- || page | int | 否 | 同上 || pageSize | int | 否 | 同上 |## 错误/异常处理- 不要发生了错误但给2xx响应，客户端可能会缓存成功的HTTP请求；- 正确设置http状态码，不要自定义；- Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。对第三点的实现稍微多说一点：Java 服务器端一般用异常表示 RESTful API 的错误。API 可能抛出两类异常：业务异常和非业务异常。业务异常由自己的业务代码抛出，表示一个用例的前置条件不满足、业务规则冲突等，比如参数校验不通过、权限校验失败。非业务类异常表示不在预期内的问题，通常由类库、框架抛出，或由于自己的代码逻辑错误导致，比如数据库连接失败、空指针异常、除0错误等等。业务类异常必须提供2种信息：1. 如果抛出该类异常，HTTP响应状态码应该设成什么；2. 异常的文本描述； 错误描述{ “message”: “特么的又错了”, “code”: 500, “document”: “https://developer.xxx.com/v1/errors/500&quot;, “exception”: [ { “code”: “NullValue”, “target”: “PhoneNumber”, “message”: “Phone number must not be null” }, { “code”: “NullValue”, “target”: “LastName”, “message”: “Last name must not be null” }, { “code”: “MalformedValue”, “target”: “Address”, “message”: “Address is not valid” } ]}12 错误请求头{ “date”: “Mon, 08 Jan 2018 03:07:08 GMT”, “server”: “nginx/1.10.3 (Ubuntu)”, “connection”: “keep-alive”, “content-length”: “237”, “content-type”: “application/json”}` 错误状态码（非200）通过分析发现，接口的错误无非调用端传递给后台的信息与预期不符，其中包括公共参数和个性参数不符，不符包括缺失和内容错误（或格式错误等）两种，还有是部分特殊业务的特殊性质造成非正常结果，如：重复申请、重复签到等。经商议决定将错误码分为四大类： 错误码 类型 描述 举例 XXX int 用于描述缺少参数，同时message做出相应的辅助描述，告诉调用者到底是缺少哪个参数，这些message只有调用者看得到，用户看不到 需要a、b、c三个参数，结果只收到a和b参数，或者收到c参数，但c参数为空字符串，且c参数又是必传的，因此可返回该错误码，同时messgae中提示：缺少c参数，或者c参数不能为空 XXX int 用于描述有参数但参数错误，可能是内容错误或格式错误，同时message做出相应的辅助描述，告诉调用者到底是哪个参数错误，这些message只有调用者看得到，用户看不到 需要传a参数为String类型的11位手机号码，结果收到的是long类型，或只有10位的String，则可返回该错误码，同时message提示a参数错误 XXX int 描述某些特定业务场景，比如重复申请、重复签到等，每一个场景对应一个错误码，同时message会提示相应错误场景，这些message会给用户看到的 比如重复申请注册奖励，返回特定码，前端做出相应显示，或者跳转，或者隐藏即可 XXX int 描述某些公共功能，调用者会做出相应公共处理 比如token失效，直接跳转到登录界面 以上友好的message提示方便了我们，同时也方便了非法调用者，为阻碍非法调用，决定设置一个开关，该开关是系统自带的，根据编译环境变更，在调试阶段就用以上友好提示，在正式部署上线后就改成模糊提示。 url失效随着系统发展，总有一些API失效或者迁移，对失效的API，返回404 not found 或 410 gone；对迁移的API，返回 301 重定向。 对于后台文档的要求文档要求描述详尽，尽可能的引导接口使用者理解接口设计，这样才能减少接口的改动，又能适应多变的业务。 容错性（健壮性）考虑到如果测试或者运营中有变动，要求每一个Web页面得有容错机制，比如关停该功能，则web必须的有相应的页面展示。 国际化（多语言支持）对于国际化的处理，可以利用HTTP协议中的 Accept-Language ，在调用 API 的时候，在 HTTP 请求头中显示指定 Accept-Language 的值，按照标国际标准来处理。具体参考： Accept-Language https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.4 Accept-Language 指定的语言码比如：zh-CN，en-US，ja-JP 等。详细列表可参考：https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c]]></content>
  </entry>
</search>
