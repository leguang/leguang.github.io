(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{195:function(t,e,r){"use strict";r.r(e);var a=r(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("Android 开发本身是遵循 MVC 模式模式的，已经具备一定的模板性，但是由于人与人的习惯问题，对代码的细节会有一定的差异性，为了减少这种差异性，我们规定一套模板出来，同一个小组、部分甚至公司都可以按照这么一套最佳实践出来的模板抄，这样未来其他人员接手时会很容易明白你的套路，找到亲切感以减少不必要的心理负担。同时，我们在写某一个模块的功能的时候，都会或多或少地利用到之前写的代码，这里我说的“利用”而非“复用”，即复制粘贴。而简单粗暴的复制粘贴，却又想改动最小，出错最小，那么如何做到这一点呢？那就得要求之前的代码都模板代码，比如之前的Toolbar控件变量都叫toolbar，之前的RecyclerView控件变量都叫recyclerView，之前的方法都叫initData();，这样一来复制粘贴过来你基本不用改动什么。接下来们就以提现记录这么一个简单的MVP模式来发的功能为例，完整的约定一下MVP各层的模板代码。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),r("p",[t._v("具体参考："),r("a",{attrs:{href:"http://doc.un75.com:5934/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/Android%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://doc.un75.com:5934/开发规范/Android开发规范.html"),r("OutboundLink")],1)]),t._v(" "),t._m(8),t._v(" "),r("p",[t._v("每一个文件都必须要有文件头注释，如下所示：")]),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),r("p",[t._v("考虑到常量重复引用会出错，我们抽取到 RouterHelper 中，实际引用如下所示：")]),t._v(" "),t._m(13),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),r("p",[t._v("在方法从上至下的调用顺序就决定了方法从上至下书写的位置。如下所示：")]),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),r("p",[t._v("我们的页面是多Activity+多Fragment的结构，基本都是用Fragment来承载View这一层，对于Activity只起一个承载Fragment和一些公共代码作用。如下所示：")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),r("p",[t._v("除了上述公共要求外，创建Fragment使用了一个静态方法，如下所示：")]),t._v(" "),t._m(27),t._v(" "),r("p",[t._v("如果需要传参则统一使用Bundle作为唯一参数，具体参数都丢进Bundle里，这样我们在复制粘贴的时候就不需要管参数类型问题了，统一都只有一种类型。如下所示：")]),t._v(" "),t._m(28),t._v(" "),r("p",[t._v("有参数就要获取，而获取参数统一在onCreate方法里获取，如下所示：")]),t._v(" "),t._m(29),t._v(" "),r("p",[t._v("统一使用模板代码，安全高效，同时注意获取的key是统一的一个，除非有两个，则再自行定义。")]),t._v(" "),r("p",[t._v("接下来是Fragment中的两个标准回调，也可以看成是View的入口，所有的代码都从这里开始，如下所示：")]),t._v(" "),t._m(30),t._v(" "),r("p",[t._v("接下来就是定义的这些方法的具体实现。其中需要强调的是变量的命名，尽量都取一样的名字，如果该类中只有一个 RecyclerView 则命名为 recyclerView 即可，如果有多有 RecyclerView 则命名为 rvXXX ，这样一来复制到其他地方使用的时候基本不用改写什么，由于都是模板方法，就不一一列出了。对于配合RecyclerView使用的Adapter，如果代码不多就不需要独立出一个类来，只需要使用匿名内部类的形式即可，如下所示：")]),t._v(" "),t._m(31),t._v(" "),r("p",[t._v("对于刷新和加载更多，建议也独立出一个方法来，因为有的时候会接收到别的广播后，需要刷新界面等。如下所示：")]),t._v(" "),t._m(32),t._v(" "),r("p",[t._v("对于异常的处理，由于我们把非200和其他的异常都统一回调到View的 error(BaseResponse response) 方法中，因此需要根据 BaseResponse 中的错误码做不同的处理，当然也可以定义其他专属回调方法供P层调用。如下所示：")]),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),r("p",[t._v("首先对类的命名统一命名为：XXXPresenter，一些基本的初始模板代码如下所示：")]),t._v(" "),t._m(35),t._v(" "),r("p",[t._v("由于Presenter只是起一个调度作用，且数据都是封装在Modle层中，并且以 RxJava 中的Observable类型返回，因此Presenter拿到的都是Observable，所以做如下规定：")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),r("p",[t._v("Model层是数据相关层，对于不同类型的模型分类放置在不同的包下，模型统一放在entity包下，entity包下又分bean和db，bean统一为网络映射文件，db统一为数据库ORM映射文件。")]),t._v(" "),t._m(41),t._v(" "),r("p",[t._v("对于 Model 层，相当于数据 Repository ，网络获取、数据库、缓存等数据来源都写在这一层，并且最好封装成 RxJava 的 Observable 形式返回给 Presenter 层调用，同时记得放到异步线程中，如下所示：")]),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),r("p",[t._v("我们的MVP三角色之间的依赖全是依赖的接口，因此会有很多接口类，为防止类爆炸，我们用一个接口类包含其他小的接口类，所以使用 Contract 这个概念来承载，将三层需要用到接口都定义来 Contract 接口类中，并作出如下规定：")]),t._v(" "),r("ul",[r("li",[t._v("所有接口定义时，参数统一传 Params 对象，将参数定义并装载在 Params 类中，这一样做的目的也是方便复制粘贴时改动最少，同时也方便统一管理，因为一个项目中能使用到的不同名称的参数了不起也就几十个，其实大多数只是类型不同而已，而接口中定义的参数对应的 key 是 Retrofit 定义接口时就已经写好的，所以三层之间只是传递一个不通类型的值而已。对于 post 请求传递 json 对象时，也只需要传递 Params 对象过去，同时由于我们已经设置了空值过滤，Params 里的字段都是用的包装类型，因此你没设置值的参数是不会传递到后台的。")]),t._v(" "),r("li",[t._v("相应到 View 的接口中的参数，尽量是 BaseResponse"),r("XXX",[t._v(" 类型的，因为你不知道 View 需要用到哪些东西，同时也方便复制粘贴改动量小。")])],1)]),t._v(" "),r("p",[t._v("如下所示：")]),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),r("p",[t._v("按模块以MVP各层分包，其中如果有Activity的话，则放模块根包里。如下所示：")]),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),r("p",[t._v("之所以定义这样的模板代码，主要是为了规范编码范式，使每个模块都“长得一样”，一套好的模板代码可以让开发者受益，也可以让后来接手的人很快找到套路并理解融入进去。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"android模板代码规范——效率为王"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android模板代码规范——效率为王","aria-hidden":"true"}},[this._v("#")]),this._v(" Android模板代码规范——效率为王")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("Author：Leguang")]),this._v(" "),e("p",[this._v("E-Mail："),e("a",{attrs:{href:"mailto:langmanleguang@qq.com"}},[this._v("langmanleguang@qq.com")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[this._v("#")]),this._v(" 前言")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("没有对错，只有习惯")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"公共要求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#公共要求","aria-hidden":"true"}},[this._v("#")]),this._v(" 公共要求")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_0-空格和冗余"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_0-空格和冗余","aria-hidden":"true"}},[this._v("#")]),this._v(" 0. 空格和冗余")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("不要随意空行，也不要出现多余的东西。写代码时勤快按 "),e("strong",[this._v("Ctrl+Alt+L")]),this._v(" 和 "),e("strong",[this._v("Ctrl+Alt+O")]),this._v(" ，这样会格式化代码同时删除不必要的引用，让代码美观。同时不要随意空格，现在Android Studio是用的谷歌的 Java 模板 Style ，都有相关规定。XML文件中也是如此，写完代码后勤快格式化，删除多余空行。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_1-相关命名规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-相关命名规范","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 相关命名规范")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_2-文件头注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-文件头注释","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 文件头注释")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("/**\n * @author: leguang\n * @e-mail: langmanleguang@qq.com\n * @version: v0.0.0\n * @blog: https://github.com/leguang\n * @time: 2018/6/14 9:36\n * @description:\n */\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_3-路由配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-路由配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. 路由配置")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("文件"),e("strong",[this._v("如果")]),this._v("有 @Route 注解，那其值应该 /{module}/{class name} ，例如：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('@Route(path = "/mine/WithdrawRecordsFragment")\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("@Route(path = RouterHelper.WithdrawRecordsFragment)\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_4-日志标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-日志标签","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. 日志标签")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("每一个类都要求有log tag，"),e("strong",[this._v("且写在第一行")]),this._v("，Android Studio活动模板是logt就会出现log tag快速编辑。如下所示：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("public static final String TAG=WithdrawRecordsFragment.class.getSimpleName();\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_5-注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-注释","aria-hidden":"true"}},[this._v("#")]),this._v(" 5. 注释")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[r("p",[t._v("类注释写在文件头注释中。如下所示：")]),t._v(" "),r("p",[r("img",{attrs:{src:"image/annotation1.png",alt:"文件头注释示例"}})])]),t._v(" "),r("li",[r("p",[t._v("类的成员变量如果需要注释，则用单行注释写在末尾，如果较长一行写不下，考虑到美观问题则写在成员变量的上面。对于成员变量的注释尽量不要用多行注释。如下所示：")]),t._v(" "),r("p",[r("img",{attrs:{src:"image/annotation0.png",alt:"成员变量注释示例"}})])]),t._v(" "),r("li",[r("p",[t._v("成员方法尽量写注释，如果实在不需要的，可不写。如下所示：")]),t._v(" "),r("p",[r("img",{attrs:{src:"image/annotation2.png",alt:"方法注释示例"}})])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"_6-方法出现的位置和顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-方法出现的位置和顺序","aria-hidden":"true"}},[this._v("#")]),this._v(" 6. 方法出现的位置和顺序")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/method.png",alt:"方法位置顺序示例"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"mvp中的模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvp中的模板","aria-hidden":"true"}},[this._v("#")]),this._v(" MVP中的模板")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mvp中的view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvp中的view","aria-hidden":"true"}},[this._v("#")]),this._v(" MVP中的View")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#activity","aria-hidden":"true"}},[this._v("#")]),this._v(" Activity")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Activity.png",alt:"Activity示例"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("基本无其他代码，只有多个Fragment都用到的"),e("strong",[this._v("公共方法")]),this._v("才写在Activity中，View层内容都集中在Fragment中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"fragment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fragment","aria-hidden":"true"}},[this._v("#")]),this._v(" Fragment")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment0.png",alt:"Fragment模板示例0"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment1.png",alt:"Fragment示例1"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment2.png",alt:"Fragment示例2"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment3.png",alt:"Fragment示例3"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment4.png",alt:"Fragment示例4"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment5.png",alt:"Fragment示例5"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Fragment6.png",alt:"Fragment示例6"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mvp中的presenter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvp中的presenter","aria-hidden":"true"}},[this._v("#")]),this._v(" MVP中的Presenter")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Presenter0.png",alt:"Presenter示例0"}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("p",[t._v("所有的数据是在异步线程中获取和处理，只有在回调到View层之前那一刻才切换回主线程，因此")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v(".observeOn(AndroidSchedulers.mainThread())\n")])])]),r("p",[t._v("固定写在Presenter中。")])]),t._v(" "),r("li",[r("p",[t._v("在 subscribe 时，我们在Presenter的父类中定义了好几种可使用的内嵌类（就是大家常说的非静态内部类）形式：BaseObserver 、BaseConsumer 、DefaultObserver 、 DefaultConsumer 等，这些都是根据")]),t._v(" "),r("ol",[r("li",[t._v("是否调用View的start方法（是否需要 loading 弹框）")]),t._v(" "),r("li",[t._v("是都将非200的错误码归类到View的error方法中（是否需要将非200错误传递到View层）")]),t._v(" "),r("li",[t._v("其他特殊类型需求的。比如 StringObserver 等")])]),t._v(" "),r("p",[t._v("等来划分和实现的，因此可以实际需求来使用，比如在列表页面，由于顶部有下拉刷新动画，因此就不需要 loading 弹框，就可以不使用 BaseObserver ，而只需要 BaseConsumer ，同时自己调用 this::error 。")])]),t._v(" "),r("li",[r("p",[t._v("如果 subscribe 是使用的Consumer，那必须要添加到 mRxManager 中，Observer 则不需要，如下所示：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Presenter1.png",alt:"Presenter示例1"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("为避免内存泄露，Context 对象尽量不要传递到 Presenter 层，在 Presenter 中如果要使用 Context 尽量使用 BaseApp 中定义的静态全局变量 mContext ，如果万一真要传递过来，则考虑只在函数作用域内。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mvp中的model"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvp中的model","aria-hidden":"true"}},[this._v("#")]),this._v(" MVP中的Model")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"分包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分包","aria-hidden":"true"}},[this._v("#")]),this._v(" 分包")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/model-package.png",alt:"Model示例0"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Model0.png",alt:"Model示例0"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"mvp中的contract"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvp中的contract","aria-hidden":"true"}},[this._v("#")]),this._v(" MVP中的Contract")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/Contract.png",alt:"Contract示例0"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#包","aria-hidden":"true"}},[this._v("#")]),this._v(" 包")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"image/package.png",alt:"分包示例"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])}],!1,null,null,null);e.default=s.exports}}]);